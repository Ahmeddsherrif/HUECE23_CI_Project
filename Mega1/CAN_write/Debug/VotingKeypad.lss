
VotingKeypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000078  00800200  00001afa  00001b8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001afa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000056  00800278  00800278  00001c08  2**3
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000548  00000000  00000000  00001c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c4b8  00000000  00000000  000021c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002999  00000000  00000000  0000e678  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000034a8  00000000  00000000  00011011  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000fd8  00000000  00000000  000144bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003809  00000000  00000000  00015494  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006edd  00000000  00000000  00018c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000568  00000000  00000000  0001fb7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	33 c1       	rjmp	.+614    	; 0x268 <__ctors_end>
       2:	00 00       	nop
       4:	61 c1       	rjmp	.+706    	; 0x2c8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c1       	rjmp	.+702    	; 0x2c8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c1       	rjmp	.+698    	; 0x2c8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c1       	rjmp	.+694    	; 0x2c8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c1       	rjmp	.+690    	; 0x2c8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c1       	rjmp	.+686    	; 0x2c8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c1       	rjmp	.+682    	; 0x2c8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c1       	rjmp	.+678    	; 0x2c8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c1       	rjmp	.+674    	; 0x2c8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c1       	rjmp	.+670    	; 0x2c8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c1       	rjmp	.+666    	; 0x2c8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c1       	rjmp	.+662    	; 0x2c8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c1       	rjmp	.+658    	; 0x2c8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c1       	rjmp	.+654    	; 0x2c8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c1       	rjmp	.+650    	; 0x2c8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c1       	rjmp	.+646    	; 0x2c8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c1       	rjmp	.+642    	; 0x2c8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c1       	rjmp	.+638    	; 0x2c8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c1       	rjmp	.+634    	; 0x2c8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c1       	rjmp	.+630    	; 0x2c8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c1       	rjmp	.+626    	; 0x2c8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c1       	rjmp	.+622    	; 0x2c8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	bd c3       	rjmp	.+1914   	; 0x7d8 <__vector_23>
      5e:	00 00       	nop
      60:	33 c1       	rjmp	.+614    	; 0x2c8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c1       	rjmp	.+610    	; 0x2c8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c1       	rjmp	.+606    	; 0x2c8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c1       	rjmp	.+602    	; 0x2c8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c1       	rjmp	.+598    	; 0x2c8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c1       	rjmp	.+594    	; 0x2c8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c1       	rjmp	.+590    	; 0x2c8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c1       	rjmp	.+586    	; 0x2c8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c1       	rjmp	.+582    	; 0x2c8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c1       	rjmp	.+578    	; 0x2c8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c1       	rjmp	.+574    	; 0x2c8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1d c1       	rjmp	.+570    	; 0x2c8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1b c1       	rjmp	.+566    	; 0x2c8 <__bad_interrupt>
      92:	00 00       	nop
      94:	19 c1       	rjmp	.+562    	; 0x2c8 <__bad_interrupt>
      96:	00 00       	nop
      98:	17 c1       	rjmp	.+558    	; 0x2c8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	15 c1       	rjmp	.+554    	; 0x2c8 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	13 c1       	rjmp	.+550    	; 0x2c8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	11 c1       	rjmp	.+546    	; 0x2c8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0f c1       	rjmp	.+542    	; 0x2c8 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	0d c1       	rjmp	.+538    	; 0x2c8 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0b c1       	rjmp	.+534    	; 0x2c8 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	09 c1       	rjmp	.+530    	; 0x2c8 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	07 c1       	rjmp	.+526    	; 0x2c8 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	05 c1       	rjmp	.+522    	; 0x2c8 <__bad_interrupt>
      be:	00 00       	nop
      c0:	03 c1       	rjmp	.+518    	; 0x2c8 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	01 c1       	rjmp	.+514    	; 0x2c8 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ff c0       	rjmp	.+510    	; 0x2c8 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	fd c0       	rjmp	.+506    	; 0x2c8 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	fb c0       	rjmp	.+502    	; 0x2c8 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	f9 c0       	rjmp	.+498    	; 0x2c8 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f7 c0       	rjmp	.+494    	; 0x2c8 <__bad_interrupt>
      da:	00 00       	nop
      dc:	f5 c0       	rjmp	.+490    	; 0x2c8 <__bad_interrupt>
      de:	00 00       	nop
      e0:	f3 c0       	rjmp	.+486    	; 0x2c8 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	4d 05       	cpc	r20, r13
      e6:	50 05       	cpc	r21, r0
      e8:	3f 05       	cpc	r19, r15
      ea:	43 05       	cpc	r20, r3
      ec:	49 05       	cpc	r20, r9
      ee:	87 05       	cpc	r24, r7
      f0:	54 05       	cpc	r21, r4
      f2:	58 05       	cpc	r21, r8
      f4:	5e 05       	cpc	r21, r14
      f6:	62 05       	cpc	r22, r2
      f8:	66 05       	cpc	r22, r6
      fa:	6c 05       	cpc	r22, r12
      fc:	70 05       	cpc	r23, r0
      fe:	74 05       	cpc	r23, r4
     100:	87 05       	cpc	r24, r7
     102:	7a 05       	cpc	r23, r10
     104:	7e 05       	cpc	r23, r14
     106:	82 05       	cpc	r24, r2
     108:	ec 07       	cpc	r30, r28
     10a:	60 07       	cpc	r22, r16
     10c:	f0 07       	cpc	r31, r16
     10e:	63 07       	cpc	r22, r19
     110:	66 07       	cpc	r22, r22
     112:	6a 07       	cpc	r22, r26
     114:	6d 07       	cpc	r22, r29
     116:	70 07       	cpc	r23, r16
     118:	ea 07       	cpc	r30, r26
     11a:	ea 07       	cpc	r30, r26
     11c:	73 07       	cpc	r23, r19
     11e:	76 07       	cpc	r23, r22
     120:	79 07       	cpc	r23, r25
     122:	7c 07       	cpc	r23, r28
     124:	7f 07       	cpc	r23, r31
     126:	82 07       	cpc	r24, r18
     128:	f4 07       	cpc	r31, r20
     12a:	91 07       	cpc	r25, r17
     12c:	94 07       	cpc	r25, r20
     12e:	ea 07       	cpc	r30, r26
     130:	98 07       	cpc	r25, r24
     132:	9c 07       	cpc	r25, r28
     134:	9f 07       	cpc	r25, r31
     136:	a2 07       	cpc	r26, r18
     138:	a5 07       	cpc	r26, r21
     13a:	a8 07       	cpc	r26, r24
     13c:	d7 07       	cpc	r29, r23
     13e:	ab 07       	cpc	r26, r27
     140:	ae 07       	cpc	r26, r30
     142:	b1 07       	cpc	r27, r17
     144:	b4 07       	cpc	r27, r20
     146:	b7 07       	cpc	r27, r23
     148:	f8 07       	cpc	r31, r24
     14a:	c6 07       	cpc	r28, r22
     14c:	c9 07       	cpc	r28, r25
     14e:	cd 07       	cpc	r28, r29
     150:	d0 07       	cpc	r29, r16
     152:	ea 07       	cpc	r30, r26
     154:	d4 07       	cpc	r29, r20
     156:	d7 07       	cpc	r29, r23
     158:	db 07       	cpc	r29, r27
     15a:	df 07       	cpc	r29, r31
     15c:	e3 07       	cpc	r30, r19
     15e:	e7 07       	cpc	r30, r23

00000160 <__trampolines_end>:
     160:	00 00       	nop
     162:	0a 0b       	sbc	r16, r26
     164:	02 09       	sbc	r16, r2
     166:	0c 0d       	add	r16, r12
     168:	0e 08       	sbc	r0, r14
     16a:	07 03       	mulsu	r16, r23
     16c:	04 01       	movw	r0, r8
	...
     18a:	00 00       	nop
     18c:	12 11       	cpse	r17, r2
     18e:	10 00       	.word	0x0010	; ????
	...

000001a6 <digital_pin_to_bit_mask_PGM>:
     1a6:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     1b6:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1c6:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1d6:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1e6:	04 08 10 20 40 80                                   ... @.

000001ec <digital_pin_to_port_PGM>:
     1ec:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1fc:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     20c:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     21c:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     22c:	0b 0b 0b 0b 0b 0b                                   ......

00000232 <port_to_output_PGM>:
     232:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     242:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000024c <port_to_mode_PGM>:
     24c:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     25c:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000266 <__ctors_start>:
     266:	e7 01       	movw	r28, r14

00000268 <__ctors_end>:
     268:	11 24       	eor	r1, r1
     26a:	1f be       	out	0x3f, r1	; 63
     26c:	cf ef       	ldi	r28, 0xFF	; 255
     26e:	d1 e2       	ldi	r29, 0x21	; 33
     270:	de bf       	out	0x3e, r29	; 62
     272:	cd bf       	out	0x3d, r28	; 61
     274:	00 e0       	ldi	r16, 0x00	; 0
     276:	0c bf       	out	0x3c, r16	; 60

00000278 <__do_copy_data>:
     278:	12 e0       	ldi	r17, 0x02	; 2
     27a:	a0 e0       	ldi	r26, 0x00	; 0
     27c:	b2 e0       	ldi	r27, 0x02	; 2
     27e:	ea ef       	ldi	r30, 0xFA	; 250
     280:	fa e1       	ldi	r31, 0x1A	; 26
     282:	00 e0       	ldi	r16, 0x00	; 0
     284:	0b bf       	out	0x3b, r16	; 59
     286:	02 c0       	rjmp	.+4      	; 0x28c <__do_copy_data+0x14>
     288:	07 90       	elpm	r0, Z+
     28a:	0d 92       	st	X+, r0
     28c:	a8 37       	cpi	r26, 0x78	; 120
     28e:	b1 07       	cpc	r27, r17
     290:	d9 f7       	brne	.-10     	; 0x288 <__do_copy_data+0x10>

00000292 <__do_clear_bss>:
     292:	22 e0       	ldi	r18, 0x02	; 2
     294:	a8 e7       	ldi	r26, 0x78	; 120
     296:	b2 e0       	ldi	r27, 0x02	; 2
     298:	01 c0       	rjmp	.+2      	; 0x29c <.do_clear_bss_start>

0000029a <.do_clear_bss_loop>:
     29a:	1d 92       	st	X+, r1

0000029c <.do_clear_bss_start>:
     29c:	ae 3c       	cpi	r26, 0xCE	; 206
     29e:	b2 07       	cpc	r27, r18
     2a0:	e1 f7       	brne	.-8      	; 0x29a <.do_clear_bss_loop>

000002a2 <__do_global_ctors>:
     2a2:	11 e0       	ldi	r17, 0x01	; 1
     2a4:	c4 e3       	ldi	r28, 0x34	; 52
     2a6:	d1 e0       	ldi	r29, 0x01	; 1
     2a8:	00 e0       	ldi	r16, 0x00	; 0
     2aa:	06 c0       	rjmp	.+12     	; 0x2b8 <__do_global_ctors+0x16>
     2ac:	21 97       	sbiw	r28, 0x01	; 1
     2ae:	01 09       	sbc	r16, r1
     2b0:	80 2f       	mov	r24, r16
     2b2:	fe 01       	movw	r30, r28
     2b4:	0e 94 c6 0c 	call	0x198c	; 0x198c <__tablejump2__>
     2b8:	c3 33       	cpi	r28, 0x33	; 51
     2ba:	d1 07       	cpc	r29, r17
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	08 07       	cpc	r16, r24
     2c0:	a9 f7       	brne	.-22     	; 0x2ac <__do_global_ctors+0xa>
     2c2:	da d1       	rcall	.+948    	; 0x678 <main>
     2c4:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <_exit>

000002c8 <__bad_interrupt>:
     2c8:	9b ce       	rjmp	.-714    	; 0x0 <__vectors>

000002ca <_Z6getBTNv>:
};


void getBTN(){
	
	int analogReading = analogRead(0);
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	a7 d3       	rcall	.+1870   	; 0xa1c <analogRead>

	if(analogReading == 0){
     2ce:	00 97       	sbiw	r24, 0x00	; 0
		ptrFunc[BTN_RIGHT]();
     2d0:	09 f4       	brne	.+2      	; 0x2d4 <_Z6getBTNv+0xa>
     2d2:	71 c0       	rjmp	.+226    	; 0x3b6 <_Z17BTN_right_handlerv>
	}
	else if(analogReading <= BTN_UP_VALUE_MAX && analogReading >= BTN_UP_VALUE_MIN){
     2d4:	9c 01       	movw	r18, r24
     2d6:	24 51       	subi	r18, 0x14	; 20
     2d8:	31 09       	sbc	r19, r1
     2da:	29 3c       	cpi	r18, 0xC9	; 201
     2dc:	31 05       	cpc	r19, r1
		ptrFunc[BTN_UP]();
     2de:	08 f4       	brcc	.+2      	; 0x2e2 <_Z6getBTNv+0x18>
     2e0:	62 c0       	rjmp	.+196    	; 0x3a6 <_Z14BTN_up_handlerv>
	}
	else if(analogReading <= BTN_DOWN_VALUE_MAX && analogReading >= BTN_DOWN_VALUE_MIN){
     2e2:	9c 01       	movw	r18, r24
     2e4:	2c 59       	subi	r18, 0x9C	; 156
     2e6:	31 09       	sbc	r19, r1
     2e8:	29 3c       	cpi	r18, 0xC9	; 201
     2ea:	31 05       	cpc	r19, r1
		ptrFunc[BTN_DOWN]();
     2ec:	08 f4       	brcc	.+2      	; 0x2f0 <_Z6getBTNv+0x26>
     2ee:	5f c0       	rjmp	.+190    	; 0x3ae <_Z16BTN_down_handlerv>
	}
	else if(analogReading <= BTN_SELECT_VALUE_MAX && analogReading >= BTN_SELECT_VALUE_MIN){
     2f0:	9c 01       	movw	r18, r24
     2f2:	2c 51       	subi	r18, 0x1C	; 28
     2f4:	32 40       	sbci	r19, 0x02	; 2
     2f6:	29 3c       	cpi	r18, 0xC9	; 201
     2f8:	31 05       	cpc	r19, r1
		ptrFunc[BTN_SELECT]();
     2fa:	08 f4       	brcc	.+2      	; 0x2fe <_Z6getBTNv+0x34>
     2fc:	60 c0       	rjmp	.+192    	; 0x3be <_Z18BTN_select_handlerv>
	}
	
	else if(analogReading <= BTN_LEFT_VALUE_MAX && analogReading >= BTN_LEFT_VALUE_MIN){
     2fe:	86 53       	subi	r24, 0x36	; 54
     300:	91 40       	sbci	r25, 0x01	; 1
     302:	89 3c       	cpi	r24, 0xC9	; 201
     304:	91 05       	cpc	r25, r1
		ptrFunc[BTN_LEFT]();
     306:	08 f4       	brcc	.+2      	; 0x30a <_Z6getBTNv+0x40>
     308:	4a c0       	rjmp	.+148    	; 0x39e <_Z16BTN_left_handlerv>
     30a:	08 95       	ret

0000030c <setup>:




void setup() {
	mainState = STATE_IDLE;
     30c:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <mainState>
	mainEvent = EVENT_IDLE;
     310:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <mainEvent>
	
	stateEntry = true;
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <stateEntry>
	stateExit = false;
     31a:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <__data_end>
	
	srand(analogRead(ADC_RANDOM_GENERATOR_CHANNEL));
     31e:	82 e0       	ldi	r24, 0x02	; 2
     320:	7d d3       	rcall	.+1786   	; 0xa1c <analogRead>
     322:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <srand>
	deviceID = rand() % 0xFF;
     326:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <rand>
     32a:	6f ef       	ldi	r22, 0xFF	; 255
     32c:	70 e0       	ldi	r23, 0x00	; 0
     32e:	0e 94 91 0c 	call	0x1922	; 0x1922 <__divmodhi4>
     332:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <deviceID>
	
	lcd.begin(LCD_COLUMNS, LCD_ROWS);
     336:	20 e0       	ldi	r18, 0x00	; 0
     338:	42 e0       	ldi	r20, 0x02	; 2
     33a:	60 e1       	ldi	r22, 0x10	; 16
     33c:	88 ea       	ldi	r24, 0xA8	; 168
     33e:	92 e0       	ldi	r25, 0x02	; 2
     340:	0e 94 ad 0b 	call	0x175a	; 0x175a <_ZN13LiquidCrystal5beginEhhh>
	lcd.clear();
     344:	88 ea       	ldi	r24, 0xA8	; 168
     346:	92 e0       	ldi	r25, 0x02	; 2
     348:	0e 94 8f 0b 	call	0x171e	; 0x171e <_ZN13LiquidCrystal5clearEv>
	
	mcp2515.reset();
     34c:	81 ea       	ldi	r24, 0xA1	; 161
     34e:	92 e0       	ldi	r25, 0x02	; 2
     350:	2f d7       	rcall	.+3678   	; 0x11b0 <_ZN7MCP25155resetEv>
	mcp2515.setBitrate(CAN_125KBPS);
     352:	6b e0       	ldi	r22, 0x0B	; 11
     354:	81 ea       	ldi	r24, 0xA1	; 161
     356:	92 e0       	ldi	r25, 0x02	; 2
     358:	5f d6       	rcall	.+3262   	; 0x1018 <_ZN7MCP251510setBitrateE9CAN_SPEED>
	mcp2515.setNormalMode();
     35a:	81 ea       	ldi	r24, 0xA1	; 161
     35c:	92 e0       	ldi	r25, 0x02	; 2
     35e:	91 d5       	rcall	.+2850   	; 0xe82 <_ZN7MCP251513setNormalModeEv>
     360:	40 e0       	ldi	r20, 0x00	; 0
	
	lcd.setCursor(0,0);
     362:	60 e0       	ldi	r22, 0x00	; 0
     364:	88 ea       	ldi	r24, 0xA8	; 168
     366:	92 e0       	ldi	r25, 0x02	; 2
     368:	0e 94 94 0b 	call	0x1728	; 0x1728 <_ZN13LiquidCrystal9setCursorEhh>
     36c:	6e e0       	ldi	r22, 0x0E	; 14
	lcd.print("4.5 Leaders");
     36e:	72 e0       	ldi	r23, 0x02	; 2
     370:	88 ea       	ldi	r24, 0xA8	; 168
     372:	92 e0       	ldi	r25, 0x02	; 2
     374:	cf d1       	rcall	.+926    	; 0x714 <_ZN5Print5printEPKc>
     376:	60 ed       	ldi	r22, 0xD0	; 208
	delay(2000);
     378:	77 e0       	ldi	r23, 0x07	; 7
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	a7 d2       	rcall	.+1358   	; 0x8ce <delay>
     380:	88 ea       	ldi	r24, 0xA8	; 168
     382:	92 e0       	ldi	r25, 0x02	; 2
	lcd.clear();
     384:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <_ZN13LiquidCrystal5clearEv>

00000388 <loop>:
     388:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <mainState>
}

void loop() {
	
	switch(mainState){
     38c:	81 30       	cpi	r24, 0x01	; 1
     38e:	29 f0       	breq	.+10     	; 0x39a <loop+0x12>
     390:	18 f0       	brcs	.+6      	; 0x398 <loop+0x10>
     392:	82 30       	cpi	r24, 0x02	; 2
     394:	19 f0       	breq	.+6      	; 0x39c <loop+0x14>
     396:	08 95       	ret
		case STATE_IDLE:{
			stateIDLE_handler();
     398:	39 c0       	rjmp	.+114    	; 0x40c <_Z17stateIDLE_handlerv>
			break;
		}
		
		case STATE_ACTIVE:{
			stateACTIVE_handler();
     39a:	90 c0       	rjmp	.+288    	; 0x4bc <_Z19stateACTIVE_handlerv>
			break;
		}
		
		case STATE_VOTED:{
			stateVOTED_handler();
     39c:	fa c0       	rjmp	.+500    	; 0x592 <_Z18stateVOTED_handlerv>

0000039e <_Z16BTN_left_handlerv>:
     39e:	81 e4       	ldi	r24, 0x41	; 65




void BTN_left_handler(){
	vote = 'A';
     3a0:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <vote>
     3a4:	08 95       	ret

000003a6 <_Z14BTN_up_handlerv>:
}

void BTN_up_handler(){
	vote = 'B';
     3a6:	82 e4       	ldi	r24, 0x42	; 66
     3a8:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <vote>
     3ac:	08 95       	ret

000003ae <_Z16BTN_down_handlerv>:
}

void BTN_down_handler(){
	vote = 'C';
     3ae:	83 e4       	ldi	r24, 0x43	; 67
     3b0:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <vote>
     3b4:	08 95       	ret

000003b6 <_Z17BTN_right_handlerv>:
}

void BTN_right_handler(){
	vote = 'D';
     3b6:	84 e4       	ldi	r24, 0x44	; 68
     3b8:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <vote>
     3bc:	08 95       	ret

000003be <_Z18BTN_select_handlerv>:
}

void BTN_select_handler(){
	if(vote != 0){
     3be:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <vote>
     3c2:	88 23       	and	r24, r24
     3c4:	19 f0       	breq	.+6      	; 0x3cc <_Z18BTN_select_handlerv+0xe>
		mainEvent = EVENT_DONE_VOTE;
     3c6:	82 e0       	ldi	r24, 0x02	; 2
     3c8:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <mainEvent>
     3cc:	08 95       	ret

000003ce <_GLOBAL__sub_I_lcd>:
	}
}
     3ce:	cf 92       	push	r12
     3d0:	ef 92       	push	r14
     3d2:	0f 93       	push	r16
     3d4:	1f 93       	push	r17
﻿#include "Sketch.h"


LiquidCrystal lcd(rs, en, d4, d5, d6, d7);
     3d6:	87 e0       	ldi	r24, 0x07	; 7
     3d8:	c8 2e       	mov	r12, r24
     3da:	96 e0       	ldi	r25, 0x06	; 6
     3dc:	e9 2e       	mov	r14, r25
     3de:	05 e0       	ldi	r16, 0x05	; 5
     3e0:	24 e0       	ldi	r18, 0x04	; 4
     3e2:	49 e0       	ldi	r20, 0x09	; 9
     3e4:	68 e0       	ldi	r22, 0x08	; 8
     3e6:	88 ea       	ldi	r24, 0xA8	; 168
     3e8:	92 e0       	ldi	r25, 0x02	; 2
     3ea:	0e 94 3a 0c 	call	0x1874	; 0x1874 <_ZN13LiquidCrystalC1Ehhhhhh>
MCP2515 mcp2515(SS_PIN);
     3ee:	00 e0       	ldi	r16, 0x00	; 0
     3f0:	10 e0       	ldi	r17, 0x00	; 0
     3f2:	20 e8       	ldi	r18, 0x80	; 128
     3f4:	36 e9       	ldi	r19, 0x96	; 150
     3f6:	48 e9       	ldi	r20, 0x98	; 152
     3f8:	50 e0       	ldi	r21, 0x00	; 0
     3fa:	61 e3       	ldi	r22, 0x31	; 49
     3fc:	81 ea       	ldi	r24, 0xA1	; 161
     3fe:	92 e0       	ldi	r25, 0x02	; 2
     400:	46 d4       	rcall	.+2188   	; 0xc8e <_ZN7MCP2515C1EhmP8SPIClass>

void BTN_select_handler(){
	if(vote != 0){
		mainEvent = EVENT_DONE_VOTE;
	}
}
     402:	1f 91       	pop	r17
     404:	0f 91       	pop	r16
     406:	ef 90       	pop	r14
     408:	cf 90       	pop	r12
     40a:	08 95       	ret

0000040c <_Z17stateIDLE_handlerv>:
 */ 

#include "Sketch.h"

void stateIDLE_handler(){
	if(stateEntry == true){
     40c:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <stateEntry>
     410:	88 23       	and	r24, r24
     412:	29 f1       	breq	.+74     	; 0x45e <_Z17stateIDLE_handlerv+0x52>
		stateEntry = false;
     414:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <stateEntry>
		lcd.clear();
     418:	88 ea       	ldi	r24, 0xA8	; 168
     41a:	92 e0       	ldi	r25, 0x02	; 2
     41c:	0e 94 8f 0b 	call	0x171e	; 0x171e <_ZN13LiquidCrystal5clearEv>
		lcd.setCursor(0,0);
     420:	40 e0       	ldi	r20, 0x00	; 0
     422:	60 e0       	ldi	r22, 0x00	; 0
     424:	88 ea       	ldi	r24, 0xA8	; 168
     426:	92 e0       	ldi	r25, 0x02	; 2
     428:	0e 94 94 0b 	call	0x1728	; 0x1728 <_ZN13LiquidCrystal9setCursorEhh>
		lcd.print("STATE: IDLE");
     42c:	6a e1       	ldi	r22, 0x1A	; 26
     42e:	72 e0       	ldi	r23, 0x02	; 2
     430:	88 ea       	ldi	r24, 0xA8	; 168
     432:	92 e0       	ldi	r25, 0x02	; 2
     434:	6f d1       	rcall	.+734    	; 0x714 <_ZN5Print5printEPKc>
		
		lcd.setCursor(0,1);
     436:	41 e0       	ldi	r20, 0x01	; 1
     438:	60 e0       	ldi	r22, 0x00	; 0
     43a:	88 ea       	ldi	r24, 0xA8	; 168
     43c:	92 e0       	ldi	r25, 0x02	; 2
     43e:	0e 94 94 0b 	call	0x1728	; 0x1728 <_ZN13LiquidCrystal9setCursorEhh>
		lcd.print("Device ID: ");
     442:	66 e2       	ldi	r22, 0x26	; 38
     444:	72 e0       	ldi	r23, 0x02	; 2
     446:	88 ea       	ldi	r24, 0xA8	; 168
     448:	92 e0       	ldi	r25, 0x02	; 2
     44a:	64 d1       	rcall	.+712    	; 0x714 <_ZN5Print5printEPKc>
		lcd.print(deviceID);
     44c:	4a e0       	ldi	r20, 0x0A	; 10
     44e:	50 e0       	ldi	r21, 0x00	; 0
     450:	60 91 a0 02 	lds	r22, 0x02A0	; 0x8002a0 <deviceID>
     454:	88 ea       	ldi	r24, 0xA8	; 168
     456:	92 e0       	ldi	r25, 0x02	; 2
     458:	b9 d1       	rcall	.+882    	; 0x7cc <_ZN5Print5printEhi>
		
		vote = 0;
     45a:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <vote>
	}
	
	if(mcp2515.readMessage(&responseFrame) == MCP2515::ERROR_OK && responseFrame.can_id == CAN_MSG_RESPONSE_ID){
     45e:	60 e9       	ldi	r22, 0x90	; 144
     460:	72 e0       	ldi	r23, 0x02	; 2
     462:	81 ea       	ldi	r24, 0xA1	; 161
     464:	92 e0       	ldi	r25, 0x02	; 2
     466:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <_ZN7MCP251511readMessageEP9can_frame>
     46a:	81 11       	cpse	r24, r1
     46c:	12 c0       	rjmp	.+36     	; 0x492 <_Z17stateIDLE_handlerv+0x86>
     46e:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <responseFrame>
     472:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <responseFrame+0x1>
     476:	a0 91 92 02 	lds	r26, 0x0292	; 0x800292 <responseFrame+0x2>
     47a:	b0 91 93 02 	lds	r27, 0x0293	; 0x800293 <responseFrame+0x3>
     47e:	40 97       	sbiw	r24, 0x10	; 16
     480:	a1 05       	cpc	r26, r1
     482:	b1 05       	cpc	r27, r1
     484:	31 f4       	brne	.+12     	; 0x492 <_Z17stateIDLE_handlerv+0x86>
		switch(responseFrame.data[1]){
     486:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <responseFrame+0x9>
     48a:	81 30       	cpi	r24, 0x01	; 1
     48c:	11 f4       	brne	.+4      	; 0x492 <_Z17stateIDLE_handlerv+0x86>
			case RESPONSE_START:{
				mainEvent = EVENT_START_VOTE;
     48e:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <mainEvent>
					
			}
		}
	}
	
	if(mainEvent == EVENT_START_VOTE){
     492:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <mainEvent>
     496:	81 30       	cpi	r24, 0x01	; 1
     498:	31 f4       	brne	.+12     	; 0x4a6 <_Z17stateIDLE_handlerv+0x9a>
		mainEvent = EVENT_IDLE;
     49a:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <mainEvent>
		
		mainState = STATE_ACTIVE;
     49e:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <mainState>
		stateExit = true;
     4a2:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <__data_end>
	}
	
	
	if(stateExit == true){
     4a6:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <__data_end>
     4aa:	88 23       	and	r24, r24
     4ac:	31 f0       	breq	.+12     	; 0x4ba <_Z17stateIDLE_handlerv+0xae>
		stateEntry = true;
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <stateEntry>
		
		
		stateExit = false;
     4b4:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <__data_end>
	}
	
}
     4b8:	08 95       	ret
     4ba:	08 95       	ret

000004bc <_Z19stateACTIVE_handlerv>:


void stateACTIVE_handler(){
	if(stateEntry == true){
     4bc:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <stateEntry>
     4c0:	88 23       	and	r24, r24
     4c2:	09 f1       	breq	.+66     	; 0x506 <_Z19stateACTIVE_handlerv+0x4a>
		stateEntry = false;
     4c4:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <stateEntry>
		
		lcd.clear();
     4c8:	88 ea       	ldi	r24, 0xA8	; 168
     4ca:	92 e0       	ldi	r25, 0x02	; 2
     4cc:	0e 94 8f 0b 	call	0x171e	; 0x171e <_ZN13LiquidCrystal5clearEv>
		lcd.setCursor(0,0);
     4d0:	40 e0       	ldi	r20, 0x00	; 0
     4d2:	60 e0       	ldi	r22, 0x00	; 0
     4d4:	88 ea       	ldi	r24, 0xA8	; 168
     4d6:	92 e0       	ldi	r25, 0x02	; 2
     4d8:	0e 94 94 0b 	call	0x1728	; 0x1728 <_ZN13LiquidCrystal9setCursorEhh>
		lcd.print("STATE: ACTIVE");
     4dc:	62 e3       	ldi	r22, 0x32	; 50
     4de:	72 e0       	ldi	r23, 0x02	; 2
     4e0:	88 ea       	ldi	r24, 0xA8	; 168
     4e2:	92 e0       	ldi	r25, 0x02	; 2
     4e4:	17 d1       	rcall	.+558    	; 0x714 <_ZN5Print5printEPKc>
		
		lcd.setCursor(0,1);
     4e6:	41 e0       	ldi	r20, 0x01	; 1
     4e8:	60 e0       	ldi	r22, 0x00	; 0
     4ea:	88 ea       	ldi	r24, 0xA8	; 168
     4ec:	92 e0       	ldi	r25, 0x02	; 2
     4ee:	0e 94 94 0b 	call	0x1728	; 0x1728 <_ZN13LiquidCrystal9setCursorEhh>
		lcd.print("SELECTION: ");
     4f2:	60 e4       	ldi	r22, 0x40	; 64
     4f4:	72 e0       	ldi	r23, 0x02	; 2
     4f6:	88 ea       	ldi	r24, 0xA8	; 168
     4f8:	92 e0       	ldi	r25, 0x02	; 2
     4fa:	0c d1       	rcall	.+536    	; 0x714 <_ZN5Print5printEPKc>
		lcd.print("-");
     4fc:	6c e4       	ldi	r22, 0x4C	; 76
     4fe:	72 e0       	ldi	r23, 0x02	; 2
     500:	88 ea       	ldi	r24, 0xA8	; 168
     502:	92 e0       	ldi	r25, 0x02	; 2
     504:	07 d1       	rcall	.+526    	; 0x714 <_ZN5Print5printEPKc>
	}
	
	
	lcd.setCursor(11,1);
     506:	41 e0       	ldi	r20, 0x01	; 1
     508:	6b e0       	ldi	r22, 0x0B	; 11
     50a:	88 ea       	ldi	r24, 0xA8	; 168
     50c:	92 e0       	ldi	r25, 0x02	; 2
     50e:	0e 94 94 0b 	call	0x1728	; 0x1728 <_ZN13LiquidCrystal9setCursorEhh>
	if(vote != 0){
     512:	60 91 7c 02 	lds	r22, 0x027C	; 0x80027c <vote>
     516:	66 23       	and	r22, r22
		lcd.print((char)vote);
     518:	19 f0       	breq	.+6      	; 0x520 <_Z19stateACTIVE_handlerv+0x64>
     51a:	88 ea       	ldi	r24, 0xA8	; 168
     51c:	92 e0       	ldi	r25, 0x02	; 2
	}
	
	getBTN();
     51e:	fb d0       	rcall	.+502    	; 0x716 <_ZN5Print5printEc>
     520:	d4 de       	rcall	.-600    	; 0x2ca <_Z6getBTNv>
	
	if(mcp2515.readMessage(&responseFrame) == MCP2515::ERROR_OK && responseFrame.can_id == CAN_MSG_RESPONSE_ID){
     522:	60 e9       	ldi	r22, 0x90	; 144
     524:	72 e0       	ldi	r23, 0x02	; 2
     526:	81 ea       	ldi	r24, 0xA1	; 161
     528:	92 e0       	ldi	r25, 0x02	; 2
     52a:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <_ZN7MCP251511readMessageEP9can_frame>
     52e:	81 11       	cpse	r24, r1
     530:	13 c0       	rjmp	.+38     	; 0x558 <_Z19stateACTIVE_handlerv+0x9c>
     532:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <responseFrame>
     536:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <responseFrame+0x1>
     53a:	a0 91 92 02 	lds	r26, 0x0292	; 0x800292 <responseFrame+0x2>
     53e:	b0 91 93 02 	lds	r27, 0x0293	; 0x800293 <responseFrame+0x3>
     542:	40 97       	sbiw	r24, 0x10	; 16
     544:	a1 05       	cpc	r26, r1
     546:	b1 05       	cpc	r27, r1
     548:	39 f4       	brne	.+14     	; 0x558 <_Z19stateACTIVE_handlerv+0x9c>
		switch(responseFrame.data[1]){
     54a:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <responseFrame+0x9>
     54e:	82 30       	cpi	r24, 0x02	; 2
     550:	19 f4       	brne	.+6      	; 0x558 <_Z19stateACTIVE_handlerv+0x9c>
			case RESPONSE_STOP:{
				mainEvent = EVENT_STOP_VOTE;
     552:	83 e0       	ldi	r24, 0x03	; 3
     554:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <mainEvent>
				
			}
		}
	}
	
	switch(mainEvent){
     558:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <mainEvent>
     55c:	82 30       	cpi	r24, 0x02	; 2
     55e:	39 f0       	breq	.+14     	; 0x56e <_Z19stateACTIVE_handlerv+0xb2>
     560:	83 30       	cpi	r24, 0x03	; 3
     562:	61 f4       	brne	.+24     	; 0x57c <_Z19stateACTIVE_handlerv+0xc0>
		case EVENT_STOP_VOTE:{
			mainEvent = EVENT_IDLE;
     564:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <mainEvent>
			
			mainState = STATE_IDLE;
     568:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <mainState>
     56c:	04 c0       	rjmp	.+8      	; 0x576 <_Z19stateACTIVE_handlerv+0xba>
			stateExit = true;	
			break;
		}

		case EVENT_DONE_VOTE:{
			mainEvent = EVENT_IDLE;
     56e:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <mainEvent>
			
			mainState = STATE_VOTED;
     572:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <mainState>
			stateExit = true;
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <__data_end>
		default:{
			
		}
	}
	
	if(stateExit == true){
     57c:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <__data_end>
     580:	88 23       	and	r24, r24
     582:	31 f0       	breq	.+12     	; 0x590 <_Z19stateACTIVE_handlerv+0xd4>
		stateExit = false;
     584:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <__data_end>
		
		stateEntry = true;
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <stateEntry>
	}
}
     58e:	08 95       	ret
     590:	08 95       	ret

00000592 <_Z18stateVOTED_handlerv>:

void stateVOTED_handler(){
	if(stateEntry == true){
     592:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <stateEntry>
     596:	88 23       	and	r24, r24
     598:	09 f4       	brne	.+2      	; 0x59c <_Z18stateVOTED_handlerv+0xa>
     59a:	3d c0       	rjmp	.+122    	; 0x616 <_Z18stateVOTED_handlerv+0x84>
		stateEntry = false;
     59c:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <stateEntry>
		
		voteFrame.can_id = CAN_MSG_VOTE_ID;
     5a0:	81 e1       	ldi	r24, 0x11	; 17
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	a0 e0       	ldi	r26, 0x00	; 0
     5a6:	b0 e0       	ldi	r27, 0x00	; 0
     5a8:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <voteFrame>
     5ac:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <voteFrame+0x1>
     5b0:	a0 93 82 02 	sts	0x0282, r26	; 0x800282 <voteFrame+0x2>
     5b4:	b0 93 83 02 	sts	0x0283, r27	; 0x800283 <voteFrame+0x3>
		voteFrame.can_dlc = CAN_MSG_DLC;
     5b8:	82 e0       	ldi	r24, 0x02	; 2
     5ba:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <voteFrame+0x4>
		voteFrame.data[0] = deviceID;
     5be:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <deviceID>
     5c2:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <voteFrame+0x8>
		voteFrame.data[1] = vote;
     5c6:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <vote>
     5ca:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <voteFrame+0x9>
		
		mcp2515.sendMessage(&voteFrame);
     5ce:	60 e8       	ldi	r22, 0x80	; 128
     5d0:	72 e0       	ldi	r23, 0x02	; 2
     5d2:	81 ea       	ldi	r24, 0xA1	; 161
     5d4:	92 e0       	ldi	r25, 0x02	; 2
     5d6:	06 d7       	rcall	.+3596   	; 0x13e4 <_ZN7MCP251511sendMessageEPK9can_frame>
		
		lcd.clear();
     5d8:	88 ea       	ldi	r24, 0xA8	; 168
     5da:	92 e0       	ldi	r25, 0x02	; 2
     5dc:	0e 94 8f 0b 	call	0x171e	; 0x171e <_ZN13LiquidCrystal5clearEv>
		lcd.setCursor(0,0);
     5e0:	40 e0       	ldi	r20, 0x00	; 0
     5e2:	60 e0       	ldi	r22, 0x00	; 0
     5e4:	88 ea       	ldi	r24, 0xA8	; 168
     5e6:	92 e0       	ldi	r25, 0x02	; 2
     5e8:	0e 94 94 0b 	call	0x1728	; 0x1728 <_ZN13LiquidCrystal9setCursorEhh>
		lcd.print("STATE: VOTED");
     5ec:	6e e4       	ldi	r22, 0x4E	; 78
     5ee:	72 e0       	ldi	r23, 0x02	; 2
     5f0:	88 ea       	ldi	r24, 0xA8	; 168
     5f2:	92 e0       	ldi	r25, 0x02	; 2
     5f4:	8f d0       	rcall	.+286    	; 0x714 <_ZN5Print5printEPKc>
		
		lcd.setCursor(0,1);
     5f6:	41 e0       	ldi	r20, 0x01	; 1
     5f8:	60 e0       	ldi	r22, 0x00	; 0
     5fa:	88 ea       	ldi	r24, 0xA8	; 168
     5fc:	92 e0       	ldi	r25, 0x02	; 2
     5fe:	0e 94 94 0b 	call	0x1728	; 0x1728 <_ZN13LiquidCrystal9setCursorEhh>
		lcd.print("SELECTION: ");
     602:	60 e4       	ldi	r22, 0x40	; 64
     604:	72 e0       	ldi	r23, 0x02	; 2
     606:	88 ea       	ldi	r24, 0xA8	; 168
     608:	92 e0       	ldi	r25, 0x02	; 2
     60a:	84 d0       	rcall	.+264    	; 0x714 <_ZN5Print5printEPKc>
		lcd.print((char)vote);
     60c:	60 91 7c 02 	lds	r22, 0x027C	; 0x80027c <vote>
     610:	88 ea       	ldi	r24, 0xA8	; 168
     612:	92 e0       	ldi	r25, 0x02	; 2
     614:	80 d0       	rcall	.+256    	; 0x716 <_ZN5Print5printEc>
	}
	
	if(mcp2515.readMessage(&responseFrame) == MCP2515::ERROR_OK && responseFrame.can_id == CAN_MSG_RESPONSE_ID){
     616:	60 e9       	ldi	r22, 0x90	; 144
     618:	72 e0       	ldi	r23, 0x02	; 2
     61a:	81 ea       	ldi	r24, 0xA1	; 161
     61c:	92 e0       	ldi	r25, 0x02	; 2
     61e:	d0 d7       	rcall	.+4000   	; 0x15c0 <_ZN7MCP251511readMessageEP9can_frame>
     620:	81 11       	cpse	r24, r1
     622:	13 c0       	rjmp	.+38     	; 0x64a <_Z18stateVOTED_handlerv+0xb8>
     624:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <responseFrame>
     628:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <responseFrame+0x1>
     62c:	a0 91 92 02 	lds	r26, 0x0292	; 0x800292 <responseFrame+0x2>
     630:	b0 91 93 02 	lds	r27, 0x0293	; 0x800293 <responseFrame+0x3>
     634:	40 97       	sbiw	r24, 0x10	; 16
     636:	a1 05       	cpc	r26, r1
     638:	b1 05       	cpc	r27, r1
     63a:	39 f4       	brne	.+14     	; 0x64a <_Z18stateVOTED_handlerv+0xb8>
		switch(responseFrame.data[1]){
     63c:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <responseFrame+0x9>
     640:	82 30       	cpi	r24, 0x02	; 2
     642:	19 f4       	brne	.+6      	; 0x64a <_Z18stateVOTED_handlerv+0xb8>
			case RESPONSE_STOP:{
				mainEvent = EVENT_STOP_VOTE;
     644:	83 e0       	ldi	r24, 0x03	; 3
     646:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <mainEvent>
				
			}
		}
	}
	
	switch(mainEvent){
     64a:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <mainEvent>
     64e:	83 30       	cpi	r24, 0x03	; 3
     650:	39 f4       	brne	.+14     	; 0x660 <_Z18stateVOTED_handlerv+0xce>
		case EVENT_STOP_VOTE:{
			mainEvent = EVENT_IDLE;
     652:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <mainEvent>
			stateExit = true;
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <__data_end>
			
			mainState = STATE_IDLE;
     65c:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <mainState>
		default:{
			
		}
	}
	
	if(stateExit == true){
     660:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <__data_end>
     664:	88 23       	and	r24, r24
     666:	31 f0       	breq	.+12     	; 0x674 <_Z18stateVOTED_handlerv+0xe2>
		stateExit = false;
     668:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <__data_end>
		
		stateEntry = true;
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <stateEntry>
	}
     672:	08 95       	ret
     674:	08 95       	ret

00000676 <initVariant>:
     676:	08 95       	ret

00000678 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     678:	6f d1       	rcall	.+734    	; 0x958 <init>

	initVariant();
     67a:	fd df       	rcall	.-6      	; 0x676 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     67c:	47 de       	rcall	.-882    	; 0x30c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     67e:	c0 e0       	ldi	r28, 0x00	; 0
     680:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
     682:	82 de       	rcall	.-764    	; 0x388 <loop>
     684:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
     686:	e9 f3       	breq	.-6      	; 0x682 <main+0xa>
     688:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     68c:	fa cf       	rjmp	.-12     	; 0x682 <main+0xa>

0000068e <_ZN5Print17availableForWriteEv>:
     68e:	80 e0       	ldi	r24, 0x00	; 0
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	08 95       	ret

00000694 <_ZN5Print5flushEv>:
     694:	08 95       	ret

00000696 <_ZN5Print5writeEPKhj>:
     696:	cf 92       	push	r12
     698:	df 92       	push	r13
     69a:	ef 92       	push	r14
     69c:	ff 92       	push	r15
     69e:	0f 93       	push	r16
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	6c 01       	movw	r12, r24
     6a8:	7a 01       	movw	r14, r20
     6aa:	8b 01       	movw	r16, r22
     6ac:	c0 e0       	ldi	r28, 0x00	; 0
     6ae:	d0 e0       	ldi	r29, 0x00	; 0
     6b0:	ce 15       	cp	r28, r14
     6b2:	df 05       	cpc	r29, r15
     6b4:	81 f0       	breq	.+32     	; 0x6d6 <_ZN5Print5writeEPKhj+0x40>
     6b6:	d8 01       	movw	r26, r16
     6b8:	6d 91       	ld	r22, X+
     6ba:	8d 01       	movw	r16, r26
     6bc:	d6 01       	movw	r26, r12
     6be:	ed 91       	ld	r30, X+
     6c0:	fc 91       	ld	r31, X
     6c2:	01 90       	ld	r0, Z+
     6c4:	f0 81       	ld	r31, Z
     6c6:	e0 2d       	mov	r30, r0
     6c8:	c6 01       	movw	r24, r12
     6ca:	19 95       	eicall
     6cc:	89 2b       	or	r24, r25
     6ce:	11 f0       	breq	.+4      	; 0x6d4 <_ZN5Print5writeEPKhj+0x3e>
     6d0:	21 96       	adiw	r28, 0x01	; 1
     6d2:	ee cf       	rjmp	.-36     	; 0x6b0 <_ZN5Print5writeEPKhj+0x1a>
     6d4:	7e 01       	movw	r14, r28
     6d6:	c7 01       	movw	r24, r14
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	1f 91       	pop	r17
     6de:	0f 91       	pop	r16
     6e0:	ff 90       	pop	r15
     6e2:	ef 90       	pop	r14
     6e4:	df 90       	pop	r13
     6e6:	cf 90       	pop	r12
     6e8:	08 95       	ret

000006ea <_ZN5Print5writeEPKc>:
     6ea:	61 15       	cp	r22, r1
     6ec:	71 05       	cpc	r23, r1
     6ee:	79 f0       	breq	.+30     	; 0x70e <_ZN5Print5writeEPKc+0x24>
     6f0:	fb 01       	movw	r30, r22
     6f2:	01 90       	ld	r0, Z+
     6f4:	00 20       	and	r0, r0
     6f6:	e9 f7       	brne	.-6      	; 0x6f2 <_ZN5Print5writeEPKc+0x8>
     6f8:	31 97       	sbiw	r30, 0x01	; 1
     6fa:	af 01       	movw	r20, r30
     6fc:	46 1b       	sub	r20, r22
     6fe:	57 0b       	sbc	r21, r23
     700:	dc 01       	movw	r26, r24
     702:	ed 91       	ld	r30, X+
     704:	fc 91       	ld	r31, X
     706:	02 80       	ldd	r0, Z+2	; 0x02
     708:	f3 81       	ldd	r31, Z+3	; 0x03
     70a:	e0 2d       	mov	r30, r0
     70c:	19 94       	eijmp
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	08 95       	ret

00000714 <_ZN5Print5printEPKc>:
     714:	ea cf       	rjmp	.-44     	; 0x6ea <_ZN5Print5writeEPKc>

00000716 <_ZN5Print5printEc>:
     716:	dc 01       	movw	r26, r24
     718:	ed 91       	ld	r30, X+
     71a:	fc 91       	ld	r31, X
     71c:	01 90       	ld	r0, Z+
     71e:	f0 81       	ld	r31, Z
     720:	e0 2d       	mov	r30, r0
     722:	19 94       	eijmp

00000724 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
     724:	8f 92       	push	r8
     726:	9f 92       	push	r9
     728:	af 92       	push	r10
     72a:	bf 92       	push	r11
     72c:	ef 92       	push	r14
     72e:	ff 92       	push	r15
     730:	0f 93       	push	r16
     732:	1f 93       	push	r17
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	cd b7       	in	r28, 0x3d	; 61
     73a:	de b7       	in	r29, 0x3e	; 62
     73c:	a1 97       	sbiw	r28, 0x21	; 33
     73e:	0f b6       	in	r0, 0x3f	; 63
     740:	f8 94       	cli
     742:	de bf       	out	0x3e, r29	; 62
     744:	0f be       	out	0x3f, r0	; 63
     746:	cd bf       	out	0x3d, r28	; 61
     748:	7c 01       	movw	r14, r24
     74a:	fa 01       	movw	r30, r20
     74c:	cb 01       	movw	r24, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     74e:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     750:	22 30       	cpi	r18, 0x02	; 2
     752:	08 f4       	brcc	.+2      	; 0x756 <_ZN5Print11printNumberEmh+0x32>
     754:	2a e0       	ldi	r18, 0x0A	; 10
     756:	8e 01       	movw	r16, r28
     758:	0f 5d       	subi	r16, 0xDF	; 223
     75a:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
     75c:	82 2e       	mov	r8, r18
     75e:	91 2c       	mov	r9, r1
     760:	a1 2c       	mov	r10, r1
     762:	b1 2c       	mov	r11, r1
     764:	bf 01       	movw	r22, r30
     766:	a5 01       	movw	r20, r10
     768:	94 01       	movw	r18, r8
     76a:	0e 94 a4 0c 	call	0x1948	; 0x1948 <__udivmodsi4>
    n /= base;
     76e:	f9 01       	movw	r30, r18
     770:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     772:	01 50       	subi	r16, 0x01	; 1
     774:	11 09       	sbc	r17, r1
     776:	6a 30       	cpi	r22, 0x0A	; 10
     778:	10 f4       	brcc	.+4      	; 0x77e <_ZN5Print11printNumberEmh+0x5a>
     77a:	60 5d       	subi	r22, 0xD0	; 208
     77c:	01 c0       	rjmp	.+2      	; 0x780 <_ZN5Print11printNumberEmh+0x5c>
     77e:	69 5c       	subi	r22, 0xC9	; 201
     780:	d8 01       	movw	r26, r16
     782:	6c 93       	st	X, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
     784:	23 2b       	or	r18, r19
     786:	24 2b       	or	r18, r20
     788:	25 2b       	or	r18, r21
     78a:	61 f7       	brne	.-40     	; 0x764 <_ZN5Print11printNumberEmh+0x40>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
     78c:	b8 01       	movw	r22, r16
     78e:	c7 01       	movw	r24, r14
     790:	ac df       	rcall	.-168    	; 0x6ea <_ZN5Print5writeEPKc>
}
     792:	a1 96       	adiw	r28, 0x21	; 33
     794:	0f b6       	in	r0, 0x3f	; 63
     796:	f8 94       	cli
     798:	de bf       	out	0x3e, r29	; 62
     79a:	0f be       	out	0x3f, r0	; 63
     79c:	cd bf       	out	0x3d, r28	; 61
     79e:	df 91       	pop	r29
     7a0:	cf 91       	pop	r28
     7a2:	1f 91       	pop	r17
     7a4:	0f 91       	pop	r16
     7a6:	ff 90       	pop	r15
     7a8:	ef 90       	pop	r14
     7aa:	bf 90       	pop	r11
     7ac:	af 90       	pop	r10
     7ae:	9f 90       	pop	r9
     7b0:	8f 90       	pop	r8
     7b2:	08 95       	ret

000007b4 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
     7b4:	21 15       	cp	r18, r1
     7b6:	31 05       	cpc	r19, r1
     7b8:	41 f4       	brne	.+16     	; 0x7ca <_ZN5Print5printEmi+0x16>
     7ba:	dc 01       	movw	r26, r24
     7bc:	ed 91       	ld	r30, X+
     7be:	fc 91       	ld	r31, X
     7c0:	01 90       	ld	r0, Z+
     7c2:	f0 81       	ld	r31, Z
     7c4:	e0 2d       	mov	r30, r0
     7c6:	64 2f       	mov	r22, r20
     7c8:	19 94       	eijmp
  else return printNumber(n, base);
     7ca:	ac cf       	rjmp	.-168    	; 0x724 <_ZN5Print11printNumberEmh>

000007cc <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
     7cc:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
     7ce:	46 2f       	mov	r20, r22
     7d0:	50 e0       	ldi	r21, 0x00	; 0
     7d2:	60 e0       	ldi	r22, 0x00	; 0
     7d4:	70 e0       	ldi	r23, 0x00	; 0
     7d6:	ee cf       	rjmp	.-36     	; 0x7b4 <_ZN5Print5printEmi>

000007d8 <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     7d8:	1f 92       	push	r1
     7da:	0f 92       	push	r0
     7dc:	0f b6       	in	r0, 0x3f	; 63
     7de:	0f 92       	push	r0
     7e0:	11 24       	eor	r1, r1
     7e2:	2f 93       	push	r18
     7e4:	3f 93       	push	r19
     7e6:	8f 93       	push	r24
     7e8:	9f 93       	push	r25
     7ea:	af 93       	push	r26
     7ec:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     7ee:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <timer0_millis>
     7f2:	90 91 c2 02 	lds	r25, 0x02C2	; 0x8002c2 <timer0_millis+0x1>
     7f6:	a0 91 c3 02 	lds	r26, 0x02C3	; 0x8002c3 <timer0_millis+0x2>
     7fa:	b0 91 c4 02 	lds	r27, 0x02C4	; 0x8002c4 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
     7fe:	30 91 c0 02 	lds	r19, 0x02C0	; 0x8002c0 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
     802:	23 e0       	ldi	r18, 0x03	; 3
     804:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     806:	2d 37       	cpi	r18, 0x7D	; 125
     808:	20 f4       	brcc	.+8      	; 0x812 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     80a:	01 96       	adiw	r24, 0x01	; 1
     80c:	a1 1d       	adc	r26, r1
     80e:	b1 1d       	adc	r27, r1
     810:	05 c0       	rjmp	.+10     	; 0x81c <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     812:	26 e8       	ldi	r18, 0x86	; 134
     814:	23 0f       	add	r18, r19
		m += 1;
     816:	02 96       	adiw	r24, 0x02	; 2
     818:	a1 1d       	adc	r26, r1
     81a:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     81c:	20 93 c0 02 	sts	0x02C0, r18	; 0x8002c0 <timer0_fract>
	timer0_millis = m;
     820:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <timer0_millis>
     824:	90 93 c2 02 	sts	0x02C2, r25	; 0x8002c2 <timer0_millis+0x1>
     828:	a0 93 c3 02 	sts	0x02C3, r26	; 0x8002c3 <timer0_millis+0x2>
     82c:	b0 93 c4 02 	sts	0x02C4, r27	; 0x8002c4 <timer0_millis+0x3>
	timer0_overflow_count++;
     830:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <timer0_overflow_count>
     834:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <timer0_overflow_count+0x1>
     838:	a0 91 c7 02 	lds	r26, 0x02C7	; 0x8002c7 <timer0_overflow_count+0x2>
     83c:	b0 91 c8 02 	lds	r27, 0x02C8	; 0x8002c8 <timer0_overflow_count+0x3>
     840:	01 96       	adiw	r24, 0x01	; 1
     842:	a1 1d       	adc	r26, r1
     844:	b1 1d       	adc	r27, r1
     846:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <timer0_overflow_count>
     84a:	90 93 c6 02 	sts	0x02C6, r25	; 0x8002c6 <timer0_overflow_count+0x1>
     84e:	a0 93 c7 02 	sts	0x02C7, r26	; 0x8002c7 <timer0_overflow_count+0x2>
     852:	b0 93 c8 02 	sts	0x02C8, r27	; 0x8002c8 <timer0_overflow_count+0x3>
}
     856:	bf 91       	pop	r27
     858:	af 91       	pop	r26
     85a:	9f 91       	pop	r25
     85c:	8f 91       	pop	r24
     85e:	3f 91       	pop	r19
     860:	2f 91       	pop	r18
     862:	0f 90       	pop	r0
     864:	0f be       	out	0x3f, r0	; 63
     866:	0f 90       	pop	r0
     868:	1f 90       	pop	r1
     86a:	18 95       	reti

0000086c <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     86c:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     86e:	f8 94       	cli
	m = timer0_millis;
     870:	60 91 c1 02 	lds	r22, 0x02C1	; 0x8002c1 <timer0_millis>
     874:	70 91 c2 02 	lds	r23, 0x02C2	; 0x8002c2 <timer0_millis+0x1>
     878:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <timer0_millis+0x2>
     87c:	90 91 c4 02 	lds	r25, 0x02C4	; 0x8002c4 <timer0_millis+0x3>
	SREG = oldSREG;
     880:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     882:	08 95       	ret

00000884 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     884:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     886:	f8 94       	cli
	m = timer0_overflow_count;
     888:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <timer0_overflow_count>
     88c:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <timer0_overflow_count+0x1>
     890:	a0 91 c7 02 	lds	r26, 0x02C7	; 0x8002c7 <timer0_overflow_count+0x2>
     894:	b0 91 c8 02 	lds	r27, 0x02C8	; 0x8002c8 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     898:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     89a:	a8 9b       	sbis	0x15, 0	; 21
     89c:	05 c0       	rjmp	.+10     	; 0x8a8 <micros+0x24>
     89e:	2f 3f       	cpi	r18, 0xFF	; 255
     8a0:	19 f0       	breq	.+6      	; 0x8a8 <micros+0x24>
		m++;
     8a2:	01 96       	adiw	r24, 0x01	; 1
     8a4:	a1 1d       	adc	r26, r1
     8a6:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     8a8:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     8aa:	ba 2f       	mov	r27, r26
     8ac:	a9 2f       	mov	r26, r25
     8ae:	98 2f       	mov	r25, r24
     8b0:	88 27       	eor	r24, r24
     8b2:	82 0f       	add	r24, r18
     8b4:	91 1d       	adc	r25, r1
     8b6:	a1 1d       	adc	r26, r1
     8b8:	b1 1d       	adc	r27, r1
     8ba:	bc 01       	movw	r22, r24
     8bc:	cd 01       	movw	r24, r26
     8be:	42 e0       	ldi	r20, 0x02	; 2
     8c0:	66 0f       	add	r22, r22
     8c2:	77 1f       	adc	r23, r23
     8c4:	88 1f       	adc	r24, r24
     8c6:	99 1f       	adc	r25, r25
     8c8:	4a 95       	dec	r20
     8ca:	d1 f7       	brne	.-12     	; 0x8c0 <micros+0x3c>
}
     8cc:	08 95       	ret

000008ce <delay>:

void delay(unsigned long ms)
{
     8ce:	8f 92       	push	r8
     8d0:	9f 92       	push	r9
     8d2:	af 92       	push	r10
     8d4:	bf 92       	push	r11
     8d6:	cf 92       	push	r12
     8d8:	df 92       	push	r13
     8da:	ef 92       	push	r14
     8dc:	ff 92       	push	r15
     8de:	6b 01       	movw	r12, r22
     8e0:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     8e2:	d0 df       	rcall	.-96     	; 0x884 <micros>
     8e4:	4b 01       	movw	r8, r22
     8e6:	5c 01       	movw	r10, r24

	while (ms > 0) {
     8e8:	c1 14       	cp	r12, r1
     8ea:	d1 04       	cpc	r13, r1
     8ec:	e1 04       	cpc	r14, r1
     8ee:	f1 04       	cpc	r15, r1
     8f0:	f9 f0       	breq	.+62     	; 0x930 <delay+0x62>
		yield();
     8f2:	0e 94 90 0c 	call	0x1920	; 0x1920 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
     8f6:	c6 df       	rcall	.-116    	; 0x884 <micros>
     8f8:	dc 01       	movw	r26, r24
     8fa:	cb 01       	movw	r24, r22
     8fc:	88 19       	sub	r24, r8
     8fe:	99 09       	sbc	r25, r9
     900:	aa 09       	sbc	r26, r10
     902:	bb 09       	sbc	r27, r11
     904:	88 3e       	cpi	r24, 0xE8	; 232
     906:	93 40       	sbci	r25, 0x03	; 3
     908:	a1 05       	cpc	r26, r1
     90a:	b1 05       	cpc	r27, r1
     90c:	68 f3       	brcs	.-38     	; 0x8e8 <delay+0x1a>
			ms--;
     90e:	21 e0       	ldi	r18, 0x01	; 1
     910:	c2 1a       	sub	r12, r18
     912:	d1 08       	sbc	r13, r1
     914:	e1 08       	sbc	r14, r1
     916:	f1 08       	sbc	r15, r1
			start += 1000;
     918:	88 ee       	ldi	r24, 0xE8	; 232
     91a:	88 0e       	add	r8, r24
     91c:	83 e0       	ldi	r24, 0x03	; 3
     91e:	98 1e       	adc	r9, r24
     920:	a1 1c       	adc	r10, r1
     922:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     924:	c1 14       	cp	r12, r1
     926:	d1 04       	cpc	r13, r1
     928:	e1 04       	cpc	r14, r1
     92a:	f1 04       	cpc	r15, r1
     92c:	21 f7       	brne	.-56     	; 0x8f6 <delay+0x28>
     92e:	dc cf       	rjmp	.-72     	; 0x8e8 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
     930:	ff 90       	pop	r15
     932:	ef 90       	pop	r14
     934:	df 90       	pop	r13
     936:	cf 90       	pop	r12
     938:	bf 90       	pop	r11
     93a:	af 90       	pop	r10
     93c:	9f 90       	pop	r9
     93e:	8f 90       	pop	r8
     940:	08 95       	ret

00000942 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     942:	82 30       	cpi	r24, 0x02	; 2
     944:	91 05       	cpc	r25, r1
     946:	38 f0       	brcs	.+14     	; 0x956 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     948:	88 0f       	add	r24, r24
     94a:	99 1f       	adc	r25, r25
     94c:	88 0f       	add	r24, r24
     94e:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     950:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     952:	01 97       	sbiw	r24, 0x01	; 1
     954:	f1 f7       	brne	.-4      	; 0x952 <delayMicroseconds+0x10>
     956:	08 95       	ret

00000958 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     958:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     95a:	84 b5       	in	r24, 0x24	; 36
     95c:	82 60       	ori	r24, 0x02	; 2
     95e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     960:	84 b5       	in	r24, 0x24	; 36
     962:	81 60       	ori	r24, 0x01	; 1
     964:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     966:	85 b5       	in	r24, 0x25	; 37
     968:	82 60       	ori	r24, 0x02	; 2
     96a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     96c:	85 b5       	in	r24, 0x25	; 37
     96e:	81 60       	ori	r24, 0x01	; 1
     970:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     972:	ee e6       	ldi	r30, 0x6E	; 110
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	80 81       	ld	r24, Z
     978:	81 60       	ori	r24, 0x01	; 1
     97a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     97c:	e1 e8       	ldi	r30, 0x81	; 129
     97e:	f0 e0       	ldi	r31, 0x00	; 0
     980:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     982:	80 81       	ld	r24, Z
     984:	82 60       	ori	r24, 0x02	; 2
     986:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     988:	80 81       	ld	r24, Z
     98a:	81 60       	ori	r24, 0x01	; 1
     98c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     98e:	e0 e8       	ldi	r30, 0x80	; 128
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	80 81       	ld	r24, Z
     994:	81 60       	ori	r24, 0x01	; 1
     996:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     998:	e1 eb       	ldi	r30, 0xB1	; 177
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	80 81       	ld	r24, Z
     99e:	84 60       	ori	r24, 0x04	; 4
     9a0:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     9a2:	e0 eb       	ldi	r30, 0xB0	; 176
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	80 81       	ld	r24, Z
     9a8:	81 60       	ori	r24, 0x01	; 1
     9aa:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
     9ac:	e1 e9       	ldi	r30, 0x91	; 145
     9ae:	f0 e0       	ldi	r31, 0x00	; 0
     9b0:	80 81       	ld	r24, Z
     9b2:	82 60       	ori	r24, 0x02	; 2
     9b4:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
     9b6:	80 81       	ld	r24, Z
     9b8:	81 60       	ori	r24, 0x01	; 1
     9ba:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
     9bc:	e0 e9       	ldi	r30, 0x90	; 144
     9be:	f0 e0       	ldi	r31, 0x00	; 0
     9c0:	80 81       	ld	r24, Z
     9c2:	81 60       	ori	r24, 0x01	; 1
     9c4:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
     9c6:	e1 ea       	ldi	r30, 0xA1	; 161
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	80 81       	ld	r24, Z
     9cc:	82 60       	ori	r24, 0x02	; 2
     9ce:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
     9d0:	80 81       	ld	r24, Z
     9d2:	81 60       	ori	r24, 0x01	; 1
     9d4:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
     9d6:	e0 ea       	ldi	r30, 0xA0	; 160
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	80 81       	ld	r24, Z
     9dc:	81 60       	ori	r24, 0x01	; 1
     9de:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
     9e0:	e1 e2       	ldi	r30, 0x21	; 33
     9e2:	f1 e0       	ldi	r31, 0x01	; 1
     9e4:	80 81       	ld	r24, Z
     9e6:	82 60       	ori	r24, 0x02	; 2
     9e8:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
     9ea:	80 81       	ld	r24, Z
     9ec:	81 60       	ori	r24, 0x01	; 1
     9ee:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
     9f0:	e0 e2       	ldi	r30, 0x20	; 32
     9f2:	f1 e0       	ldi	r31, 0x01	; 1
     9f4:	80 81       	ld	r24, Z
     9f6:	81 60       	ori	r24, 0x01	; 1
     9f8:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     9fa:	ea e7       	ldi	r30, 0x7A	; 122
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	80 81       	ld	r24, Z
     a00:	84 60       	ori	r24, 0x04	; 4
     a02:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     a04:	80 81       	ld	r24, Z
     a06:	82 60       	ori	r24, 0x02	; 2
     a08:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     a0a:	80 81       	ld	r24, Z
     a0c:	81 60       	ori	r24, 0x01	; 1
     a0e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     a10:	80 81       	ld	r24, Z
     a12:	80 68       	ori	r24, 0x80	; 128
     a14:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     a16:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
     a1a:	08 95       	ret

00000a1c <analogRead>:
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#endif
	pin = analogPinToChannel(pin);
#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
     a1c:	86 33       	cpi	r24, 0x36	; 54
     a1e:	08 f0       	brcs	.+2      	; 0xa22 <analogRead+0x6>
     a20:	86 53       	subi	r24, 0x36	; 54
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
     a22:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
     a26:	28 2f       	mov	r18, r24
     a28:	28 70       	andi	r18, 0x08	; 8
     a2a:	97 7f       	andi	r25, 0xF7	; 247
     a2c:	92 2b       	or	r25, r18
     a2e:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
     a32:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <analog_reference>
     a36:	90 e4       	ldi	r25, 0x40	; 64
     a38:	29 9f       	mul	r18, r25
     a3a:	90 01       	movw	r18, r0
     a3c:	11 24       	eor	r1, r1
     a3e:	87 70       	andi	r24, 0x07	; 7
     a40:	82 2b       	or	r24, r18
     a42:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
     a46:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
     a4a:	80 64       	ori	r24, 0x40	; 64
     a4c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
     a50:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
     a54:	86 fd       	sbrc	r24, 6
     a56:	fc cf       	rjmp	.-8      	; 0xa50 <analogRead+0x34>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
     a58:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
	high = ADCH;
     a5c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
     a60:	90 e0       	ldi	r25, 0x00	; 0
}
     a62:	92 2b       	or	r25, r18
     a64:	08 95       	ret

00000a66 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	fc 01       	movw	r30, r24
     a6a:	31 97       	sbiw	r30, 0x01	; 1
     a6c:	e2 31       	cpi	r30, 0x12	; 18
     a6e:	f1 05       	cpc	r31, r1
     a70:	08 f0       	brcs	.+2      	; 0xa74 <turnOffPWM+0xe>
     a72:	4d c0       	rjmp	.+154    	; 0xb0e <turnOffPWM+0xa8>
     a74:	88 27       	eor	r24, r24
     a76:	ee 58       	subi	r30, 0x8E	; 142
     a78:	ff 4f       	sbci	r31, 0xFF	; 255
     a7a:	8f 4f       	sbci	r24, 0xFF	; 255
     a7c:	87 c7       	rjmp	.+3854   	; 0x198c <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     a7e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     a82:	8f 77       	andi	r24, 0x7F	; 127
     a84:	03 c0       	rjmp	.+6      	; 0xa8c <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     a86:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     a8a:	8f 7d       	andi	r24, 0xDF	; 223
     a8c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     a90:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
     a92:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
     a96:	87 7f       	andi	r24, 0xF7	; 247
     a98:	f9 cf       	rjmp	.-14     	; 0xa8c <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     a9a:	84 b5       	in	r24, 0x24	; 36
     a9c:	8f 77       	andi	r24, 0x7F	; 127
     a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     aa0:	84 b5       	in	r24, 0x24	; 36
     aa2:	8f 7d       	andi	r24, 0xDF	; 223
     aa4:	84 bd       	out	0x24, r24	; 36
     aa6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     aa8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     aac:	8f 77       	andi	r24, 0x7F	; 127
     aae:	03 c0       	rjmp	.+6      	; 0xab6 <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     ab0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     ab4:	8f 7d       	andi	r24, 0xDF	; 223
     ab6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
     aba:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
     abc:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     ac0:	8f 77       	andi	r24, 0x7F	; 127
     ac2:	07 c0       	rjmp	.+14     	; 0xad2 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
     ac4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     ac8:	8f 7d       	andi	r24, 0xDF	; 223
     aca:	03 c0       	rjmp	.+6      	; 0xad2 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
     acc:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     ad0:	87 7f       	andi	r24, 0xF7	; 247
     ad2:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
     ad6:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
     ad8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     adc:	8f 77       	andi	r24, 0x7F	; 127
     ade:	07 c0       	rjmp	.+14     	; 0xaee <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
     ae0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     ae4:	8f 7d       	andi	r24, 0xDF	; 223
     ae6:	03 c0       	rjmp	.+6      	; 0xaee <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
     ae8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     aec:	87 7f       	andi	r24, 0xF7	; 247
     aee:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
     af2:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
     af4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     af8:	8f 77       	andi	r24, 0x7F	; 127
     afa:	07 c0       	rjmp	.+14     	; 0xb0a <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
     afc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     b00:	8f 7d       	andi	r24, 0xDF	; 223
     b02:	03 c0       	rjmp	.+6      	; 0xb0a <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
     b04:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     b08:	87 7f       	andi	r24, 0xF7	; 247
     b0a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
     b0e:	08 95       	ret

00000b10 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	fc 01       	movw	r30, r24
     b18:	ea 55       	subi	r30, 0x5A	; 90
     b1a:	fe 4f       	sbci	r31, 0xFE	; 254
     b1c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     b1e:	fc 01       	movw	r30, r24
     b20:	e4 51       	subi	r30, 0x14	; 20
     b22:	fe 4f       	sbci	r31, 0xFE	; 254
     b24:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     b26:	88 23       	and	r24, r24
     b28:	61 f1       	breq	.+88     	; 0xb82 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	88 0f       	add	r24, r24
     b2e:	99 1f       	adc	r25, r25
     b30:	fc 01       	movw	r30, r24
     b32:	e4 5b       	subi	r30, 0xB4	; 180
     b34:	fd 4f       	sbci	r31, 0xFD	; 253
     b36:	c5 91       	lpm	r28, Z+
     b38:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     b3a:	fc 01       	movw	r30, r24
     b3c:	ee 5c       	subi	r30, 0xCE	; 206
     b3e:	fd 4f       	sbci	r31, 0xFD	; 253
     b40:	a5 91       	lpm	r26, Z+
     b42:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     b44:	61 11       	cpse	r22, r1
     b46:	09 c0       	rjmp	.+18     	; 0xb5a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     b48:	9f b7       	in	r25, 0x3f	; 63
                cli();
     b4a:	f8 94       	cli
		*reg &= ~bit;
     b4c:	88 81       	ld	r24, Y
     b4e:	20 95       	com	r18
     b50:	82 23       	and	r24, r18
     b52:	88 83       	st	Y, r24
		*out &= ~bit;
     b54:	ec 91       	ld	r30, X
     b56:	2e 23       	and	r18, r30
     b58:	0b c0       	rjmp	.+22     	; 0xb70 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     b5a:	62 30       	cpi	r22, 0x02	; 2
     b5c:	61 f4       	brne	.+24     	; 0xb76 <pinMode+0x66>
		uint8_t oldSREG = SREG;
     b5e:	9f b7       	in	r25, 0x3f	; 63
                cli();
     b60:	f8 94       	cli
		*reg &= ~bit;
     b62:	88 81       	ld	r24, Y
     b64:	32 2f       	mov	r19, r18
     b66:	30 95       	com	r19
     b68:	83 23       	and	r24, r19
     b6a:	88 83       	st	Y, r24
		*out |= bit;
     b6c:	ec 91       	ld	r30, X
     b6e:	2e 2b       	or	r18, r30
     b70:	2c 93       	st	X, r18
		SREG = oldSREG;
     b72:	9f bf       	out	0x3f, r25	; 63
     b74:	06 c0       	rjmp	.+12     	; 0xb82 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     b76:	8f b7       	in	r24, 0x3f	; 63
                cli();
     b78:	f8 94       	cli
		*reg |= bit;
     b7a:	e8 81       	ld	r30, Y
     b7c:	2e 2b       	or	r18, r30
     b7e:	28 83       	st	Y, r18
		SREG = oldSREG;
     b80:	8f bf       	out	0x3f, r24	; 63
	}
}
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	08 95       	ret

00000b88 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     b88:	1f 93       	push	r17
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     b8e:	28 2f       	mov	r18, r24
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	f9 01       	movw	r30, r18
     b94:	e0 5a       	subi	r30, 0xA0	; 160
     b96:	fe 4f       	sbci	r31, 0xFE	; 254
     b98:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     b9a:	f9 01       	movw	r30, r18
     b9c:	ea 55       	subi	r30, 0x5A	; 90
     b9e:	fe 4f       	sbci	r31, 0xFE	; 254
     ba0:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     ba2:	f9 01       	movw	r30, r18
     ba4:	e4 51       	subi	r30, 0x14	; 20
     ba6:	fe 4f       	sbci	r31, 0xFE	; 254
     ba8:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     baa:	cc 23       	and	r28, r28
     bac:	b9 f0       	breq	.+46     	; 0xbdc <digitalWrite+0x54>
     bae:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     bb0:	81 11       	cpse	r24, r1
     bb2:	59 df       	rcall	.-334    	; 0xa66 <turnOffPWM>

	out = portOutputRegister(port);
     bb4:	ec 2f       	mov	r30, r28
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	ee 0f       	add	r30, r30
     bba:	ff 1f       	adc	r31, r31
     bbc:	ee 5c       	subi	r30, 0xCE	; 206
     bbe:	fd 4f       	sbci	r31, 0xFD	; 253
     bc0:	a5 91       	lpm	r26, Z+
     bc2:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     bc4:	9f b7       	in	r25, 0x3f	; 63
	cli();
     bc6:	f8 94       	cli

	if (val == LOW) {
     bc8:	11 11       	cpse	r17, r1
     bca:	04 c0       	rjmp	.+8      	; 0xbd4 <digitalWrite+0x4c>
		*out &= ~bit;
     bcc:	8c 91       	ld	r24, X
     bce:	d0 95       	com	r29
     bd0:	d8 23       	and	r29, r24
     bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <digitalWrite+0x50>
	} else {
		*out |= bit;
     bd4:	ec 91       	ld	r30, X
     bd6:	de 2b       	or	r29, r30
     bd8:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     bda:	9f bf       	out	0x3f, r25	; 63
}
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	1f 91       	pop	r17
     be2:	08 95       	ret

00000be4 <_ZN8SPIClass8transferEh>:
    modifyRegister(MCP_CANCTRL, CANCTRL_CLKEN, CANCTRL_CLKEN);

    /* Turn off CLKOUT for SOF */
    modifyRegister(MCP_CNF3, CNF3_SOF, 0x00);
    return ERROR_OK;
}
     be4:	8e bd       	out	0x2e, r24	; 46
     be6:	00 00       	nop
     be8:	0d b4       	in	r0, 0x2d	; 45
     bea:	07 fe       	sbrs	r0, 7
     bec:	fd cf       	rjmp	.-6      	; 0xbe8 <_ZN8SPIClass8transferEh+0x4>
     bee:	8e b5       	in	r24, 0x2e	; 46
     bf0:	08 95       	ret

00000bf2 <_ZN7MCP25158startSPIEv>:
     bf2:	fc 01       	movw	r30, r24
     bf4:	41 81       	ldd	r20, Z+1	; 0x01
     bf6:	52 81       	ldd	r21, Z+2	; 0x02
     bf8:	63 81       	ldd	r22, Z+3	; 0x03
     bfa:	74 81       	ldd	r23, Z+4	; 0x04
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	92 e1       	ldi	r25, 0x12	; 18
     c00:	aa e7       	ldi	r26, 0x7A	; 122
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	48 17       	cp	r20, r24
     c08:	59 07       	cpc	r21, r25
     c0a:	6a 07       	cpc	r22, r26
     c0c:	7b 07       	cpc	r23, r27
     c0e:	40 f4       	brcc	.+16     	; 0xc20 <_ZN7MCP25158startSPIEv+0x2e>
     c10:	b6 95       	lsr	r27
     c12:	a7 95       	ror	r26
     c14:	97 95       	ror	r25
     c16:	87 95       	ror	r24
     c18:	2f 5f       	subi	r18, 0xFF	; 255
     c1a:	26 30       	cpi	r18, 0x06	; 6
     c1c:	a1 f7       	brne	.-24     	; 0xc06 <_ZN7MCP25158startSPIEv+0x14>
     c1e:	27 e0       	ldi	r18, 0x07	; 7
     c20:	91 e0       	ldi	r25, 0x01	; 1
     c22:	92 27       	eor	r25, r18
     c24:	29 2f       	mov	r18, r25
     c26:	20 6a       	ori	r18, 0xA0	; 160
     c28:	26 95       	lsr	r18
     c2a:	91 70       	andi	r25, 0x01	; 1
     c2c:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <_ZN8SPIClass13interruptModeE>
     c30:	88 23       	and	r24, r24
     c32:	99 f0       	breq	.+38     	; 0xc5a <_ZN7MCP25158startSPIEv+0x68>
     c34:	8f b7       	in	r24, 0x3f	; 63
     c36:	f8 94       	cli
     c38:	30 91 cb 02 	lds	r19, 0x02CB	; 0x8002cb <_ZN8SPIClass13interruptModeE>
     c3c:	31 30       	cpi	r19, 0x01	; 1
     c3e:	59 f4       	brne	.+22     	; 0xc56 <_ZN7MCP25158startSPIEv+0x64>
     c40:	3d b3       	in	r19, 0x1d	; 29
     c42:	30 93 c9 02 	sts	0x02C9, r19	; 0x8002c9 <_ZN8SPIClass13interruptSaveE>
     c46:	4d b3       	in	r20, 0x1d	; 29
     c48:	30 91 ca 02 	lds	r19, 0x02CA	; 0x8002ca <_ZN8SPIClass13interruptMaskE>
     c4c:	30 95       	com	r19
     c4e:	34 23       	and	r19, r20
     c50:	3d bb       	out	0x1d, r19	; 29
     c52:	8f bf       	out	0x3f, r24	; 63
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <_ZN7MCP25158startSPIEv+0x68>
     c56:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <_ZN8SPIClass13interruptSaveE>
     c5a:	2c bd       	out	0x2c, r18	; 44
     c5c:	9d bd       	out	0x2d, r25	; 45
     c5e:	60 e0       	ldi	r22, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	92 cf       	rjmp	.-220    	; 0xb88 <digitalWrite>

00000c64 <_ZN7MCP25156endSPIEv>:
     c64:	61 e0       	ldi	r22, 0x01	; 1
     c66:	fc 01       	movw	r30, r24
     c68:	80 81       	ld	r24, Z
     c6a:	8e df       	rcall	.-228    	; 0xb88 <digitalWrite>
     c6c:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <_ZN8SPIClass13interruptModeE>
     c70:	88 23       	and	r24, r24
     c72:	61 f0       	breq	.+24     	; 0xc8c <_ZN7MCP25156endSPIEv+0x28>
     c74:	9f b7       	in	r25, 0x3f	; 63
     c76:	f8 94       	cli
     c78:	20 91 cb 02 	lds	r18, 0x02CB	; 0x8002cb <_ZN8SPIClass13interruptModeE>
     c7c:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <_ZN8SPIClass13interruptSaveE>
     c80:	21 30       	cpi	r18, 0x01	; 1
     c82:	19 f4       	brne	.+6      	; 0xc8a <_ZN7MCP25156endSPIEv+0x26>
     c84:	8d bb       	out	0x1d, r24	; 29
     c86:	9f bf       	out	0x3f, r25	; 63
     c88:	08 95       	ret
     c8a:	8f bf       	out	0x3f, r24	; 63
     c8c:	08 95       	ret

00000c8e <_ZN7MCP2515C1EhmP8SPIClass>:
     c8e:	8f 92       	push	r8
     c90:	9f 92       	push	r9
     c92:	af 92       	push	r10
     c94:	bf 92       	push	r11
     c96:	ff 92       	push	r15
     c98:	0f 93       	push	r16
     c9a:	1f 93       	push	r17
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	ec 01       	movw	r28, r24
     ca2:	f6 2e       	mov	r15, r22
     ca4:	49 01       	movw	r8, r18
     ca6:	5a 01       	movw	r10, r20
     ca8:	01 15       	cp	r16, r1
     caa:	11 05       	cpc	r17, r1
     cac:	19 f0       	breq	.+6      	; 0xcb4 <_ZN7MCP2515C1EhmP8SPIClass+0x26>
     cae:	1e 83       	std	Y+6, r17	; 0x06
     cb0:	0d 83       	std	Y+5, r16	; 0x05
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <_ZN7MCP2515C1EhmP8SPIClass+0x30>
     cb4:	8d ec       	ldi	r24, 0xCD	; 205
     cb6:	92 e0       	ldi	r25, 0x02	; 2
     cb8:	9e 83       	std	Y+6, r25	; 0x06
     cba:	8d 83       	std	Y+5, r24	; 0x05
     cbc:	ff d5       	rcall	.+3070   	; 0x18bc <_ZN8SPIClass5beginEv>
     cbe:	f8 82       	st	Y, r15
     cc0:	89 82       	std	Y+1, r8	; 0x01
     cc2:	9a 82       	std	Y+2, r9	; 0x02
     cc4:	ab 82       	std	Y+3, r10	; 0x03
     cc6:	bc 82       	std	Y+4, r11	; 0x04
     cc8:	61 e0       	ldi	r22, 0x01	; 1
     cca:	8f 2d       	mov	r24, r15
     ccc:	21 df       	rcall	.-446    	; 0xb10 <pinMode>
     cce:	ce 01       	movw	r24, r28
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	1f 91       	pop	r17
     cd6:	0f 91       	pop	r16
     cd8:	ff 90       	pop	r15
     cda:	bf 90       	pop	r11
     cdc:	af 90       	pop	r10
     cde:	9f 90       	pop	r9
     ce0:	8f 90       	pop	r8
     ce2:	c0 cf       	rjmp	.-128    	; 0xc64 <_ZN7MCP25156endSPIEv>

00000ce4 <_ZN7MCP251512readRegisterENS_8REGISTERE>:
     ce4:	1f 93       	push	r17
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	ec 01       	movw	r28, r24
     cec:	16 2f       	mov	r17, r22
     cee:	81 df       	rcall	.-254    	; 0xbf2 <_ZN7MCP25158startSPIEv>
     cf0:	83 e0       	ldi	r24, 0x03	; 3
     cf2:	78 df       	rcall	.-272    	; 0xbe4 <_ZN8SPIClass8transferEh>
     cf4:	81 2f       	mov	r24, r17
     cf6:	76 df       	rcall	.-276    	; 0xbe4 <_ZN8SPIClass8transferEh>
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	74 df       	rcall	.-280    	; 0xbe4 <_ZN8SPIClass8transferEh>
     cfc:	18 2f       	mov	r17, r24
     cfe:	ce 01       	movw	r24, r28
     d00:	b1 df       	rcall	.-158    	; 0xc64 <_ZN7MCP25156endSPIEv>
     d02:	81 2f       	mov	r24, r17
     d04:	df 91       	pop	r29
     d06:	cf 91       	pop	r28
     d08:	1f 91       	pop	r17
     d0a:	08 95       	ret

00000d0c <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>:
     d0c:	df 92       	push	r13
     d0e:	ef 92       	push	r14
     d10:	ff 92       	push	r15
     d12:	0f 93       	push	r16
     d14:	1f 93       	push	r17
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
     d1a:	8c 01       	movw	r16, r24
     d1c:	c6 2f       	mov	r28, r22
     d1e:	d4 2e       	mov	r13, r20
     d20:	e5 2e       	mov	r14, r21
     d22:	f2 2e       	mov	r15, r18
     d24:	66 df       	rcall	.-308    	; 0xbf2 <_ZN7MCP25158startSPIEv>
     d26:	83 e0       	ldi	r24, 0x03	; 3
     d28:	5d df       	rcall	.-326    	; 0xbe4 <_ZN8SPIClass8transferEh>
     d2a:	8c 2f       	mov	r24, r28
     d2c:	5b df       	rcall	.-330    	; 0xbe4 <_ZN8SPIClass8transferEh>
     d2e:	cd 2d       	mov	r28, r13
     d30:	de 2d       	mov	r29, r14
     d32:	ce 01       	movw	r24, r28
     d34:	8f 0d       	add	r24, r15
     d36:	91 1d       	adc	r25, r1
     d38:	7c 01       	movw	r14, r24
     d3a:	ce 15       	cp	r28, r14
     d3c:	df 05       	cpc	r29, r15
     d3e:	21 f0       	breq	.+8      	; 0xd48 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x3c>
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	50 df       	rcall	.-352    	; 0xbe4 <_ZN8SPIClass8transferEh>
     d44:	89 93       	st	Y+, r24
     d46:	f9 cf       	rjmp	.-14     	; 0xd3a <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x2e>
     d48:	c8 01       	movw	r24, r16
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	1f 91       	pop	r17
     d50:	0f 91       	pop	r16
     d52:	ff 90       	pop	r15
     d54:	ef 90       	pop	r14
     d56:	df 90       	pop	r13
     d58:	85 cf       	rjmp	.-246    	; 0xc64 <_ZN7MCP25156endSPIEv>

00000d5a <_ZN7MCP251511setRegisterENS_8REGISTEREh>:
     d5a:	0f 93       	push	r16
     d5c:	1f 93       	push	r17
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
     d62:	ec 01       	movw	r28, r24
     d64:	06 2f       	mov	r16, r22
     d66:	14 2f       	mov	r17, r20
     d68:	44 df       	rcall	.-376    	; 0xbf2 <_ZN7MCP25158startSPIEv>
     d6a:	82 e0       	ldi	r24, 0x02	; 2
     d6c:	3b df       	rcall	.-394    	; 0xbe4 <_ZN8SPIClass8transferEh>
     d6e:	80 2f       	mov	r24, r16
     d70:	39 df       	rcall	.-398    	; 0xbe4 <_ZN8SPIClass8transferEh>
     d72:	81 2f       	mov	r24, r17
     d74:	37 df       	rcall	.-402    	; 0xbe4 <_ZN8SPIClass8transferEh>
     d76:	ce 01       	movw	r24, r28
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	1f 91       	pop	r17
     d7e:	0f 91       	pop	r16
     d80:	71 cf       	rjmp	.-286    	; 0xc64 <_ZN7MCP25156endSPIEv>

00000d82 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>:
     d82:	df 92       	push	r13
     d84:	ef 92       	push	r14
     d86:	ff 92       	push	r15
     d88:	0f 93       	push	r16
     d8a:	1f 93       	push	r17
     d8c:	cf 93       	push	r28
     d8e:	df 93       	push	r29
     d90:	8c 01       	movw	r16, r24
     d92:	c6 2f       	mov	r28, r22
     d94:	d4 2e       	mov	r13, r20
     d96:	e5 2e       	mov	r14, r21
     d98:	f2 2e       	mov	r15, r18
     d9a:	2b df       	rcall	.-426    	; 0xbf2 <_ZN7MCP25158startSPIEv>
     d9c:	82 e0       	ldi	r24, 0x02	; 2
     d9e:	22 df       	rcall	.-444    	; 0xbe4 <_ZN8SPIClass8transferEh>
     da0:	8c 2f       	mov	r24, r28
     da2:	20 df       	rcall	.-448    	; 0xbe4 <_ZN8SPIClass8transferEh>
     da4:	cd 2d       	mov	r28, r13
     da6:	de 2d       	mov	r29, r14
     da8:	ce 01       	movw	r24, r28
     daa:	8f 0d       	add	r24, r15
     dac:	91 1d       	adc	r25, r1
     dae:	7c 01       	movw	r14, r24
     db0:	ce 15       	cp	r28, r14
     db2:	df 05       	cpc	r29, r15
     db4:	19 f0       	breq	.+6      	; 0xdbc <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x3a>
     db6:	89 91       	ld	r24, Y+
     db8:	15 df       	rcall	.-470    	; 0xbe4 <_ZN8SPIClass8transferEh>
     dba:	fa cf       	rjmp	.-12     	; 0xdb0 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x2e>
     dbc:	c8 01       	movw	r24, r16
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	ff 90       	pop	r15
     dc8:	ef 90       	pop	r14
     dca:	df 90       	pop	r13
     dcc:	4b cf       	rjmp	.-362    	; 0xc64 <_ZN7MCP25156endSPIEv>

00000dce <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>:
     dce:	ff 92       	push	r15
     dd0:	0f 93       	push	r16
     dd2:	1f 93       	push	r17
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	ec 01       	movw	r28, r24
     dda:	f6 2e       	mov	r15, r22
     ddc:	04 2f       	mov	r16, r20
     dde:	12 2f       	mov	r17, r18
     de0:	08 df       	rcall	.-496    	; 0xbf2 <_ZN7MCP25158startSPIEv>
     de2:	85 e0       	ldi	r24, 0x05	; 5
     de4:	ff de       	rcall	.-514    	; 0xbe4 <_ZN8SPIClass8transferEh>
     de6:	8f 2d       	mov	r24, r15
     de8:	fd de       	rcall	.-518    	; 0xbe4 <_ZN8SPIClass8transferEh>
     dea:	80 2f       	mov	r24, r16
     dec:	fb de       	rcall	.-522    	; 0xbe4 <_ZN8SPIClass8transferEh>
     dee:	81 2f       	mov	r24, r17
     df0:	f9 de       	rcall	.-526    	; 0xbe4 <_ZN8SPIClass8transferEh>
     df2:	ce 01       	movw	r24, r28
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	1f 91       	pop	r17
     dfa:	0f 91       	pop	r16
     dfc:	ff 90       	pop	r15
     dfe:	32 cf       	rjmp	.-412    	; 0xc64 <_ZN7MCP25156endSPIEv>

00000e00 <_ZN7MCP25159getStatusEv>:
     e00:	1f 93       	push	r17
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	ec 01       	movw	r28, r24
     e08:	f4 de       	rcall	.-536    	; 0xbf2 <_ZN7MCP25158startSPIEv>
     e0a:	80 ea       	ldi	r24, 0xA0	; 160
     e0c:	eb de       	rcall	.-554    	; 0xbe4 <_ZN8SPIClass8transferEh>
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	e9 de       	rcall	.-558    	; 0xbe4 <_ZN8SPIClass8transferEh>
     e12:	18 2f       	mov	r17, r24
     e14:	ce 01       	movw	r24, r28
     e16:	26 df       	rcall	.-436    	; 0xc64 <_ZN7MCP25156endSPIEv>
     e18:	81 2f       	mov	r24, r17
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	1f 91       	pop	r17
     e20:	08 95       	ret

00000e22 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>:
     e22:	cf 92       	push	r12
     e24:	df 92       	push	r13
     e26:	ef 92       	push	r14
     e28:	ff 92       	push	r15
     e2a:	1f 93       	push	r17
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	ec 01       	movw	r28, r24
     e32:	16 2f       	mov	r17, r22
     e34:	26 2f       	mov	r18, r22
     e36:	40 ee       	ldi	r20, 0xE0	; 224
     e38:	6f e0       	ldi	r22, 0x0F	; 15
     e3a:	c9 df       	rcall	.-110    	; 0xdce <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
     e3c:	17 dd       	rcall	.-1490   	; 0x86c <millis>
     e3e:	6b 01       	movw	r12, r22
     e40:	7c 01       	movw	r14, r24
     e42:	2a e0       	ldi	r18, 0x0A	; 10
     e44:	c2 0e       	add	r12, r18
     e46:	d1 1c       	adc	r13, r1
     e48:	e1 1c       	adc	r14, r1
     e4a:	f1 1c       	adc	r15, r1
     e4c:	0f dd       	rcall	.-1506   	; 0x86c <millis>
     e4e:	6c 15       	cp	r22, r12
     e50:	7d 05       	cpc	r23, r13
     e52:	8e 05       	cpc	r24, r14
     e54:	9f 05       	cpc	r25, r15
     e56:	40 f4       	brcc	.+16     	; 0xe68 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x46>
     e58:	6e e0       	ldi	r22, 0x0E	; 14
     e5a:	ce 01       	movw	r24, r28
     e5c:	43 df       	rcall	.-378    	; 0xce4 <_ZN7MCP251512readRegisterENS_8REGISTERE>
     e5e:	80 7e       	andi	r24, 0xE0	; 224
     e60:	18 13       	cpse	r17, r24
     e62:	f4 cf       	rjmp	.-24     	; 0xe4c <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x2a>
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	01 c0       	rjmp	.+2      	; 0xe6a <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x48>
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	91 e0       	ldi	r25, 0x01	; 1
     e6c:	89 27       	eor	r24, r25
     e6e:	df 91       	pop	r29
     e70:	cf 91       	pop	r28
     e72:	1f 91       	pop	r17
     e74:	ff 90       	pop	r15
     e76:	ef 90       	pop	r14
     e78:	df 90       	pop	r13
     e7a:	cf 90       	pop	r12
     e7c:	08 95       	ret

00000e7e <_ZN7MCP251513setConfigModeEv>:
     e7e:	60 e8       	ldi	r22, 0x80	; 128
     e80:	d0 cf       	rjmp	.-96     	; 0xe22 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>

00000e82 <_ZN7MCP251513setNormalModeEv>:
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	ce cf       	rjmp	.-100    	; 0xe22 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>

00000e86 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>:
     e86:	0f 93       	push	r16
     e88:	1f 93       	push	r17
     e8a:	cf 93       	push	r28
     e8c:	df 93       	push	r29
     e8e:	8c 01       	movw	r16, r24
     e90:	c6 2f       	mov	r28, r22
     e92:	d4 2f       	mov	r29, r20
     e94:	f4 df       	rcall	.-24     	; 0xe7e <_ZN7MCP251513setConfigModeEv>
     e96:	81 11       	cpse	r24, r1
     e98:	ba c0       	rjmp	.+372    	; 0x100e <__EEPROM_REGION_LENGTH__+0xe>
     e9a:	d1 30       	cpi	r29, 0x01	; 1
     e9c:	b1 f1       	breq	.+108    	; 0xf0a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x84>
     e9e:	08 f4       	brcc	.+2      	; 0xea2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x1c>
     ea0:	69 c0       	rjmp	.+210    	; 0xf74 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0xee>
     ea2:	d2 30       	cpi	r29, 0x02	; 2
     ea4:	09 f0       	breq	.+2      	; 0xea8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x22>
     ea6:	96 c0       	rjmp	.+300    	; 0xfd4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14e>
     ea8:	8c 2f       	mov	r24, r28
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	80 31       	cpi	r24, 0x10	; 16
     eae:	91 05       	cpc	r25, r1
     eb0:	08 f0       	brcs	.+2      	; 0xeb4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x2e>
     eb2:	90 c0       	rjmp	.+288    	; 0xfd4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14e>
     eb4:	fc 01       	movw	r30, r24
     eb6:	88 27       	eor	r24, r24
     eb8:	ec 57       	subi	r30, 0x7C	; 124
     eba:	ff 4f       	sbci	r31, 0xFF	; 255
     ebc:	8f 4f       	sbci	r24, 0xFF	; 255
     ebe:	66 c5       	rjmp	.+2764   	; 0x198c <__tablejump2__>
     ec0:	c7 e8       	ldi	r28, 0x87	; 135
     ec2:	df eb       	ldi	r29, 0xBF	; 191
     ec4:	33 c0       	rjmp	.+102    	; 0xf2c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0xa6>
     ec6:	c4 e8       	ldi	r28, 0x84	; 132
     ec8:	d4 ea       	ldi	r29, 0xA4	; 164
     eca:	8c c0       	rjmp	.+280    	; 0xfe4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15e>
     ecc:	c5 e8       	ldi	r28, 0x85	; 133
     ece:	d2 ee       	ldi	r29, 0xE2	; 226
     ed0:	47 e4       	ldi	r20, 0x47	; 71
     ed2:	91 c0       	rjmp	.+290    	; 0xff6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     ed4:	c7 e8       	ldi	r28, 0x87	; 135
     ed6:	df eb       	ldi	r29, 0xBF	; 191
     ed8:	6c c0       	rjmp	.+216    	; 0xfb2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x12c>
     eda:	c6 e8       	ldi	r28, 0x86	; 134
     edc:	d4 eb       	ldi	r29, 0xB4	; 180
     ede:	69 c0       	rjmp	.+210    	; 0xfb2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x12c>
     ee0:	c7 e8       	ldi	r28, 0x87	; 135
     ee2:	df eb       	ldi	r29, 0xBF	; 191
     ee4:	6a c0       	rjmp	.+212    	; 0xfba <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x134>
     ee6:	c6 e8       	ldi	r28, 0x86	; 134
     ee8:	d4 eb       	ldi	r29, 0xB4	; 180
     eea:	67 c0       	rjmp	.+206    	; 0xfba <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x134>
     eec:	c5 e8       	ldi	r28, 0x85	; 133
     eee:	d1 eb       	ldi	r29, 0xB1	; 177
     ef0:	64 c0       	rjmp	.+200    	; 0xfba <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x134>
     ef2:	c6 e8       	ldi	r28, 0x86	; 134
     ef4:	d4 eb       	ldi	r29, 0xB4	; 180
     ef6:	69 c0       	rjmp	.+210    	; 0xfca <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x144>
     ef8:	c5 e8       	ldi	r28, 0x85	; 133
     efa:	d1 eb       	ldi	r29, 0xB1	; 177
     efc:	66 c0       	rjmp	.+204    	; 0xfca <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x144>
     efe:	c2 e8       	ldi	r28, 0x82	; 130
     f00:	d0 e9       	ldi	r29, 0x90	; 144
     f02:	63 c0       	rjmp	.+198    	; 0xfca <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x144>
     f04:	c0 e8       	ldi	r28, 0x80	; 128
     f06:	d0 e8       	ldi	r29, 0x80	; 128
     f08:	60 c0       	rjmp	.+192    	; 0xfca <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x144>
     f0a:	8c 2f       	mov	r24, r28
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	80 31       	cpi	r24, 0x10	; 16
     f10:	91 05       	cpc	r25, r1
     f12:	08 f0       	brcs	.+2      	; 0xf16 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x90>
     f14:	5f c0       	rjmp	.+190    	; 0xfd4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14e>
     f16:	fc 01       	movw	r30, r24
     f18:	88 27       	eor	r24, r24
     f1a:	ec 56       	subi	r30, 0x6C	; 108
     f1c:	ff 4f       	sbci	r31, 0xFF	; 255
     f1e:	8f 4f       	sbci	r24, 0xFF	; 255
     f20:	35 c5       	rjmp	.+2666   	; 0x198c <__tablejump2__>
     f22:	c7 e8       	ldi	r28, 0x87	; 135
     f24:	df ef       	ldi	r29, 0xFF	; 255
     f26:	5a c0       	rjmp	.+180    	; 0xfdc <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x156>
     f28:	c7 e8       	ldi	r28, 0x87	; 135
     f2a:	df ef       	ldi	r29, 0xFF	; 255
     f2c:	4f e0       	ldi	r20, 0x0F	; 15
     f2e:	63 c0       	rjmp	.+198    	; 0xff6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     f30:	c5 e8       	ldi	r28, 0x85	; 133
     f32:	d1 ef       	ldi	r29, 0xF1	; 241
     f34:	4e e4       	ldi	r20, 0x4E	; 78
     f36:	5f c0       	rjmp	.+190    	; 0xff6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     f38:	c7 e8       	ldi	r28, 0x87	; 135
     f3a:	df ef       	ldi	r29, 0xFF	; 255
     f3c:	53 c0       	rjmp	.+166    	; 0xfe4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15e>
     f3e:	c7 e8       	ldi	r28, 0x87	; 135
     f40:	da ef       	ldi	r29, 0xFA	; 250
     f42:	50 c0       	rjmp	.+160    	; 0xfe4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15e>
     f44:	c7 e8       	ldi	r28, 0x87	; 135
     f46:	df ef       	ldi	r29, 0xFF	; 255
     f48:	34 c0       	rjmp	.+104    	; 0xfb2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x12c>
     f4a:	c7 e0       	ldi	r28, 0x07	; 7
     f4c:	de eb       	ldi	r29, 0xBE	; 190
     f4e:	31 c0       	rjmp	.+98     	; 0xfb2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x12c>
     f50:	c7 e0       	ldi	r28, 0x07	; 7
     f52:	dd ea       	ldi	r29, 0xAD	; 173
     f54:	2e c0       	rjmp	.+92     	; 0xfb2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x12c>
     f56:	c6 e8       	ldi	r28, 0x86	; 134
     f58:	d0 ef       	ldi	r29, 0xF0	; 240
     f5a:	2b c0       	rjmp	.+86     	; 0xfb2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x12c>
     f5c:	c7 e8       	ldi	r28, 0x87	; 135
     f5e:	da ef       	ldi	r29, 0xFA	; 250
     f60:	2c c0       	rjmp	.+88     	; 0xfba <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x134>
     f62:	c5 e8       	ldi	r28, 0x85	; 133
     f64:	d1 ef       	ldi	r29, 0xF1	; 241
     f66:	2d c0       	rjmp	.+90     	; 0xfc2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x13c>
     f68:	c6 e8       	ldi	r28, 0x86	; 134
     f6a:	d0 ef       	ldi	r29, 0xF0	; 240
     f6c:	2e c0       	rjmp	.+92     	; 0xfca <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x144>
     f6e:	c2 e8       	ldi	r28, 0x82	; 130
     f70:	d0 ed       	ldi	r29, 0xD0	; 208
     f72:	2b c0       	rjmp	.+86     	; 0xfca <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x144>
     f74:	8c 2f       	mov	r24, r28
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	fc 01       	movw	r30, r24
     f7a:	34 97       	sbiw	r30, 0x04	; 4
     f7c:	ec 30       	cpi	r30, 0x0C	; 12
     f7e:	f1 05       	cpc	r31, r1
     f80:	48 f5       	brcc	.+82     	; 0xfd4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14e>
     f82:	88 27       	eor	r24, r24
     f84:	ec 55       	subi	r30, 0x5C	; 92
     f86:	ff 4f       	sbci	r31, 0xFF	; 255
     f88:	8f 4f       	sbci	r24, 0xFF	; 255
     f8a:	00 c5       	rjmp	.+2560   	; 0x198c <__tablejump2__>
     f8c:	c7 e8       	ldi	r28, 0x87	; 135
     f8e:	df ef       	ldi	r29, 0xFF	; 255
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x110>
     f92:	c7 e8       	ldi	r28, 0x87	; 135
     f94:	da ef       	ldi	r29, 0xFA	; 250
     f96:	49 e0       	ldi	r20, 0x09	; 9
     f98:	2e c0       	rjmp	.+92     	; 0xff6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     f9a:	c7 e8       	ldi	r28, 0x87	; 135
     f9c:	df ef       	ldi	r29, 0xFF	; 255
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x11e>
     fa0:	c7 e8       	ldi	r28, 0x87	; 135
     fa2:	de ef       	ldi	r29, 0xFE	; 254
     fa4:	44 e0       	ldi	r20, 0x04	; 4
     fa6:	27 c0       	rjmp	.+78     	; 0xff6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     fa8:	c7 e8       	ldi	r28, 0x87	; 135
     faa:	da ef       	ldi	r29, 0xFA	; 250
     fac:	fb cf       	rjmp	.-10     	; 0xfa4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x11e>
     fae:	c7 e8       	ldi	r28, 0x87	; 135
     fb0:	da ef       	ldi	r29, 0xFA	; 250
     fb2:	43 e0       	ldi	r20, 0x03	; 3
     fb4:	20 c0       	rjmp	.+64     	; 0xff6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     fb6:	c7 e8       	ldi	r28, 0x87	; 135
     fb8:	df ef       	ldi	r29, 0xFF	; 255
     fba:	41 e0       	ldi	r20, 0x01	; 1
     fbc:	1c c0       	rjmp	.+56     	; 0xff6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     fbe:	c6 e8       	ldi	r28, 0x86	; 134
     fc0:	db ef       	ldi	r29, 0xFB	; 251
     fc2:	41 e4       	ldi	r20, 0x41	; 65
     fc4:	18 c0       	rjmp	.+48     	; 0xff6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     fc6:	c7 e8       	ldi	r28, 0x87	; 135
     fc8:	da ef       	ldi	r29, 0xFA	; 250
     fca:	40 e0       	ldi	r20, 0x00	; 0
     fcc:	14 c0       	rjmp	.+40     	; 0xff6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     fce:	c2 e8       	ldi	r28, 0x82	; 130
     fd0:	d9 ed       	ldi	r29, 0xD9	; 217
     fd2:	fb cf       	rjmp	.-10     	; 0xfca <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x144>
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	1b c0       	rjmp	.+54     	; 0x100e <__EEPROM_REGION_LENGTH__+0xe>
     fd8:	c7 e8       	ldi	r28, 0x87	; 135
     fda:	df eb       	ldi	r29, 0xBF	; 191
     fdc:	4f e1       	ldi	r20, 0x1F	; 31
     fde:	0b c0       	rjmp	.+22     	; 0xff6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     fe0:	c7 e8       	ldi	r28, 0x87	; 135
     fe2:	df eb       	ldi	r29, 0xBF	; 191
     fe4:	47 e0       	ldi	r20, 0x07	; 7
     fe6:	07 c0       	rjmp	.+14     	; 0xff6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     fe8:	c7 e8       	ldi	r28, 0x87	; 135
     fea:	df ef       	ldi	r29, 0xFF	; 255
     fec:	4f e3       	ldi	r20, 0x3F	; 63
     fee:	03 c0       	rjmp	.+6      	; 0xff6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
     ff0:	c7 e8       	ldi	r28, 0x87	; 135
     ff2:	df ef       	ldi	r29, 0xFF	; 255
     ff4:	4b e0       	ldi	r20, 0x0B	; 11
     ff6:	6a e2       	ldi	r22, 0x2A	; 42
     ff8:	c8 01       	movw	r24, r16
     ffa:	af de       	rcall	.-674    	; 0xd5a <_ZN7MCP251511setRegisterENS_8REGISTEREh>
     ffc:	4d 2f       	mov	r20, r29
     ffe:	69 e2       	ldi	r22, 0x29	; 41
    1000:	c8 01       	movw	r24, r16
    1002:	ab de       	rcall	.-682    	; 0xd5a <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    1004:	4c 2f       	mov	r20, r28
    1006:	68 e2       	ldi	r22, 0x28	; 40
    1008:	c8 01       	movw	r24, r16
    100a:	a7 de       	rcall	.-690    	; 0xd5a <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	df 91       	pop	r29
    1010:	cf 91       	pop	r28
    1012:	1f 91       	pop	r17
    1014:	0f 91       	pop	r16
    1016:	08 95       	ret

00001018 <_ZN7MCP251510setBitrateE9CAN_SPEED>:
    1018:	41 e0       	ldi	r20, 0x01	; 1
    101a:	35 cf       	rjmp	.-406    	; 0xe86 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>

0000101c <_ZN7MCP25159prepareIdEPhbm>:

void MCP2515::prepareId(uint8_t *buffer, const bool ext, const uint32_t id)
{
    101c:	0f 93       	push	r16
    101e:	1f 93       	push	r17
    1020:	fb 01       	movw	r30, r22
    uint16_t canid = (uint16_t)(id & 0x0FFFF);

    if (ext) {
    1022:	44 23       	and	r20, r20
    1024:	b1 f0       	breq	.+44     	; 0x1052 <_ZN7MCP25159prepareIdEPhbm+0x36>
        buffer[MCP_EID0] = (uint8_t) (canid & 0xFF);
    1026:	03 83       	std	Z+3, r16	; 0x03
        buffer[MCP_EID8] = (uint8_t) (canid >> 8);
    1028:	12 83       	std	Z+2, r17	; 0x02
        canid = (uint16_t)(id >> 16);
    102a:	89 01       	movw	r16, r18
    102c:	22 27       	eor	r18, r18
    102e:	33 27       	eor	r19, r19
        buffer[MCP_SIDL] = (uint8_t) (canid & 0x03);
        buffer[MCP_SIDL] += (uint8_t) ((canid & 0x1C) << 3);
        buffer[MCP_SIDL] |= TXB_EXIDE_MASK;
    1030:	90 2f       	mov	r25, r16
    1032:	9c 71       	andi	r25, 0x1C	; 28
    1034:	80 2f       	mov	r24, r16
    1036:	83 70       	andi	r24, 0x03	; 3
    1038:	48 e0       	ldi	r20, 0x08	; 8
    103a:	94 9f       	mul	r25, r20
    103c:	80 0d       	add	r24, r0
    103e:	11 24       	eor	r1, r1
    1040:	88 60       	ori	r24, 0x08	; 8
    1042:	81 83       	std	Z+1, r24	; 0x01
        buffer[MCP_SIDH] = (uint8_t) (canid >> 5);
    1044:	55 e0       	ldi	r21, 0x05	; 5
    1046:	16 95       	lsr	r17
    1048:	07 95       	ror	r16
    104a:	5a 95       	dec	r21
    104c:	e1 f7       	brne	.-8      	; 0x1046 <_ZN7MCP25159prepareIdEPhbm+0x2a>
    104e:	00 83       	st	Z, r16
    1050:	0d c0       	rjmp	.+26     	; 0x106c <_ZN7MCP25159prepareIdEPhbm+0x50>
    } else {
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
    1052:	c8 01       	movw	r24, r16
    1054:	23 e0       	ldi	r18, 0x03	; 3
    1056:	96 95       	lsr	r25
    1058:	87 95       	ror	r24
    105a:	2a 95       	dec	r18
    105c:	e1 f7       	brne	.-8      	; 0x1056 <_ZN7MCP25159prepareIdEPhbm+0x3a>
    105e:	80 83       	st	Z, r24
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
    1060:	02 95       	swap	r16
    1062:	00 0f       	add	r16, r16
    1064:	00 7e       	andi	r16, 0xE0	; 224
    1066:	01 83       	std	Z+1, r16	; 0x01
        buffer[MCP_EID0] = 0;
    1068:	13 82       	std	Z+3, r1	; 0x03
        buffer[MCP_EID8] = 0;
    106a:	12 82       	std	Z+2, r1	; 0x02
    }
}
    106c:	1f 91       	pop	r17
    106e:	0f 91       	pop	r16
    1070:	08 95       	ret

00001072 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>:

MCP2515::ERROR MCP2515::setFilterMask(const MASK mask, const bool ext, const uint32_t ulData)
{
    1072:	8f 92       	push	r8
    1074:	9f 92       	push	r9
    1076:	af 92       	push	r10
    1078:	bf 92       	push	r11
    107a:	cf 92       	push	r12
    107c:	df 92       	push	r13
    107e:	ef 92       	push	r14
    1080:	ff 92       	push	r15
    1082:	0f 93       	push	r16
    1084:	1f 93       	push	r17
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
    108a:	00 d0       	rcall	.+0      	; 0x108c <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x1a>
    108c:	1f 92       	push	r1
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	7c 01       	movw	r14, r24
    1094:	d6 2e       	mov	r13, r22
    1096:	c4 2e       	mov	r12, r20
    1098:	48 01       	movw	r8, r16
    109a:	59 01       	movw	r10, r18
    ERROR res = setConfigMode();
    109c:	f0 de       	rcall	.-544    	; 0xe7e <_ZN7MCP251513setConfigModeEv>
    if (res != ERROR_OK) {
    109e:	81 11       	cpse	r24, r1
    10a0:	19 c0       	rjmp	.+50     	; 0x10d4 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x62>
        return res;
    }
    
    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
    10a2:	95 01       	movw	r18, r10
    10a4:	84 01       	movw	r16, r8
    10a6:	4c 2d       	mov	r20, r12
    10a8:	be 01       	movw	r22, r28
    10aa:	6f 5f       	subi	r22, 0xFF	; 255
    10ac:	7f 4f       	sbci	r23, 0xFF	; 255
    10ae:	c7 01       	movw	r24, r14
    10b0:	b5 df       	rcall	.-150    	; 0x101c <_ZN7MCP25159prepareIdEPhbm>

    REGISTER reg;
    switch (mask) {
    10b2:	dd 20       	and	r13, r13
    10b4:	29 f0       	breq	.+10     	; 0x10c0 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x4e>
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	d8 12       	cpse	r13, r24
    10ba:	0b c0       	rjmp	.+22     	; 0x10d2 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
        case MASK0: reg = MCP_RXM0SIDH; break;
        case MASK1: reg = MCP_RXM1SIDH; break;
    10bc:	64 e2       	ldi	r22, 0x24	; 36
    10be:	01 c0       	rjmp	.+2      	; 0x10c2 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);

    REGISTER reg;
    switch (mask) {
        case MASK0: reg = MCP_RXM0SIDH; break;
    10c0:	60 e2       	ldi	r22, 0x20	; 32
        case MASK1: reg = MCP_RXM1SIDH; break;
        default:
            return ERROR_FAIL;
    }

    setRegisters(reg, tbufdata, 4);
    10c2:	24 e0       	ldi	r18, 0x04	; 4
    10c4:	ae 01       	movw	r20, r28
    10c6:	4f 5f       	subi	r20, 0xFF	; 255
    10c8:	5f 4f       	sbci	r21, 0xFF	; 255
    10ca:	c7 01       	movw	r24, r14
    10cc:	5a de       	rcall	.-844    	; 0xd82 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    
    return ERROR_OK;
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	01 c0       	rjmp	.+2      	; 0x10d4 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x62>
    REGISTER reg;
    switch (mask) {
        case MASK0: reg = MCP_RXM0SIDH; break;
        case MASK1: reg = MCP_RXM1SIDH; break;
        default:
            return ERROR_FAIL;
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    }

    setRegisters(reg, tbufdata, 4);
    
    return ERROR_OK;
}
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	1f 91       	pop	r17
    10e2:	0f 91       	pop	r16
    10e4:	ff 90       	pop	r15
    10e6:	ef 90       	pop	r14
    10e8:	df 90       	pop	r13
    10ea:	cf 90       	pop	r12
    10ec:	bf 90       	pop	r11
    10ee:	af 90       	pop	r10
    10f0:	9f 90       	pop	r9
    10f2:	8f 90       	pop	r8
    10f4:	08 95       	ret

000010f6 <_ZN7MCP25159setFilterENS_3RXFEbm>:

MCP2515::ERROR MCP2515::setFilter(const RXF num, const bool ext, const uint32_t ulData)
{
    10f6:	8f 92       	push	r8
    10f8:	9f 92       	push	r9
    10fa:	af 92       	push	r10
    10fc:	bf 92       	push	r11
    10fe:	cf 92       	push	r12
    1100:	df 92       	push	r13
    1102:	ef 92       	push	r14
    1104:	ff 92       	push	r15
    1106:	0f 93       	push	r16
    1108:	1f 93       	push	r17
    110a:	cf 93       	push	r28
    110c:	df 93       	push	r29
    110e:	00 d0       	rcall	.+0      	; 0x1110 <_ZN7MCP25159setFilterENS_3RXFEbm+0x1a>
    1110:	1f 92       	push	r1
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	6c 01       	movw	r12, r24
    1118:	f6 2e       	mov	r15, r22
    111a:	e4 2e       	mov	r14, r20
    111c:	48 01       	movw	r8, r16
    111e:	59 01       	movw	r10, r18
    ERROR res = setConfigMode();
    1120:	ae de       	rcall	.-676    	; 0xe7e <_ZN7MCP251513setConfigModeEv>
    if (res != ERROR_OK) {
    1122:	81 11       	cpse	r24, r1
    1124:	34 c0       	rjmp	.+104    	; 0x118e <_ZN7MCP25159setFilterENS_3RXFEbm+0x98>
        return res;
    }

    REGISTER reg;

    switch (num) {
    1126:	82 e0       	ldi	r24, 0x02	; 2
    1128:	f8 16       	cp	r15, r24
    112a:	a9 f0       	breq	.+42     	; 0x1156 <_ZN7MCP25159setFilterENS_3RXFEbm+0x60>
    112c:	8f 15       	cp	r24, r15
    112e:	40 f0       	brcs	.+16     	; 0x1140 <_ZN7MCP25159setFilterENS_3RXFEbm+0x4a>
    1130:	ff 20       	and	r15, r15
    1132:	d1 f0       	breq	.+52     	; 0x1168 <_ZN7MCP25159setFilterENS_3RXFEbm+0x72>
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	f8 12       	cpse	r15, r24
    1138:	29 c0       	rjmp	.+82     	; 0x118c <_ZN7MCP25159setFilterENS_3RXFEbm+0x96>
        case RXF0: reg = MCP_RXF0SIDH; break;
        case RXF1: reg = MCP_RXF1SIDH; break;
    113a:	44 e0       	ldi	r20, 0x04	; 4
    113c:	f4 2e       	mov	r15, r20
    113e:	15 c0       	rjmp	.+42     	; 0x116a <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        return res;
    }

    REGISTER reg;

    switch (num) {
    1140:	84 e0       	ldi	r24, 0x04	; 4
    1142:	f8 16       	cp	r15, r24
    1144:	71 f0       	breq	.+28     	; 0x1162 <_ZN7MCP25159setFilterENS_3RXFEbm+0x6c>
    1146:	f8 16       	cp	r15, r24
    1148:	48 f0       	brcs	.+18     	; 0x115c <_ZN7MCP25159setFilterENS_3RXFEbm+0x66>
    114a:	85 e0       	ldi	r24, 0x05	; 5
    114c:	f8 12       	cpse	r15, r24
    114e:	1e c0       	rjmp	.+60     	; 0x118c <_ZN7MCP25159setFilterENS_3RXFEbm+0x96>
        case RXF0: reg = MCP_RXF0SIDH; break;
        case RXF1: reg = MCP_RXF1SIDH; break;
        case RXF2: reg = MCP_RXF2SIDH; break;
        case RXF3: reg = MCP_RXF3SIDH; break;
        case RXF4: reg = MCP_RXF4SIDH; break;
        case RXF5: reg = MCP_RXF5SIDH; break;
    1150:	88 e1       	ldi	r24, 0x18	; 24
    1152:	f8 2e       	mov	r15, r24
    1154:	0a c0       	rjmp	.+20     	; 0x116a <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
    REGISTER reg;

    switch (num) {
        case RXF0: reg = MCP_RXF0SIDH; break;
        case RXF1: reg = MCP_RXF1SIDH; break;
        case RXF2: reg = MCP_RXF2SIDH; break;
    1156:	38 e0       	ldi	r19, 0x08	; 8
    1158:	f3 2e       	mov	r15, r19
    115a:	07 c0       	rjmp	.+14     	; 0x116a <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF3: reg = MCP_RXF3SIDH; break;
    115c:	20 e1       	ldi	r18, 0x10	; 16
    115e:	f2 2e       	mov	r15, r18
    1160:	04 c0       	rjmp	.+8      	; 0x116a <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF4: reg = MCP_RXF4SIDH; break;
    1162:	94 e1       	ldi	r25, 0x14	; 20
    1164:	f9 2e       	mov	r15, r25
    1166:	01 c0       	rjmp	.+2      	; 0x116a <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
    }

    REGISTER reg;

    switch (num) {
        case RXF0: reg = MCP_RXF0SIDH; break;
    1168:	f1 2c       	mov	r15, r1
        default:
            return ERROR_FAIL;
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
    116a:	95 01       	movw	r18, r10
    116c:	84 01       	movw	r16, r8
    116e:	4e 2d       	mov	r20, r14
    1170:	be 01       	movw	r22, r28
    1172:	6f 5f       	subi	r22, 0xFF	; 255
    1174:	7f 4f       	sbci	r23, 0xFF	; 255
    1176:	c6 01       	movw	r24, r12
    1178:	51 df       	rcall	.-350    	; 0x101c <_ZN7MCP25159prepareIdEPhbm>
    setRegisters(reg, tbufdata, 4);
    117a:	24 e0       	ldi	r18, 0x04	; 4
    117c:	ae 01       	movw	r20, r28
    117e:	4f 5f       	subi	r20, 0xFF	; 255
    1180:	5f 4f       	sbci	r21, 0xFF	; 255
    1182:	6f 2d       	mov	r22, r15
    1184:	c6 01       	movw	r24, r12
    1186:	fd dd       	rcall	.-1030   	; 0xd82 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	01 c0       	rjmp	.+2      	; 0x118e <_ZN7MCP25159setFilterENS_3RXFEbm+0x98>
        case RXF2: reg = MCP_RXF2SIDH; break;
        case RXF3: reg = MCP_RXF3SIDH; break;
        case RXF4: reg = MCP_RXF4SIDH; break;
        case RXF5: reg = MCP_RXF5SIDH; break;
        default:
            return ERROR_FAIL;
    118c:	81 e0       	ldi	r24, 0x01	; 1
    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
    setRegisters(reg, tbufdata, 4);

    return ERROR_OK;
}
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	df 91       	pop	r29
    1198:	cf 91       	pop	r28
    119a:	1f 91       	pop	r17
    119c:	0f 91       	pop	r16
    119e:	ff 90       	pop	r15
    11a0:	ef 90       	pop	r14
    11a2:	df 90       	pop	r13
    11a4:	cf 90       	pop	r12
    11a6:	bf 90       	pop	r11
    11a8:	af 90       	pop	r10
    11aa:	9f 90       	pop	r9
    11ac:	8f 90       	pop	r8
    11ae:	08 95       	ret

000011b0 <_ZN7MCP25155resetEv>:
    digitalWrite(SPICS, HIGH);
    SPIn->endTransaction();
}

MCP2515::ERROR MCP2515::reset(void)
{
    11b0:	af 92       	push	r10
    11b2:	bf 92       	push	r11
    11b4:	cf 92       	push	r12
    11b6:	df 92       	push	r13
    11b8:	ef 92       	push	r14
    11ba:	ff 92       	push	r15
    11bc:	0f 93       	push	r16
    11be:	1f 93       	push	r17
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	64 97       	sbiw	r28, 0x14	; 20
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	de bf       	out	0x3e, r29	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	cd bf       	out	0x3d, r28	; 61
    11d4:	7c 01       	movw	r14, r24
    startSPI();
    11d6:	0d dd       	rcall	.-1510   	; 0xbf2 <_ZN7MCP25158startSPIEv>
    SPIn->transfer(INSTRUCTION_RESET);
    11d8:	80 ec       	ldi	r24, 0xC0	; 192
    11da:	04 dd       	rcall	.-1528   	; 0xbe4 <_ZN8SPIClass8transferEh>
    endSPI();
    11dc:	c7 01       	movw	r24, r14
    11de:	42 dd       	rcall	.-1404   	; 0xc64 <_ZN7MCP25156endSPIEv>
    11e0:	6a e0       	ldi	r22, 0x0A	; 10

    delay(10);
    11e2:	70 e0       	ldi	r23, 0x00	; 0
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	72 db       	rcall	.-2332   	; 0x8ce <delay>
    11ea:	8e 01       	movw	r16, r28

    uint8_t zeros[14];
    memset(zeros, 0, sizeof(zeros));
    11ec:	0f 5f       	subi	r16, 0xFF	; 255
    11ee:	1f 4f       	sbci	r17, 0xFF	; 255
    11f0:	8e e0       	ldi	r24, 0x0E	; 14
    11f2:	f8 01       	movw	r30, r16
    11f4:	11 92       	st	Z+, r1
    11f6:	8a 95       	dec	r24
    11f8:	e9 f7       	brne	.-6      	; 0x11f4 <_ZN7MCP25155resetEv+0x44>
    11fa:	2e e0       	ldi	r18, 0x0E	; 14
    setRegisters(MCP_TXB0CTRL, zeros, 14);
    11fc:	a8 01       	movw	r20, r16
    11fe:	60 e3       	ldi	r22, 0x30	; 48
    1200:	c7 01       	movw	r24, r14
    1202:	bf dd       	rcall	.-1154   	; 0xd82 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    1204:	2e e0       	ldi	r18, 0x0E	; 14
    setRegisters(MCP_TXB1CTRL, zeros, 14);
    1206:	a8 01       	movw	r20, r16
    1208:	60 e4       	ldi	r22, 0x40	; 64
    120a:	c7 01       	movw	r24, r14
    120c:	ba dd       	rcall	.-1164   	; 0xd82 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    120e:	2e e0       	ldi	r18, 0x0E	; 14
    setRegisters(MCP_TXB2CTRL, zeros, 14);
    1210:	a8 01       	movw	r20, r16
    1212:	60 e5       	ldi	r22, 0x50	; 80
    1214:	c7 01       	movw	r24, r14
    1216:	b5 dd       	rcall	.-1174   	; 0xd82 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    1218:	40 e0       	ldi	r20, 0x00	; 0

    setRegister(MCP_RXB0CTRL, 0);
    121a:	60 e6       	ldi	r22, 0x60	; 96
    121c:	c7 01       	movw	r24, r14
    121e:	9d dd       	rcall	.-1222   	; 0xd5a <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    1220:	40 e0       	ldi	r20, 0x00	; 0
    setRegister(MCP_RXB1CTRL, 0);
    1222:	60 e7       	ldi	r22, 0x70	; 112
    1224:	c7 01       	movw	r24, r14
    1226:	99 dd       	rcall	.-1230   	; 0xd5a <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    1228:	43 ea       	ldi	r20, 0xA3	; 163

    setRegister(MCP_CANINTE, CANINTF_RX0IF | CANINTF_RX1IF | CANINTF_ERRIF | CANINTF_MERRF);
    122a:	6b e2       	ldi	r22, 0x2B	; 43
    122c:	c7 01       	movw	r24, r14
    122e:	95 dd       	rcall	.-1238   	; 0xd5a <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    1230:	24 e0       	ldi	r18, 0x04	; 4

    // receives all valid messages using either Standard or Extended Identifiers that
    // meet filter criteria. RXF0 is applied for RXB0, RXF1 is applied for RXB1
    modifyRegister(MCP_RXB0CTRL,
                   RXBnCTRL_RXM_MASK | RXB0CTRL_BUKT | RXB0CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB0CTRL_BUKT | RXB0CTRL_FILHIT);
    1232:	47 e6       	ldi	r20, 0x67	; 103
    1234:	60 e6       	ldi	r22, 0x60	; 96
    1236:	c7 01       	movw	r24, r14
    1238:	ca dd       	rcall	.-1132   	; 0xdce <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
    123a:	21 e0       	ldi	r18, 0x01	; 1
    123c:	47 e6       	ldi	r20, 0x67	; 103
    modifyRegister(MCP_RXB1CTRL,
                   RXBnCTRL_RXM_MASK | RXB1CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB1CTRL_FILHIT);
    123e:	60 e7       	ldi	r22, 0x70	; 112
    1240:	c7 01       	movw	r24, r14
    1242:	c5 dd       	rcall	.-1142   	; 0xdce <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
    1244:	86 e0       	ldi	r24, 0x06	; 6
    1246:	e5 e0       	ldi	r30, 0x05	; 5
    1248:	f2 e0       	ldi	r31, 0x02	; 2

    // clear filters and masks
    // do not filter any standard frames for RXF0 used by RXB0
    // do not filter any extended frames for RXF1 used by RXB1
    RXF filters[] = {RXF0, RXF1, RXF2, RXF3, RXF4, RXF5};
    124a:	de 01       	movw	r26, r28
    124c:	1f 96       	adiw	r26, 0x0f	; 15
    124e:	01 90       	ld	r0, Z+
    1250:	0d 92       	st	X+, r0
    1252:	8a 95       	dec	r24
    1254:	e1 f7       	brne	.-8      	; 0x124e <_ZN7MCP25155resetEv+0x9e>
    1256:	5e 01       	movw	r10, r28
    1258:	ff e0       	ldi	r31, 0x0F	; 15
    125a:	af 0e       	add	r10, r31
    125c:	b1 1c       	adc	r11, r1
    125e:	c1 2c       	mov	r12, r1
    1260:	d1 2c       	mov	r13, r1
    1262:	f5 01       	movw	r30, r10
    for (int i=0; i<6; i++) {
    1264:	61 91       	ld	r22, Z+
    1266:	5f 01       	movw	r10, r30
        bool ext = (i == 1);
        ERROR result = setFilter(filters[i], ext, 0);
    1268:	41 e0       	ldi	r20, 0x01	; 1
    126a:	f1 e0       	ldi	r31, 0x01	; 1
    126c:	cf 16       	cp	r12, r31
    126e:	d1 04       	cpc	r13, r1
    1270:	09 f0       	breq	.+2      	; 0x1274 <_ZN7MCP25155resetEv+0xc4>
    1272:	40 e0       	ldi	r20, 0x00	; 0
    1274:	00 e0       	ldi	r16, 0x00	; 0
    1276:	10 e0       	ldi	r17, 0x00	; 0
    1278:	98 01       	movw	r18, r16
    127a:	c7 01       	movw	r24, r14
    127c:	3c df       	rcall	.-392    	; 0x10f6 <_ZN7MCP25159setFilterENS_3RXFEbm>
    127e:	81 11       	cpse	r24, r1
    1280:	17 c0       	rjmp	.+46     	; 0x12b0 <_ZN7MCP25155resetEv+0x100>
    1282:	8f ef       	ldi	r24, 0xFF	; 255
        if (result != ERROR_OK) {
    1284:	c8 1a       	sub	r12, r24
    1286:	d8 0a       	sbc	r13, r24

    // clear filters and masks
    // do not filter any standard frames for RXF0 used by RXB0
    // do not filter any extended frames for RXF1 used by RXB1
    RXF filters[] = {RXF0, RXF1, RXF2, RXF3, RXF4, RXF5};
    for (int i=0; i<6; i++) {
    1288:	e6 e0       	ldi	r30, 0x06	; 6
    128a:	ce 16       	cp	r12, r30
    128c:	d1 04       	cpc	r13, r1
    128e:	49 f7       	brne	.-46     	; 0x1262 <_ZN7MCP25155resetEv+0xb2>
    1290:	00 e0       	ldi	r16, 0x00	; 0
    1292:	10 e0       	ldi	r17, 0x00	; 0
        }
    }

    MASK masks[] = {MASK0, MASK1};
    for (int i=0; i<2; i++) {
        ERROR result = setFilterMask(masks[i], true, 0);
    1294:	98 01       	movw	r18, r16
    1296:	41 e0       	ldi	r20, 0x01	; 1
    1298:	60 e0       	ldi	r22, 0x00	; 0
    129a:	c7 01       	movw	r24, r14
    129c:	ea de       	rcall	.-556    	; 0x1072 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>
    129e:	81 11       	cpse	r24, r1
    12a0:	07 c0       	rjmp	.+14     	; 0x12b0 <_ZN7MCP25155resetEv+0x100>
        if (result != ERROR_OK) {
    12a2:	00 e0       	ldi	r16, 0x00	; 0
    12a4:	10 e0       	ldi	r17, 0x00	; 0
        }
    }

    MASK masks[] = {MASK0, MASK1};
    for (int i=0; i<2; i++) {
        ERROR result = setFilterMask(masks[i], true, 0);
    12a6:	98 01       	movw	r18, r16
    12a8:	41 e0       	ldi	r20, 0x01	; 1
    12aa:	61 e0       	ldi	r22, 0x01	; 1
    12ac:	c7 01       	movw	r24, r14
    12ae:	e1 de       	rcall	.-574    	; 0x1072 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>
    12b0:	64 96       	adiw	r28, 0x14	; 20
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	f8 94       	cli
            return result;
        }
    }

    return ERROR_OK;
}
    12b6:	de bf       	out	0x3e, r29	; 62
    12b8:	0f be       	out	0x3f, r0	; 63
    12ba:	cd bf       	out	0x3d, r28	; 61
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	1f 91       	pop	r17
    12c2:	0f 91       	pop	r16
    12c4:	ff 90       	pop	r15
    12c6:	ef 90       	pop	r14
    12c8:	df 90       	pop	r13
    12ca:	cf 90       	pop	r12
    12cc:	bf 90       	pop	r11
    12ce:	af 90       	pop	r10
    12d0:	08 95       	ret

000012d2 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame>:
    12d2:	4f 92       	push	r4
    12d4:	5f 92       	push	r5
    12d6:	6f 92       	push	r6

    return ERROR_OK;
}

MCP2515::ERROR MCP2515::sendMessage(const TXBn txbn, const struct can_frame *frame)
{
    12d8:	7f 92       	push	r7
    12da:	af 92       	push	r10
    12dc:	bf 92       	push	r11
    12de:	cf 92       	push	r12
    12e0:	df 92       	push	r13
    12e2:	ef 92       	push	r14
    12e4:	ff 92       	push	r15
    12e6:	0f 93       	push	r16
    12e8:	1f 93       	push	r17
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
    12f2:	2d 97       	sbiw	r28, 0x0d	; 13
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	de bf       	out	0x3e, r29	; 62
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	cd bf       	out	0x3d, r28	; 61
    12fe:	5c 01       	movw	r10, r24
    1300:	fa 01       	movw	r30, r20
    if (frame->can_dlc > CAN_MAX_DLEN) {
    1302:	24 81       	ldd	r18, Z+4	; 0x04
    1304:	29 30       	cpi	r18, 0x09	; 9
    1306:	08 f0       	brcs	.+2      	; 0x130a <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x38>
    1308:	57 c0       	rjmp	.+174    	; 0x13b8 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0xe6>
        return ERROR_FAILTX;
    }

    const struct TXBn_REGS *txbuf = &TXB[txbn];
    130a:	e6 2e       	mov	r14, r22
    130c:	f1 2c       	mov	r15, r1

    uint8_t data[13];

    bool ext = (frame->can_id & CAN_EFF_FLAG);
    130e:	80 81       	ld	r24, Z
    1310:	91 81       	ldd	r25, Z+1	; 0x01
    1312:	a2 81       	ldd	r26, Z+2	; 0x02
    1314:	b3 81       	ldd	r27, Z+3	; 0x03
    1316:	ac 01       	movw	r20, r24
    1318:	bd 01       	movw	r22, r26
    131a:	44 27       	eor	r20, r20
    131c:	77 fd       	sbrc	r23, 7
    131e:	43 95       	inc	r20
    1320:	55 27       	eor	r21, r21
    1322:	66 27       	eor	r22, r22
    1324:	77 27       	eor	r23, r23
    bool rtr = (frame->can_id & CAN_RTR_FLAG);
    1326:	2c 01       	movw	r4, r24
    1328:	3d 01       	movw	r6, r26
    132a:	44 24       	eor	r4, r4
    132c:	55 24       	eor	r5, r5
    132e:	66 24       	eor	r6, r6
    1330:	20 e4       	ldi	r18, 0x40	; 64
    1332:	72 22       	and	r7, r18
    uint32_t id = (frame->can_id & (ext ? CAN_EFF_MASK : CAN_SFF_MASK));
    1334:	b7 fd       	sbrc	r27, 7
    1336:	05 c0       	rjmp	.+10     	; 0x1342 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x70>
    1338:	0f ef       	ldi	r16, 0xFF	; 255
    133a:	17 e0       	ldi	r17, 0x07	; 7
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	04 c0       	rjmp	.+8      	; 0x134a <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x78>
    1342:	0f ef       	ldi	r16, 0xFF	; 255
    1344:	1f ef       	ldi	r17, 0xFF	; 255
    1346:	2f ef       	ldi	r18, 0xFF	; 255
    1348:	3f e1       	ldi	r19, 0x1F	; 31
    134a:	6f 01       	movw	r12, r30

    prepareId(data, ext, id);
    134c:	08 23       	and	r16, r24
    134e:	19 23       	and	r17, r25
    1350:	2a 23       	and	r18, r26
    1352:	3b 23       	and	r19, r27
    1354:	be 01       	movw	r22, r28
    1356:	6f 5f       	subi	r22, 0xFF	; 255
    1358:	7f 4f       	sbci	r23, 0xFF	; 255
    135a:	c5 01       	movw	r24, r10
    135c:	5f de       	rcall	.-834    	; 0x101c <_ZN7MCP25159prepareIdEPhbm>
    135e:	f6 01       	movw	r30, r12
    1360:	14 81       	ldd	r17, Z+4	; 0x04

    data[MCP_DLC] = rtr ? (frame->can_dlc | RTR_MASK) : frame->can_dlc;
    1362:	81 2f       	mov	r24, r17
    1364:	45 28       	or	r4, r5
    1366:	46 28       	or	r4, r6
    1368:	47 28       	or	r4, r7
    136a:	09 f0       	breq	.+2      	; 0x136e <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x9c>
    136c:	80 64       	ori	r24, 0x40	; 64
    136e:	8d 83       	std	Y+5, r24	; 0x05

    memcpy(&data[MCP_DATA], frame->data, frame->can_dlc);
    1370:	41 2f       	mov	r20, r17
    1372:	50 e0       	ldi	r21, 0x00	; 0
    1374:	b6 01       	movw	r22, r12
    1376:	68 5f       	subi	r22, 0xF8	; 248
    1378:	7f 4f       	sbci	r23, 0xFF	; 255
    137a:	ce 01       	movw	r24, r28
    137c:	06 96       	adiw	r24, 0x06	; 6
    137e:	77 d3       	rcall	.+1774   	; 0x1a6e <memcpy>

    setRegisters(txbuf->SIDH, data, 5 + frame->can_dlc);
    1380:	25 e0       	ldi	r18, 0x05	; 5
    1382:	21 0f       	add	r18, r17
    1384:	87 01       	movw	r16, r14
    1386:	00 0f       	add	r16, r16
    1388:	11 1f       	adc	r17, r17
    138a:	0e 0d       	add	r16, r14
    138c:	1f 1d       	adc	r17, r15
    138e:	0d 59       	subi	r16, 0x9D	; 157
    1390:	1d 4f       	sbci	r17, 0xFD	; 253
    1392:	ae 01       	movw	r20, r28
    1394:	4f 5f       	subi	r20, 0xFF	; 255
    1396:	5f 4f       	sbci	r21, 0xFF	; 255
    1398:	f8 01       	movw	r30, r16
    139a:	61 81       	ldd	r22, Z+1	; 0x01
    139c:	c5 01       	movw	r24, r10
    139e:	f1 dc       	rcall	.-1566   	; 0xd82 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    modifyRegister(txbuf->CTRL, TXB_TXREQ, TXB_TXREQ);
    13a0:	f8 01       	movw	r30, r16
    13a2:	10 81       	ld	r17, Z
    13a4:	28 e0       	ldi	r18, 0x08	; 8
    13a6:	48 e0       	ldi	r20, 0x08	; 8
    13a8:	61 2f       	mov	r22, r17
    13aa:	c5 01       	movw	r24, r10

    uint8_t ctrl = readRegister(txbuf->CTRL);
    13ac:	10 dd       	rcall	.-1504   	; 0xdce <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
    13ae:	61 2f       	mov	r22, r17
    13b0:	c5 01       	movw	r24, r10
    13b2:	98 dc       	rcall	.-1744   	; 0xce4 <_ZN7MCP251512readRegisterENS_8REGISTERE>
    if ((ctrl & (TXB_ABTF | TXB_MLOA | TXB_TXERR)) != 0) {
    13b4:	80 77       	andi	r24, 0x70	; 112
    13b6:	09 f0       	breq	.+2      	; 0x13ba <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0xe8>
}

MCP2515::ERROR MCP2515::sendMessage(const TXBn txbn, const struct can_frame *frame)
{
    if (frame->can_dlc > CAN_MAX_DLEN) {
        return ERROR_FAILTX;
    13b8:	84 e0       	ldi	r24, 0x04	; 4
    uint8_t ctrl = readRegister(txbuf->CTRL);
    if ((ctrl & (TXB_ABTF | TXB_MLOA | TXB_TXERR)) != 0) {
        return ERROR_FAILTX;
    }
    return ERROR_OK;
}
    13ba:	2d 96       	adiw	r28, 0x0d	; 13
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	de bf       	out	0x3e, r29	; 62
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	cd bf       	out	0x3d, r28	; 61
    13c6:	df 91       	pop	r29
    13c8:	cf 91       	pop	r28
    13ca:	1f 91       	pop	r17
    13cc:	0f 91       	pop	r16
    13ce:	ff 90       	pop	r15
    13d0:	ef 90       	pop	r14
    13d2:	df 90       	pop	r13
    13d4:	cf 90       	pop	r12
    13d6:	bf 90       	pop	r11
    13d8:	af 90       	pop	r10
    13da:	7f 90       	pop	r7
    13dc:	6f 90       	pop	r6
    13de:	5f 90       	pop	r5
    13e0:	4f 90       	pop	r4
    13e2:	08 95       	ret

000013e4 <_ZN7MCP251511sendMessageEPK9can_frame>:

MCP2515::ERROR MCP2515::sendMessage(const struct can_frame *frame)
{
    13e4:	9f 92       	push	r9
    13e6:	af 92       	push	r10
    13e8:	bf 92       	push	r11
    13ea:	cf 92       	push	r12
    13ec:	df 92       	push	r13
    13ee:	ef 92       	push	r14
    13f0:	ff 92       	push	r15
    13f2:	0f 93       	push	r16
    13f4:	1f 93       	push	r17
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <_ZN7MCP251511sendMessageEPK9can_frame+0x18>
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
    if (frame->can_dlc > CAN_MAX_DLEN) {
    1400:	fb 01       	movw	r30, r22
    1402:	24 81       	ldd	r18, Z+4	; 0x04
    1404:	29 30       	cpi	r18, 0x09	; 9
    1406:	d8 f5       	brcc	.+118    	; 0x147e <_ZN7MCP251511sendMessageEPK9can_frame+0x9a>
    1408:	7b 01       	movw	r14, r22
    140a:	8c 01       	movw	r16, r24
        return ERROR_FAILTX;
    }

    TXBn txBuffers[N_TXBUFFERS] = {TXB0, TXB1, TXB2};
    140c:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <analog_reference+0x7>
    1410:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <analog_reference+0x8>
    1414:	a0 91 0d 02 	lds	r26, 0x020D	; 0x80020d <analog_reference+0x9>
    1418:	89 83       	std	Y+1, r24	; 0x01
    141a:	9a 83       	std	Y+2, r25	; 0x02
    141c:	ab 83       	std	Y+3, r26	; 0x03
    141e:	ce 01       	movw	r24, r28
    1420:	01 96       	adiw	r24, 0x01	; 1
    1422:	6c 01       	movw	r12, r24
    1424:	5e 01       	movw	r10, r28
    1426:	94 e0       	ldi	r25, 0x04	; 4
    1428:	a9 0e       	add	r10, r25
    142a:	b1 1c       	adc	r11, r1

    for (int i=0; i<N_TXBUFFERS; i++) {
        const struct TXBn_REGS *txbuf = &TXB[txBuffers[i]];
    142c:	f6 01       	movw	r30, r12
    142e:	91 90       	ld	r9, Z+
    1430:	6f 01       	movw	r12, r30
        uint8_t ctrlval = readRegister(txbuf->CTRL);
    1432:	29 2d       	mov	r18, r9
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	f9 01       	movw	r30, r18
    1438:	ee 0f       	add	r30, r30
    143a:	ff 1f       	adc	r31, r31
    143c:	2e 0f       	add	r18, r30
    143e:	3f 1f       	adc	r19, r31
    1440:	f9 01       	movw	r30, r18
    1442:	ed 59       	subi	r30, 0x9D	; 157
    1444:	fd 4f       	sbci	r31, 0xFD	; 253
    1446:	60 81       	ld	r22, Z
    1448:	c8 01       	movw	r24, r16
    144a:	4c dc       	rcall	.-1896   	; 0xce4 <_ZN7MCP251512readRegisterENS_8REGISTERE>
        if ( (ctrlval & TXB_TXREQ) == 0 ) {
    144c:	83 fd       	sbrc	r24, 3
    144e:	12 c0       	rjmp	.+36     	; 0x1474 <_ZN7MCP251511sendMessageEPK9can_frame+0x90>
            return sendMessage(txBuffers[i], frame);
    1450:	a7 01       	movw	r20, r14
    1452:	69 2d       	mov	r22, r9
    1454:	c8 01       	movw	r24, r16
        }
    }

    return ERROR_ALLTXBUSY;
}
    1456:	0f 90       	pop	r0
    1458:	0f 90       	pop	r0
    145a:	0f 90       	pop	r0
    145c:	df 91       	pop	r29
    145e:	cf 91       	pop	r28
    1460:	1f 91       	pop	r17
    1462:	0f 91       	pop	r16
    1464:	ff 90       	pop	r15
    1466:	ef 90       	pop	r14
    1468:	df 90       	pop	r13
    146a:	cf 90       	pop	r12
    146c:	bf 90       	pop	r11
    146e:	af 90       	pop	r10

    for (int i=0; i<N_TXBUFFERS; i++) {
        const struct TXBn_REGS *txbuf = &TXB[txBuffers[i]];
        uint8_t ctrlval = readRegister(txbuf->CTRL);
        if ( (ctrlval & TXB_TXREQ) == 0 ) {
            return sendMessage(txBuffers[i], frame);
    1470:	9f 90       	pop	r9
    1472:	2f cf       	rjmp	.-418    	; 0x12d2 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame>
        return ERROR_FAILTX;
    }

    TXBn txBuffers[N_TXBUFFERS] = {TXB0, TXB1, TXB2};

    for (int i=0; i<N_TXBUFFERS; i++) {
    1474:	ca 14       	cp	r12, r10
    1476:	db 04       	cpc	r13, r11
    1478:	c9 f6       	brne	.-78     	; 0x142c <_ZN7MCP251511sendMessageEPK9can_frame+0x48>
        if ( (ctrlval & TXB_TXREQ) == 0 ) {
            return sendMessage(txBuffers[i], frame);
        }
    }

    return ERROR_ALLTXBUSY;
    147a:	82 e0       	ldi	r24, 0x02	; 2
    147c:	01 c0       	rjmp	.+2      	; 0x1480 <_ZN7MCP251511sendMessageEPK9can_frame+0x9c>
}

MCP2515::ERROR MCP2515::sendMessage(const struct can_frame *frame)
{
    if (frame->can_dlc > CAN_MAX_DLEN) {
        return ERROR_FAILTX;
    147e:	84 e0       	ldi	r24, 0x04	; 4
            return sendMessage(txBuffers[i], frame);
        }
    }

    return ERROR_ALLTXBUSY;
}
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	df 91       	pop	r29
    1488:	cf 91       	pop	r28
    148a:	1f 91       	pop	r17
    148c:	0f 91       	pop	r16
    148e:	ff 90       	pop	r15
    1490:	ef 90       	pop	r14
    1492:	df 90       	pop	r13
    1494:	cf 90       	pop	r12
    1496:	bf 90       	pop	r11
    1498:	af 90       	pop	r10
    149a:	9f 90       	pop	r9
    149c:	08 95       	ret

0000149e <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(const RXBn rxbn, struct can_frame *frame)
{
    149e:	7f 92       	push	r7
    14a0:	8f 92       	push	r8
    14a2:	9f 92       	push	r9
    14a4:	af 92       	push	r10
    14a6:	bf 92       	push	r11
    14a8:	cf 92       	push	r12
    14aa:	df 92       	push	r13
    14ac:	ef 92       	push	r14
    14ae:	ff 92       	push	r15
    14b0:	0f 93       	push	r16
    14b2:	1f 93       	push	r17
    14b4:	cf 93       	push	r28
    14b6:	df 93       	push	r29
    14b8:	00 d0       	rcall	.+0      	; 0x14ba <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x1c>
    14ba:	1f 92       	push	r1
    14bc:	1f 92       	push	r1
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
    14c2:	4c 01       	movw	r8, r24
    14c4:	5a 01       	movw	r10, r20
    const struct RXBn_REGS *rxb = &RXB[rxbn];

    uint8_t tbufdata[5];

    readRegisters(rxb->SIDH, tbufdata, 5);
    14c6:	24 e0       	ldi	r18, 0x04	; 4
    14c8:	62 9f       	mul	r22, r18
    14ca:	80 01       	movw	r16, r0
    14cc:	11 24       	eor	r1, r1
    14ce:	f8 01       	movw	r30, r16
    14d0:	e5 5a       	subi	r30, 0xA5	; 165
    14d2:	fd 4f       	sbci	r31, 0xFD	; 253
    14d4:	25 e0       	ldi	r18, 0x05	; 5
    14d6:	ae 01       	movw	r20, r28
    14d8:	4f 5f       	subi	r20, 0xFF	; 255
    14da:	5f 4f       	sbci	r21, 0xFF	; 255
    14dc:	61 81       	ldd	r22, Z+1	; 0x01
    14de:	16 dc       	rcall	.-2004   	; 0xd0c <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    uint32_t id = (tbufdata[MCP_SIDH]<<3) + (tbufdata[MCP_SIDL]>>5);
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	99 81       	ldd	r25, Y+1	; 0x01
    14e4:	c8 2e       	mov	r12, r24
    14e6:	d1 2c       	mov	r13, r1
    14e8:	45 e0       	ldi	r20, 0x05	; 5
    14ea:	d5 94       	asr	r13
    14ec:	c7 94       	ror	r12
    14ee:	4a 95       	dec	r20
    14f0:	e1 f7       	brne	.-8      	; 0x14ea <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x4c>
    14f2:	e8 e0       	ldi	r30, 0x08	; 8
    14f4:	9e 9f       	mul	r25, r30
    14f6:	c0 0c       	add	r12, r0
    14f8:	d1 1c       	adc	r13, r1
    14fa:	11 24       	eor	r1, r1
    14fc:	0d 2c       	mov	r0, r13
    14fe:	00 0c       	add	r0, r0
    1500:	ee 08       	sbc	r14, r14
    1502:	ff 08       	sbc	r15, r15

    if ( (tbufdata[MCP_SIDL] & TXB_EXIDE_MASK) ==  TXB_EXIDE_MASK ) {
    1504:	83 ff       	sbrs	r24, 3
    1506:	20 c0       	rjmp	.+64     	; 0x1548 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xaa>
        id = (id<<2) + (tbufdata[MCP_SIDL] & 0x03);
    1508:	92 e0       	ldi	r25, 0x02	; 2
    150a:	cc 0c       	add	r12, r12
    150c:	dd 1c       	adc	r13, r13
    150e:	ee 1c       	adc	r14, r14
    1510:	ff 1c       	adc	r15, r15
    1512:	9a 95       	dec	r25
    1514:	d1 f7       	brne	.-12     	; 0x150a <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x6c>
        id = (id<<8) + tbufdata[MCP_EID8];
    1516:	83 70       	andi	r24, 0x03	; 3
    1518:	c8 0e       	add	r12, r24
    151a:	d1 1c       	adc	r13, r1
    151c:	e1 1c       	adc	r14, r1
    151e:	f1 1c       	adc	r15, r1
    1520:	fe 2c       	mov	r15, r14
    1522:	ed 2c       	mov	r14, r13
    1524:	dc 2c       	mov	r13, r12
    1526:	cc 24       	eor	r12, r12
        id = (id<<8) + tbufdata[MCP_EID0];
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	c8 0e       	add	r12, r24
    152c:	d1 1c       	adc	r13, r1
    152e:	e1 1c       	adc	r14, r1
    1530:	f1 1c       	adc	r15, r1
    1532:	fe 2c       	mov	r15, r14
    1534:	ed 2c       	mov	r14, r13
    1536:	dc 2c       	mov	r13, r12
    1538:	cc 24       	eor	r12, r12
    153a:	8c 81       	ldd	r24, Y+4	; 0x04
    153c:	c8 0e       	add	r12, r24
    153e:	d1 1c       	adc	r13, r1
    1540:	e1 1c       	adc	r14, r1
    1542:	f1 1c       	adc	r15, r1
        id |= CAN_EFF_FLAG;
    1544:	68 94       	set
    1546:	f7 f8       	bld	r15, 7
    }

    uint8_t dlc = (tbufdata[MCP_DLC] & DLC_MASK);
    1548:	8d 81       	ldd	r24, Y+5	; 0x05
    154a:	8f 70       	andi	r24, 0x0F	; 15
    154c:	78 2e       	mov	r7, r24
    if (dlc > CAN_MAX_DLEN) {
    154e:	f8 e0       	ldi	r31, 0x08	; 8
    1550:	f8 17       	cp	r31, r24
    1552:	10 f1       	brcs	.+68     	; 0x1598 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xfa>
        return ERROR_FAIL;
    }

    uint8_t ctrl = readRegister(rxb->CTRL);
    1554:	f8 01       	movw	r30, r16
    1556:	e5 5a       	subi	r30, 0xA5	; 165
    1558:	fd 4f       	sbci	r31, 0xFD	; 253
    155a:	60 81       	ld	r22, Z
    155c:	c4 01       	movw	r24, r8
    155e:	c2 db       	rcall	.-2172   	; 0xce4 <_ZN7MCP251512readRegisterENS_8REGISTERE>
    if (ctrl & RXBnCTRL_RTR) {
    1560:	83 ff       	sbrs	r24, 3
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xca>
        id |= CAN_RTR_FLAG;
    1564:	68 94       	set
    1566:	f6 f8       	bld	r15, 6
    }

    frame->can_id = id;
    1568:	f5 01       	movw	r30, r10
    156a:	c0 82       	st	Z, r12
    156c:	d1 82       	std	Z+1, r13	; 0x01
    156e:	e2 82       	std	Z+2, r14	; 0x02
    1570:	f3 82       	std	Z+3, r15	; 0x03
    frame->can_dlc = dlc;
    1572:	74 82       	std	Z+4, r7	; 0x04

    readRegisters(rxb->DATA, frame->data, dlc);
    1574:	a5 01       	movw	r20, r10
    1576:	48 5f       	subi	r20, 0xF8	; 248
    1578:	5f 4f       	sbci	r21, 0xFF	; 255
    157a:	05 5a       	subi	r16, 0xA5	; 165
    157c:	1d 4f       	sbci	r17, 0xFD	; 253
    157e:	27 2d       	mov	r18, r7
    1580:	f8 01       	movw	r30, r16
    1582:	62 81       	ldd	r22, Z+2	; 0x02
    1584:	c4 01       	movw	r24, r8
    1586:	c2 db       	rcall	.-2172   	; 0xd0c <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    modifyRegister(MCP_CANINTF, rxb->CANINTF_RXnIF, 0);
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	f8 01       	movw	r30, r16
    158c:	43 81       	ldd	r20, Z+3	; 0x03
    158e:	6c e2       	ldi	r22, 0x2C	; 44
    1590:	c4 01       	movw	r24, r8
    1592:	1d dc       	rcall	.-1990   	; 0xdce <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    return ERROR_OK;
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	01 c0       	rjmp	.+2      	; 0x159a <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xfc>
        id |= CAN_EFF_FLAG;
    }

    uint8_t dlc = (tbufdata[MCP_DLC] & DLC_MASK);
    if (dlc > CAN_MAX_DLEN) {
        return ERROR_FAIL;
    1598:	81 e0       	ldi	r24, 0x01	; 1
    readRegisters(rxb->DATA, frame->data, dlc);

    modifyRegister(MCP_CANINTF, rxb->CANINTF_RXnIF, 0);

    return ERROR_OK;
}
    159a:	0f 90       	pop	r0
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	df 91       	pop	r29
    15a6:	cf 91       	pop	r28
    15a8:	1f 91       	pop	r17
    15aa:	0f 91       	pop	r16
    15ac:	ff 90       	pop	r15
    15ae:	ef 90       	pop	r14
    15b0:	df 90       	pop	r13
    15b2:	cf 90       	pop	r12
    15b4:	bf 90       	pop	r11
    15b6:	af 90       	pop	r10
    15b8:	9f 90       	pop	r9
    15ba:	8f 90       	pop	r8
    15bc:	7f 90       	pop	r7
    15be:	08 95       	ret

000015c0 <_ZN7MCP251511readMessageEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(struct can_frame *frame)
{
    15c0:	0f 93       	push	r16
    15c2:	1f 93       	push	r17
    15c4:	cf 93       	push	r28
    15c6:	df 93       	push	r29
    15c8:	ec 01       	movw	r28, r24
    15ca:	8b 01       	movw	r16, r22
    ERROR rc;
    uint8_t stat = getStatus();
    15cc:	19 dc       	rcall	.-1998   	; 0xe00 <_ZN7MCP25159getStatusEv>

    if ( stat & STAT_RX0IF ) {
    15ce:	80 ff       	sbrs	r24, 0
    15d0:	03 c0       	rjmp	.+6      	; 0x15d8 <_ZN7MCP251511readMessageEP9can_frame+0x18>
        rc = readMessage(RXB0, frame);
    15d2:	a8 01       	movw	r20, r16
    15d4:	60 e0       	ldi	r22, 0x00	; 0
    15d6:	04 c0       	rjmp	.+8      	; 0x15e0 <_ZN7MCP251511readMessageEP9can_frame+0x20>
    } else if ( stat & STAT_RX1IF ) {
    15d8:	81 ff       	sbrs	r24, 1
    15da:	08 c0       	rjmp	.+16     	; 0x15ec <_ZN7MCP251511readMessageEP9can_frame+0x2c>
        rc = readMessage(RXB1, frame);
    15dc:	a8 01       	movw	r20, r16
    15de:	61 e0       	ldi	r22, 0x01	; 1
    15e0:	ce 01       	movw	r24, r28
    } else {
        rc = ERROR_NOMSG;
    }

    return rc;
}
    15e2:	df 91       	pop	r29
    15e4:	cf 91       	pop	r28
    15e6:	1f 91       	pop	r17
    uint8_t stat = getStatus();

    if ( stat & STAT_RX0IF ) {
        rc = readMessage(RXB0, frame);
    } else if ( stat & STAT_RX1IF ) {
        rc = readMessage(RXB1, frame);
    15e8:	0f 91       	pop	r16
    15ea:	59 cf       	rjmp	.-334    	; 0x149e <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
    } else {
        rc = ERROR_NOMSG;
    }

    return rc;
}
    15ec:	85 e0       	ldi	r24, 0x05	; 5
    15ee:	df 91       	pop	r29
    15f0:	cf 91       	pop	r28
    15f2:	1f 91       	pop	r17
    15f4:	0f 91       	pop	r16
    15f6:	08 95       	ret

000015f8 <_ZN13LiquidCrystal11pulseEnableEv>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
    15fc:	ec 01       	movw	r28, r24
    15fe:	60 e0       	ldi	r22, 0x00	; 0
    1600:	8e 81       	ldd	r24, Y+6	; 0x06
    1602:	c2 da       	rcall	.-2684   	; 0xb88 <digitalWrite>
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	9c d9       	rcall	.-3272   	; 0x942 <delayMicroseconds>
    160a:	61 e0       	ldi	r22, 0x01	; 1
    160c:	8e 81       	ldd	r24, Y+6	; 0x06
    160e:	bc da       	rcall	.-2696   	; 0xb88 <digitalWrite>
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	96 d9       	rcall	.-3284   	; 0x942 <delayMicroseconds>
    1616:	60 e0       	ldi	r22, 0x00	; 0
    1618:	8e 81       	ldd	r24, Y+6	; 0x06
    161a:	b6 da       	rcall	.-2708   	; 0xb88 <digitalWrite>
    161c:	84 e6       	ldi	r24, 0x64	; 100
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	df 91       	pop	r29
    1622:	cf 91       	pop	r28
    1624:	8e c9       	rjmp	.-3300   	; 0x942 <delayMicroseconds>

00001626 <_ZN13LiquidCrystal10write4bitsEh>:
    1626:	cf 92       	push	r12
    1628:	df 92       	push	r13
    162a:	ef 92       	push	r14
    162c:	ff 92       	push	r15
    162e:	0f 93       	push	r16
    1630:	1f 93       	push	r17
    1632:	cf 93       	push	r28
    1634:	df 93       	push	r29
    1636:	6c 01       	movw	r12, r24
    1638:	7c 01       	movw	r14, r24
    163a:	87 e0       	ldi	r24, 0x07	; 7
    163c:	e8 0e       	add	r14, r24
    163e:	f1 1c       	adc	r15, r1
    1640:	c0 e0       	ldi	r28, 0x00	; 0
    1642:	d0 e0       	ldi	r29, 0x00	; 0
    1644:	06 2f       	mov	r16, r22
    1646:	10 e0       	ldi	r17, 0x00	; 0
    1648:	b8 01       	movw	r22, r16
    164a:	0c 2e       	mov	r0, r28
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <_ZN13LiquidCrystal10write4bitsEh+0x2c>
    164e:	75 95       	asr	r23
    1650:	67 95       	ror	r22
    1652:	0a 94       	dec	r0
    1654:	e2 f7       	brpl	.-8      	; 0x164e <_ZN13LiquidCrystal10write4bitsEh+0x28>
    1656:	61 70       	andi	r22, 0x01	; 1
    1658:	f7 01       	movw	r30, r14
    165a:	81 91       	ld	r24, Z+
    165c:	7f 01       	movw	r14, r30
    165e:	94 da       	rcall	.-2776   	; 0xb88 <digitalWrite>
    1660:	21 96       	adiw	r28, 0x01	; 1
    1662:	c4 30       	cpi	r28, 0x04	; 4
    1664:	d1 05       	cpc	r29, r1
    1666:	81 f7       	brne	.-32     	; 0x1648 <_ZN13LiquidCrystal10write4bitsEh+0x22>
    1668:	c6 01       	movw	r24, r12
    166a:	df 91       	pop	r29
    166c:	cf 91       	pop	r28
    166e:	1f 91       	pop	r17
    1670:	0f 91       	pop	r16
    1672:	ff 90       	pop	r15
    1674:	ef 90       	pop	r14
    1676:	df 90       	pop	r13
    1678:	cf 90       	pop	r12
    167a:	be cf       	rjmp	.-132    	; 0x15f8 <_ZN13LiquidCrystal11pulseEnableEv>

0000167c <_ZN13LiquidCrystal10write8bitsEh>:
    167c:	cf 92       	push	r12
    167e:	df 92       	push	r13
    1680:	ef 92       	push	r14
    1682:	ff 92       	push	r15
    1684:	0f 93       	push	r16
    1686:	1f 93       	push	r17
    1688:	cf 93       	push	r28
    168a:	df 93       	push	r29
    168c:	6c 01       	movw	r12, r24
    168e:	7c 01       	movw	r14, r24
    1690:	87 e0       	ldi	r24, 0x07	; 7
    1692:	e8 0e       	add	r14, r24
    1694:	f1 1c       	adc	r15, r1
    1696:	c0 e0       	ldi	r28, 0x00	; 0
    1698:	d0 e0       	ldi	r29, 0x00	; 0
    169a:	06 2f       	mov	r16, r22
    169c:	10 e0       	ldi	r17, 0x00	; 0
    169e:	b8 01       	movw	r22, r16
    16a0:	0c 2e       	mov	r0, r28
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <_ZN13LiquidCrystal10write8bitsEh+0x2c>
    16a4:	75 95       	asr	r23
    16a6:	67 95       	ror	r22
    16a8:	0a 94       	dec	r0
    16aa:	e2 f7       	brpl	.-8      	; 0x16a4 <_ZN13LiquidCrystal10write8bitsEh+0x28>
    16ac:	61 70       	andi	r22, 0x01	; 1
    16ae:	f7 01       	movw	r30, r14
    16b0:	81 91       	ld	r24, Z+
    16b2:	7f 01       	movw	r14, r30
    16b4:	69 da       	rcall	.-2862   	; 0xb88 <digitalWrite>
    16b6:	21 96       	adiw	r28, 0x01	; 1
    16b8:	c8 30       	cpi	r28, 0x08	; 8
    16ba:	d1 05       	cpc	r29, r1
    16bc:	81 f7       	brne	.-32     	; 0x169e <_ZN13LiquidCrystal10write8bitsEh+0x22>
    16be:	c6 01       	movw	r24, r12
    16c0:	df 91       	pop	r29
    16c2:	cf 91       	pop	r28
    16c4:	1f 91       	pop	r17
    16c6:	0f 91       	pop	r16
    16c8:	ff 90       	pop	r15
    16ca:	ef 90       	pop	r14
    16cc:	df 90       	pop	r13
    16ce:	cf 90       	pop	r12
    16d0:	93 cf       	rjmp	.-218    	; 0x15f8 <_ZN13LiquidCrystal11pulseEnableEv>

000016d2 <_ZN13LiquidCrystal4sendEhh>:
    16d2:	1f 93       	push	r17
    16d4:	cf 93       	push	r28
    16d6:	df 93       	push	r29
    16d8:	ec 01       	movw	r28, r24
    16da:	16 2f       	mov	r17, r22
    16dc:	64 2f       	mov	r22, r20
    16de:	8c 81       	ldd	r24, Y+4	; 0x04
    16e0:	53 da       	rcall	.-2906   	; 0xb88 <digitalWrite>
    16e2:	8d 81       	ldd	r24, Y+5	; 0x05
    16e4:	8f 3f       	cpi	r24, 0xFF	; 255
    16e6:	11 f0       	breq	.+4      	; 0x16ec <_ZN13LiquidCrystal4sendEhh+0x1a>
    16e8:	60 e0       	ldi	r22, 0x00	; 0
    16ea:	4e da       	rcall	.-2916   	; 0xb88 <digitalWrite>
    16ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    16ee:	61 2f       	mov	r22, r17
    16f0:	84 ff       	sbrs	r24, 4
    16f2:	05 c0       	rjmp	.+10     	; 0x16fe <_ZN13LiquidCrystal4sendEhh+0x2c>
    16f4:	ce 01       	movw	r24, r28
    16f6:	df 91       	pop	r29
    16f8:	cf 91       	pop	r28
    16fa:	1f 91       	pop	r17
    16fc:	bf cf       	rjmp	.-130    	; 0x167c <_ZN13LiquidCrystal10write8bitsEh>
    16fe:	70 e0       	ldi	r23, 0x00	; 0
    1700:	84 e0       	ldi	r24, 0x04	; 4
    1702:	75 95       	asr	r23
    1704:	67 95       	ror	r22
    1706:	8a 95       	dec	r24
    1708:	e1 f7       	brne	.-8      	; 0x1702 <_ZN13LiquidCrystal4sendEhh+0x30>
    170a:	ce 01       	movw	r24, r28
    170c:	8c df       	rcall	.-232    	; 0x1626 <_ZN13LiquidCrystal10write4bitsEh>
    170e:	61 2f       	mov	r22, r17
    1710:	ce 01       	movw	r24, r28
    1712:	df 91       	pop	r29
    1714:	cf 91       	pop	r28
    1716:	1f 91       	pop	r17
    1718:	86 cf       	rjmp	.-244    	; 0x1626 <_ZN13LiquidCrystal10write4bitsEh>

0000171a <_ZN13LiquidCrystal7commandEh>:
    171a:	40 e0       	ldi	r20, 0x00	; 0
    171c:	da cf       	rjmp	.-76     	; 0x16d2 <_ZN13LiquidCrystal4sendEhh>

0000171e <_ZN13LiquidCrystal5clearEv>:
    171e:	61 e0       	ldi	r22, 0x01	; 1
    1720:	fc df       	rcall	.-8      	; 0x171a <_ZN13LiquidCrystal7commandEh>
    1722:	80 ed       	ldi	r24, 0xD0	; 208
    1724:	97 e0       	ldi	r25, 0x07	; 7
    1726:	0d c9       	rjmp	.-3558   	; 0x942 <delayMicroseconds>

00001728 <_ZN13LiquidCrystal9setCursorEhh>:
    1728:	fc 01       	movw	r30, r24
    172a:	44 30       	cpi	r20, 0x04	; 4
    172c:	08 f0       	brcs	.+2      	; 0x1730 <_ZN13LiquidCrystal9setCursorEhh+0x8>
    172e:	43 e0       	ldi	r20, 0x03	; 3
    1730:	83 89       	ldd	r24, Z+19	; 0x13
    1732:	48 17       	cp	r20, r24
    1734:	10 f0       	brcs	.+4      	; 0x173a <_ZN13LiquidCrystal9setCursorEhh+0x12>
    1736:	4f ef       	ldi	r20, 0xFF	; 255
    1738:	48 0f       	add	r20, r24
    173a:	df 01       	movw	r26, r30
    173c:	a4 0f       	add	r26, r20
    173e:	b1 1d       	adc	r27, r1
    1740:	54 96       	adiw	r26, 0x14	; 20
    1742:	9c 91       	ld	r25, X
    1744:	69 0f       	add	r22, r25
    1746:	60 68       	ori	r22, 0x80	; 128
    1748:	cf 01       	movw	r24, r30
    174a:	e7 cf       	rjmp	.-50     	; 0x171a <_ZN13LiquidCrystal7commandEh>

0000174c <_ZN13LiquidCrystal7displayEv>:
    174c:	fc 01       	movw	r30, r24
    174e:	60 89       	ldd	r22, Z+16	; 0x10
    1750:	26 2f       	mov	r18, r22
    1752:	24 60       	ori	r18, 0x04	; 4
    1754:	20 8b       	std	Z+16, r18	; 0x10
    1756:	6c 60       	ori	r22, 0x0C	; 12
    1758:	e0 cf       	rjmp	.-64     	; 0x171a <_ZN13LiquidCrystal7commandEh>

0000175a <_ZN13LiquidCrystal5beginEhhh>:
    175a:	ef 92       	push	r14
    175c:	ff 92       	push	r15
    175e:	0f 93       	push	r16
    1760:	1f 93       	push	r17
    1762:	cf 93       	push	r28
    1764:	df 93       	push	r29
    1766:	ec 01       	movw	r28, r24
    1768:	42 30       	cpi	r20, 0x02	; 2
    176a:	18 f0       	brcs	.+6      	; 0x1772 <_ZN13LiquidCrystal5beginEhhh+0x18>
    176c:	8f 85       	ldd	r24, Y+15	; 0x0f
    176e:	88 60       	ori	r24, 0x08	; 8
    1770:	8f 87       	std	Y+15, r24	; 0x0f
    1772:	4b 8b       	std	Y+19, r20	; 0x13
    1774:	1c 8a       	std	Y+20, r1	; 0x14
    1776:	80 e4       	ldi	r24, 0x40	; 64
    1778:	8d 8b       	std	Y+21, r24	; 0x15
    177a:	6e 8b       	std	Y+22, r22	; 0x16
    177c:	70 e0       	ldi	r23, 0x00	; 0
    177e:	60 5c       	subi	r22, 0xC0	; 192
    1780:	7f 4f       	sbci	r23, 0xFF	; 255
    1782:	6f 8b       	std	Y+23, r22	; 0x17
    1784:	22 23       	and	r18, r18
    1786:	29 f0       	breq	.+10     	; 0x1792 <_ZN13LiquidCrystal5beginEhhh+0x38>
    1788:	41 30       	cpi	r20, 0x01	; 1
    178a:	19 f4       	brne	.+6      	; 0x1792 <_ZN13LiquidCrystal5beginEhhh+0x38>
    178c:	8f 85       	ldd	r24, Y+15	; 0x0f
    178e:	84 60       	ori	r24, 0x04	; 4
    1790:	8f 87       	std	Y+15, r24	; 0x0f
    1792:	61 e0       	ldi	r22, 0x01	; 1
    1794:	8c 81       	ldd	r24, Y+4	; 0x04
    1796:	bc d9       	rcall	.-3208   	; 0xb10 <pinMode>
    1798:	8d 81       	ldd	r24, Y+5	; 0x05
    179a:	8f 3f       	cpi	r24, 0xFF	; 255
    179c:	11 f0       	breq	.+4      	; 0x17a2 <_ZN13LiquidCrystal5beginEhhh+0x48>
    179e:	61 e0       	ldi	r22, 0x01	; 1
    17a0:	b7 d9       	rcall	.-3218   	; 0xb10 <pinMode>
    17a2:	61 e0       	ldi	r22, 0x01	; 1
    17a4:	8e 81       	ldd	r24, Y+6	; 0x06
    17a6:	b4 d9       	rcall	.-3224   	; 0xb10 <pinMode>
    17a8:	7e 01       	movw	r14, r28
    17aa:	87 e0       	ldi	r24, 0x07	; 7
    17ac:	e8 0e       	add	r14, r24
    17ae:	f1 1c       	adc	r15, r1
    17b0:	00 e0       	ldi	r16, 0x00	; 0
    17b2:	10 e0       	ldi	r17, 0x00	; 0
    17b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    17b6:	84 fd       	sbrc	r24, 4
    17b8:	03 c0       	rjmp	.+6      	; 0x17c0 <_ZN13LiquidCrystal5beginEhhh+0x66>
    17ba:	84 e0       	ldi	r24, 0x04	; 4
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <_ZN13LiquidCrystal5beginEhhh+0x6a>
    17c0:	88 e0       	ldi	r24, 0x08	; 8
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	08 17       	cp	r16, r24
    17c6:	19 07       	cpc	r17, r25
    17c8:	44 f4       	brge	.+16     	; 0x17da <_ZN13LiquidCrystal5beginEhhh+0x80>
    17ca:	61 e0       	ldi	r22, 0x01	; 1
    17cc:	f7 01       	movw	r30, r14
    17ce:	81 91       	ld	r24, Z+
    17d0:	7f 01       	movw	r14, r30
    17d2:	9e d9       	rcall	.-3268   	; 0xb10 <pinMode>
    17d4:	0f 5f       	subi	r16, 0xFF	; 255
    17d6:	1f 4f       	sbci	r17, 0xFF	; 255
    17d8:	ed cf       	rjmp	.-38     	; 0x17b4 <_ZN13LiquidCrystal5beginEhhh+0x5a>
    17da:	80 e5       	ldi	r24, 0x50	; 80
    17dc:	93 ec       	ldi	r25, 0xC3	; 195
    17de:	b1 d8       	rcall	.-3742   	; 0x942 <delayMicroseconds>
    17e0:	60 e0       	ldi	r22, 0x00	; 0
    17e2:	8c 81       	ldd	r24, Y+4	; 0x04
    17e4:	d1 d9       	rcall	.-3166   	; 0xb88 <digitalWrite>
    17e6:	60 e0       	ldi	r22, 0x00	; 0
    17e8:	8e 81       	ldd	r24, Y+6	; 0x06
    17ea:	ce d9       	rcall	.-3172   	; 0xb88 <digitalWrite>
    17ec:	8d 81       	ldd	r24, Y+5	; 0x05
    17ee:	8f 3f       	cpi	r24, 0xFF	; 255
    17f0:	11 f0       	breq	.+4      	; 0x17f6 <_ZN13LiquidCrystal5beginEhhh+0x9c>
    17f2:	60 e0       	ldi	r22, 0x00	; 0
    17f4:	c9 d9       	rcall	.-3182   	; 0xb88 <digitalWrite>
    17f6:	6f 85       	ldd	r22, Y+15	; 0x0f
    17f8:	64 fd       	sbrc	r22, 4
    17fa:	16 c0       	rjmp	.+44     	; 0x1828 <_ZN13LiquidCrystal5beginEhhh+0xce>
    17fc:	63 e0       	ldi	r22, 0x03	; 3
    17fe:	ce 01       	movw	r24, r28
    1800:	12 df       	rcall	.-476    	; 0x1626 <_ZN13LiquidCrystal10write4bitsEh>
    1802:	84 e9       	ldi	r24, 0x94	; 148
    1804:	91 e1       	ldi	r25, 0x11	; 17
    1806:	9d d8       	rcall	.-3782   	; 0x942 <delayMicroseconds>
    1808:	63 e0       	ldi	r22, 0x03	; 3
    180a:	ce 01       	movw	r24, r28
    180c:	0c df       	rcall	.-488    	; 0x1626 <_ZN13LiquidCrystal10write4bitsEh>
    180e:	84 e9       	ldi	r24, 0x94	; 148
    1810:	91 e1       	ldi	r25, 0x11	; 17
    1812:	97 d8       	rcall	.-3794   	; 0x942 <delayMicroseconds>
    1814:	63 e0       	ldi	r22, 0x03	; 3
    1816:	ce 01       	movw	r24, r28
    1818:	06 df       	rcall	.-500    	; 0x1626 <_ZN13LiquidCrystal10write4bitsEh>
    181a:	86 e9       	ldi	r24, 0x96	; 150
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	91 d8       	rcall	.-3806   	; 0x942 <delayMicroseconds>
    1820:	62 e0       	ldi	r22, 0x02	; 2
    1822:	ce 01       	movw	r24, r28
    1824:	00 df       	rcall	.-512    	; 0x1626 <_ZN13LiquidCrystal10write4bitsEh>
    1826:	11 c0       	rjmp	.+34     	; 0x184a <_ZN13LiquidCrystal5beginEhhh+0xf0>
    1828:	60 62       	ori	r22, 0x20	; 32
    182a:	ce 01       	movw	r24, r28
    182c:	76 df       	rcall	.-276    	; 0x171a <_ZN13LiquidCrystal7commandEh>
    182e:	84 e9       	ldi	r24, 0x94	; 148
    1830:	91 e1       	ldi	r25, 0x11	; 17
    1832:	87 d8       	rcall	.-3826   	; 0x942 <delayMicroseconds>
    1834:	6f 85       	ldd	r22, Y+15	; 0x0f
    1836:	60 62       	ori	r22, 0x20	; 32
    1838:	ce 01       	movw	r24, r28
    183a:	6f df       	rcall	.-290    	; 0x171a <_ZN13LiquidCrystal7commandEh>
    183c:	86 e9       	ldi	r24, 0x96	; 150
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	80 d8       	rcall	.-3840   	; 0x942 <delayMicroseconds>
    1842:	6f 85       	ldd	r22, Y+15	; 0x0f
    1844:	60 62       	ori	r22, 0x20	; 32
    1846:	ce 01       	movw	r24, r28
    1848:	68 df       	rcall	.-304    	; 0x171a <_ZN13LiquidCrystal7commandEh>
    184a:	6f 85       	ldd	r22, Y+15	; 0x0f
    184c:	60 62       	ori	r22, 0x20	; 32
    184e:	ce 01       	movw	r24, r28
    1850:	64 df       	rcall	.-312    	; 0x171a <_ZN13LiquidCrystal7commandEh>
    1852:	84 e0       	ldi	r24, 0x04	; 4
    1854:	88 8b       	std	Y+16, r24	; 0x10
    1856:	ce 01       	movw	r24, r28
    1858:	79 df       	rcall	.-270    	; 0x174c <_ZN13LiquidCrystal7displayEv>
    185a:	ce 01       	movw	r24, r28
    185c:	60 df       	rcall	.-320    	; 0x171e <_ZN13LiquidCrystal5clearEv>
    185e:	82 e0       	ldi	r24, 0x02	; 2
    1860:	89 8b       	std	Y+17, r24	; 0x11
    1862:	66 e0       	ldi	r22, 0x06	; 6
    1864:	ce 01       	movw	r24, r28
    1866:	df 91       	pop	r29
    1868:	cf 91       	pop	r28
    186a:	1f 91       	pop	r17
    186c:	0f 91       	pop	r16
    186e:	ff 90       	pop	r15
    1870:	ef 90       	pop	r14
    1872:	53 cf       	rjmp	.-346    	; 0x171a <_ZN13LiquidCrystal7commandEh>

00001874 <_ZN13LiquidCrystalC1Ehhhhhh>:
    1874:	cf 92       	push	r12
    1876:	ef 92       	push	r14
    1878:	0f 93       	push	r16
    187a:	fc 01       	movw	r30, r24
    187c:	13 82       	std	Z+3, r1	; 0x03
    187e:	12 82       	std	Z+2, r1	; 0x02
    1880:	80 e7       	ldi	r24, 0x70	; 112
    1882:	92 e0       	ldi	r25, 0x02	; 2
    1884:	91 83       	std	Z+1, r25	; 0x01
    1886:	80 83       	st	Z, r24
    1888:	64 83       	std	Z+4, r22	; 0x04
    188a:	8f ef       	ldi	r24, 0xFF	; 255
    188c:	85 83       	std	Z+5, r24	; 0x05
    188e:	46 83       	std	Z+6, r20	; 0x06
    1890:	27 83       	std	Z+7, r18	; 0x07
    1892:	00 87       	std	Z+8, r16	; 0x08
    1894:	e1 86       	std	Z+9, r14	; 0x09
    1896:	c2 86       	std	Z+10, r12	; 0x0a
    1898:	13 86       	std	Z+11, r1	; 0x0b
    189a:	14 86       	std	Z+12, r1	; 0x0c
    189c:	15 86       	std	Z+13, r1	; 0x0d
    189e:	16 86       	std	Z+14, r1	; 0x0e
    18a0:	17 86       	std	Z+15, r1	; 0x0f
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	41 e0       	ldi	r20, 0x01	; 1
    18a6:	60 e1       	ldi	r22, 0x10	; 16
    18a8:	cf 01       	movw	r24, r30
    18aa:	0f 91       	pop	r16
    18ac:	ef 90       	pop	r14
    18ae:	cf 90       	pop	r12
    18b0:	54 cf       	rjmp	.-344    	; 0x175a <_ZN13LiquidCrystal5beginEhhh>

000018b2 <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
    18b2:	41 e0       	ldi	r20, 0x01	; 1
    18b4:	0e df       	rcall	.-484    	; 0x16d2 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	08 95       	ret

000018bc <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    18bc:	cf 93       	push	r28
  uint8_t sreg = SREG;
    18be:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    18c0:	f8 94       	cli
  if (!initialized) {
    18c2:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <_ZN8SPIClass11initializedE>
    18c6:	81 11       	cpse	r24, r1
    18c8:	23 c0       	rjmp	.+70     	; 0x1910 <_ZN8SPIClass5beginEv+0x54>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    18ca:	e1 e2       	ldi	r30, 0x21	; 33
    18cc:	f2 e0       	ldi	r31, 0x02	; 2
    18ce:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    18d0:	eb ed       	ldi	r30, 0xDB	; 219
    18d2:	f1 e0       	ldi	r31, 0x01	; 1
    18d4:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    18d6:	e8 2f       	mov	r30, r24
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	ee 0f       	add	r30, r30
    18dc:	ff 1f       	adc	r31, r31
    18de:	e4 5b       	subi	r30, 0xB4	; 180
    18e0:	fd 4f       	sbci	r31, 0xFD	; 253
    18e2:	a5 91       	lpm	r26, Z+
    18e4:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    18e6:	ec 91       	ld	r30, X
    18e8:	e9 23       	and	r30, r25
    18ea:	19 f4       	brne	.+6      	; 0x18f2 <_ZN8SPIClass5beginEv+0x36>
      digitalWrite(SS, HIGH);
    18ec:	61 e0       	ldi	r22, 0x01	; 1
    18ee:	85 e3       	ldi	r24, 0x35	; 53
    18f0:	4b d9       	rcall	.-3434   	; 0xb88 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    18f2:	61 e0       	ldi	r22, 0x01	; 1
    18f4:	85 e3       	ldi	r24, 0x35	; 53
    18f6:	0c d9       	rcall	.-3560   	; 0xb10 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    18f8:	8c b5       	in	r24, 0x2c	; 44
    18fa:	80 61       	ori	r24, 0x10	; 16
    18fc:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    18fe:	8c b5       	in	r24, 0x2c	; 44
    1900:	80 64       	ori	r24, 0x40	; 64
    1902:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    1904:	61 e0       	ldi	r22, 0x01	; 1
    1906:	84 e3       	ldi	r24, 0x34	; 52
    1908:	03 d9       	rcall	.-3578   	; 0xb10 <pinMode>
    pinMode(MOSI, OUTPUT);
    190a:	61 e0       	ldi	r22, 0x01	; 1
    190c:	83 e3       	ldi	r24, 0x33	; 51
    190e:	00 d9       	rcall	.-3584   	; 0xb10 <pinMode>
    1910:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <_ZN8SPIClass11initializedE>
  }
  initialized++; // reference count
    1914:	8f 5f       	subi	r24, 0xFF	; 255
    1916:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <_ZN8SPIClass11initializedE>
    191a:	cf bf       	out	0x3f, r28	; 63
  SREG = sreg;
    191c:	cf 91       	pop	r28
}
    191e:	08 95       	ret

00001920 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1920:	08 95       	ret

00001922 <__divmodhi4>:
    1922:	97 fb       	bst	r25, 7
    1924:	07 2e       	mov	r0, r23
    1926:	16 f4       	brtc	.+4      	; 0x192c <__divmodhi4+0xa>
    1928:	00 94       	com	r0
    192a:	06 d0       	rcall	.+12     	; 0x1938 <__divmodhi4_neg1>
    192c:	77 fd       	sbrc	r23, 7
    192e:	08 d0       	rcall	.+16     	; 0x1940 <__divmodhi4_neg2>
    1930:	35 d0       	rcall	.+106    	; 0x199c <__udivmodhi4>
    1932:	07 fc       	sbrc	r0, 7
    1934:	05 d0       	rcall	.+10     	; 0x1940 <__divmodhi4_neg2>
    1936:	3e f4       	brtc	.+14     	; 0x1946 <__divmodhi4_exit>

00001938 <__divmodhi4_neg1>:
    1938:	90 95       	com	r25
    193a:	81 95       	neg	r24
    193c:	9f 4f       	sbci	r25, 0xFF	; 255
    193e:	08 95       	ret

00001940 <__divmodhi4_neg2>:
    1940:	70 95       	com	r23
    1942:	61 95       	neg	r22
    1944:	7f 4f       	sbci	r23, 0xFF	; 255

00001946 <__divmodhi4_exit>:
    1946:	08 95       	ret

00001948 <__udivmodsi4>:
    1948:	a1 e2       	ldi	r26, 0x21	; 33
    194a:	1a 2e       	mov	r1, r26
    194c:	aa 1b       	sub	r26, r26
    194e:	bb 1b       	sub	r27, r27
    1950:	fd 01       	movw	r30, r26
    1952:	0d c0       	rjmp	.+26     	; 0x196e <__udivmodsi4_ep>

00001954 <__udivmodsi4_loop>:
    1954:	aa 1f       	adc	r26, r26
    1956:	bb 1f       	adc	r27, r27
    1958:	ee 1f       	adc	r30, r30
    195a:	ff 1f       	adc	r31, r31
    195c:	a2 17       	cp	r26, r18
    195e:	b3 07       	cpc	r27, r19
    1960:	e4 07       	cpc	r30, r20
    1962:	f5 07       	cpc	r31, r21
    1964:	20 f0       	brcs	.+8      	; 0x196e <__udivmodsi4_ep>
    1966:	a2 1b       	sub	r26, r18
    1968:	b3 0b       	sbc	r27, r19
    196a:	e4 0b       	sbc	r30, r20
    196c:	f5 0b       	sbc	r31, r21

0000196e <__udivmodsi4_ep>:
    196e:	66 1f       	adc	r22, r22
    1970:	77 1f       	adc	r23, r23
    1972:	88 1f       	adc	r24, r24
    1974:	99 1f       	adc	r25, r25
    1976:	1a 94       	dec	r1
    1978:	69 f7       	brne	.-38     	; 0x1954 <__udivmodsi4_loop>
    197a:	60 95       	com	r22
    197c:	70 95       	com	r23
    197e:	80 95       	com	r24
    1980:	90 95       	com	r25
    1982:	9b 01       	movw	r18, r22
    1984:	ac 01       	movw	r20, r24
    1986:	bd 01       	movw	r22, r26
    1988:	cf 01       	movw	r24, r30
    198a:	08 95       	ret

0000198c <__tablejump2__>:
    198c:	ee 0f       	add	r30, r30
    198e:	ff 1f       	adc	r31, r31
    1990:	88 1f       	adc	r24, r24
    1992:	8b bf       	out	0x3b, r24	; 59
    1994:	07 90       	elpm	r0, Z+
    1996:	f6 91       	elpm	r31, Z
    1998:	e0 2d       	mov	r30, r0
    199a:	19 94       	eijmp

0000199c <__udivmodhi4>:
    199c:	aa 1b       	sub	r26, r26
    199e:	bb 1b       	sub	r27, r27
    19a0:	51 e1       	ldi	r21, 0x11	; 17
    19a2:	07 c0       	rjmp	.+14     	; 0x19b2 <__udivmodhi4_ep>

000019a4 <__udivmodhi4_loop>:
    19a4:	aa 1f       	adc	r26, r26
    19a6:	bb 1f       	adc	r27, r27
    19a8:	a6 17       	cp	r26, r22
    19aa:	b7 07       	cpc	r27, r23
    19ac:	10 f0       	brcs	.+4      	; 0x19b2 <__udivmodhi4_ep>
    19ae:	a6 1b       	sub	r26, r22
    19b0:	b7 0b       	sbc	r27, r23

000019b2 <__udivmodhi4_ep>:
    19b2:	88 1f       	adc	r24, r24
    19b4:	99 1f       	adc	r25, r25
    19b6:	5a 95       	dec	r21
    19b8:	a9 f7       	brne	.-22     	; 0x19a4 <__udivmodhi4_loop>
    19ba:	80 95       	com	r24
    19bc:	90 95       	com	r25
    19be:	bc 01       	movw	r22, r24
    19c0:	cd 01       	movw	r24, r26
    19c2:	08 95       	ret

000019c4 <do_rand>:
    19c4:	8f 92       	push	r8
    19c6:	9f 92       	push	r9
    19c8:	af 92       	push	r10
    19ca:	bf 92       	push	r11
    19cc:	cf 92       	push	r12
    19ce:	df 92       	push	r13
    19d0:	ef 92       	push	r14
    19d2:	ff 92       	push	r15
    19d4:	cf 93       	push	r28
    19d6:	df 93       	push	r29
    19d8:	ec 01       	movw	r28, r24
    19da:	68 81       	ld	r22, Y
    19dc:	79 81       	ldd	r23, Y+1	; 0x01
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	9b 81       	ldd	r25, Y+3	; 0x03
    19e2:	61 15       	cp	r22, r1
    19e4:	71 05       	cpc	r23, r1
    19e6:	81 05       	cpc	r24, r1
    19e8:	91 05       	cpc	r25, r1
    19ea:	21 f4       	brne	.+8      	; 0x19f4 <do_rand+0x30>
    19ec:	64 e2       	ldi	r22, 0x24	; 36
    19ee:	79 ed       	ldi	r23, 0xD9	; 217
    19f0:	8b e5       	ldi	r24, 0x5B	; 91
    19f2:	97 e0       	ldi	r25, 0x07	; 7
    19f4:	2d e1       	ldi	r18, 0x1D	; 29
    19f6:	33 ef       	ldi	r19, 0xF3	; 243
    19f8:	41 e0       	ldi	r20, 0x01	; 1
    19fa:	50 e0       	ldi	r21, 0x00	; 0
    19fc:	41 d0       	rcall	.+130    	; 0x1a80 <__divmodsi4>
    19fe:	49 01       	movw	r8, r18
    1a00:	5a 01       	movw	r10, r20
    1a02:	9b 01       	movw	r18, r22
    1a04:	ac 01       	movw	r20, r24
    1a06:	a7 ea       	ldi	r26, 0xA7	; 167
    1a08:	b1 e4       	ldi	r27, 0x41	; 65
    1a0a:	56 d0       	rcall	.+172    	; 0x1ab8 <__muluhisi3>
    1a0c:	6b 01       	movw	r12, r22
    1a0e:	7c 01       	movw	r14, r24
    1a10:	ac ee       	ldi	r26, 0xEC	; 236
    1a12:	b4 ef       	ldi	r27, 0xF4	; 244
    1a14:	a5 01       	movw	r20, r10
    1a16:	94 01       	movw	r18, r8
    1a18:	5b d0       	rcall	.+182    	; 0x1ad0 <__mulohisi3>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	8c 0d       	add	r24, r12
    1a20:	9d 1d       	adc	r25, r13
    1a22:	ae 1d       	adc	r26, r14
    1a24:	bf 1d       	adc	r27, r15
    1a26:	b7 ff       	sbrs	r27, 7
    1a28:	03 c0       	rjmp	.+6      	; 0x1a30 <do_rand+0x6c>
    1a2a:	01 97       	sbiw	r24, 0x01	; 1
    1a2c:	a1 09       	sbc	r26, r1
    1a2e:	b0 48       	sbci	r27, 0x80	; 128
    1a30:	88 83       	st	Y, r24
    1a32:	99 83       	std	Y+1, r25	; 0x01
    1a34:	aa 83       	std	Y+2, r26	; 0x02
    1a36:	bb 83       	std	Y+3, r27	; 0x03
    1a38:	9f 77       	andi	r25, 0x7F	; 127
    1a3a:	df 91       	pop	r29
    1a3c:	cf 91       	pop	r28
    1a3e:	ff 90       	pop	r15
    1a40:	ef 90       	pop	r14
    1a42:	df 90       	pop	r13
    1a44:	cf 90       	pop	r12
    1a46:	bf 90       	pop	r11
    1a48:	af 90       	pop	r10
    1a4a:	9f 90       	pop	r9
    1a4c:	8f 90       	pop	r8
    1a4e:	08 95       	ret

00001a50 <rand_r>:
    1a50:	b9 cf       	rjmp	.-142    	; 0x19c4 <do_rand>

00001a52 <rand>:
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	92 e0       	ldi	r25, 0x02	; 2
    1a56:	b6 cf       	rjmp	.-148    	; 0x19c4 <do_rand>

00001a58 <srand>:
    1a58:	a0 e0       	ldi	r26, 0x00	; 0
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    1a60:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    1a64:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    1a68:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    1a6c:	08 95       	ret

00001a6e <memcpy>:
    1a6e:	fb 01       	movw	r30, r22
    1a70:	dc 01       	movw	r26, r24
    1a72:	02 c0       	rjmp	.+4      	; 0x1a78 <memcpy+0xa>
    1a74:	01 90       	ld	r0, Z+
    1a76:	0d 92       	st	X+, r0
    1a78:	41 50       	subi	r20, 0x01	; 1
    1a7a:	50 40       	sbci	r21, 0x00	; 0
    1a7c:	d8 f7       	brcc	.-10     	; 0x1a74 <memcpy+0x6>
    1a7e:	08 95       	ret

00001a80 <__divmodsi4>:
    1a80:	05 2e       	mov	r0, r21
    1a82:	97 fb       	bst	r25, 7
    1a84:	16 f4       	brtc	.+4      	; 0x1a8a <__divmodsi4+0xa>
    1a86:	00 94       	com	r0
    1a88:	0f d0       	rcall	.+30     	; 0x1aa8 <__negsi2>
    1a8a:	57 fd       	sbrc	r21, 7
    1a8c:	05 d0       	rcall	.+10     	; 0x1a98 <__divmodsi4_neg2>
    1a8e:	5c df       	rcall	.-328    	; 0x1948 <__udivmodsi4>
    1a90:	07 fc       	sbrc	r0, 7
    1a92:	02 d0       	rcall	.+4      	; 0x1a98 <__divmodsi4_neg2>
    1a94:	46 f4       	brtc	.+16     	; 0x1aa6 <__divmodsi4_exit>
    1a96:	08 c0       	rjmp	.+16     	; 0x1aa8 <__negsi2>

00001a98 <__divmodsi4_neg2>:
    1a98:	50 95       	com	r21
    1a9a:	40 95       	com	r20
    1a9c:	30 95       	com	r19
    1a9e:	21 95       	neg	r18
    1aa0:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa2:	4f 4f       	sbci	r20, 0xFF	; 255
    1aa4:	5f 4f       	sbci	r21, 0xFF	; 255

00001aa6 <__divmodsi4_exit>:
    1aa6:	08 95       	ret

00001aa8 <__negsi2>:
    1aa8:	90 95       	com	r25
    1aaa:	80 95       	com	r24
    1aac:	70 95       	com	r23
    1aae:	61 95       	neg	r22
    1ab0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ab4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab6:	08 95       	ret

00001ab8 <__muluhisi3>:
    1ab8:	0f d0       	rcall	.+30     	; 0x1ad8 <__umulhisi3>
    1aba:	a5 9f       	mul	r26, r21
    1abc:	90 0d       	add	r25, r0
    1abe:	b4 9f       	mul	r27, r20
    1ac0:	90 0d       	add	r25, r0
    1ac2:	a4 9f       	mul	r26, r20
    1ac4:	80 0d       	add	r24, r0
    1ac6:	91 1d       	adc	r25, r1
    1ac8:	11 24       	eor	r1, r1
    1aca:	08 95       	ret

00001acc <__mulshisi3>:
    1acc:	b7 ff       	sbrs	r27, 7
    1ace:	f4 cf       	rjmp	.-24     	; 0x1ab8 <__muluhisi3>

00001ad0 <__mulohisi3>:
    1ad0:	f3 df       	rcall	.-26     	; 0x1ab8 <__muluhisi3>
    1ad2:	82 1b       	sub	r24, r18
    1ad4:	93 0b       	sbc	r25, r19
    1ad6:	08 95       	ret

00001ad8 <__umulhisi3>:
    1ad8:	a2 9f       	mul	r26, r18
    1ada:	b0 01       	movw	r22, r0
    1adc:	b3 9f       	mul	r27, r19
    1ade:	c0 01       	movw	r24, r0
    1ae0:	a3 9f       	mul	r26, r19
    1ae2:	70 0d       	add	r23, r0
    1ae4:	81 1d       	adc	r24, r1
    1ae6:	11 24       	eor	r1, r1
    1ae8:	91 1d       	adc	r25, r1
    1aea:	b2 9f       	mul	r27, r18
    1aec:	70 0d       	add	r23, r0
    1aee:	81 1d       	adc	r24, r1
    1af0:	11 24       	eor	r1, r1
    1af2:	91 1d       	adc	r25, r1
    1af4:	08 95       	ret

00001af6 <_exit>:
    1af6:	f8 94       	cli

00001af8 <__stop_program>:
    1af8:	ff cf       	rjmp	.-2      	; 0x1af8 <__stop_program>
