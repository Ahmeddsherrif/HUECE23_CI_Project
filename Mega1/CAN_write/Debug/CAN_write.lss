
CAN_write.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008a  00800200  000020d0  00002164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000054  0080028a  0080028a  000021f2  2**3
                  ALLOC
  3 .comment      00000030  00000000  00000000  000021ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002220  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005c0  00000000  00000000  00002260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c83c  00000000  00000000  00002820  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002adb  00000000  00000000  0000f05c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003771  00000000  00000000  00011b37  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001300  00000000  00000000  000152a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000038db  00000000  00000000  000165a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000077ff  00000000  00000000  00019e83  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005d0  00000000  00000000  00021682  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3a c1       	rjmp	.+628    	; 0x276 <__ctors_end>
       2:	00 00       	nop
       4:	7c c5       	rjmp	.+2808   	; 0xafe <__vector_1>
       6:	00 00       	nop
       8:	a5 c5       	rjmp	.+2890   	; 0xb54 <__vector_2>
       a:	00 00       	nop
       c:	ce c5       	rjmp	.+2972   	; 0xbaa <__vector_3>
       e:	00 00       	nop
      10:	f7 c5       	rjmp	.+3054   	; 0xc00 <__vector_4>
      12:	00 00       	nop
      14:	20 c6       	rjmp	.+3136   	; 0xc56 <__vector_5>
      16:	00 00       	nop
      18:	49 c6       	rjmp	.+3218   	; 0xcac <__vector_6>
      1a:	00 00       	nop
      1c:	72 c6       	rjmp	.+3300   	; 0xd02 <__vector_7>
      1e:	00 00       	nop
      20:	9b c6       	rjmp	.+3382   	; 0xd58 <__vector_8>
      22:	00 00       	nop
      24:	58 c1       	rjmp	.+688    	; 0x2d6 <__bad_interrupt>
      26:	00 00       	nop
      28:	56 c1       	rjmp	.+684    	; 0x2d6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	54 c1       	rjmp	.+680    	; 0x2d6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	52 c1       	rjmp	.+676    	; 0x2d6 <__bad_interrupt>
      32:	00 00       	nop
      34:	50 c1       	rjmp	.+672    	; 0x2d6 <__bad_interrupt>
      36:	00 00       	nop
      38:	4e c1       	rjmp	.+668    	; 0x2d6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4c c1       	rjmp	.+664    	; 0x2d6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4a c1       	rjmp	.+660    	; 0x2d6 <__bad_interrupt>
      42:	00 00       	nop
      44:	48 c1       	rjmp	.+656    	; 0x2d6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c1       	rjmp	.+652    	; 0x2d6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	44 c1       	rjmp	.+648    	; 0x2d6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	42 c1       	rjmp	.+644    	; 0x2d6 <__bad_interrupt>
      52:	00 00       	nop
      54:	40 c1       	rjmp	.+640    	; 0x2d6 <__bad_interrupt>
      56:	00 00       	nop
      58:	3e c1       	rjmp	.+636    	; 0x2d6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a8 c6       	rjmp	.+3408   	; 0xdae <__vector_23>
      5e:	00 00       	nop
      60:	3a c1       	rjmp	.+628    	; 0x2d6 <__bad_interrupt>
      62:	00 00       	nop
      64:	38 c1       	rjmp	.+624    	; 0x2d6 <__bad_interrupt>
      66:	00 00       	nop
      68:	36 c1       	rjmp	.+620    	; 0x2d6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	34 c1       	rjmp	.+616    	; 0x2d6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c1       	rjmp	.+612    	; 0x2d6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c1       	rjmp	.+608    	; 0x2d6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c1       	rjmp	.+604    	; 0x2d6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c1       	rjmp	.+600    	; 0x2d6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c1       	rjmp	.+596    	; 0x2d6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c1       	rjmp	.+592    	; 0x2d6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c1       	rjmp	.+588    	; 0x2d6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	24 c1       	rjmp	.+584    	; 0x2d6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	22 c1       	rjmp	.+580    	; 0x2d6 <__bad_interrupt>
      92:	00 00       	nop
      94:	20 c1       	rjmp	.+576    	; 0x2d6 <__bad_interrupt>
      96:	00 00       	nop
      98:	1e c1       	rjmp	.+572    	; 0x2d6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	1c c1       	rjmp	.+568    	; 0x2d6 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	1a c1       	rjmp	.+564    	; 0x2d6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	18 c1       	rjmp	.+560    	; 0x2d6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	16 c1       	rjmp	.+556    	; 0x2d6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	14 c1       	rjmp	.+552    	; 0x2d6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	12 c1       	rjmp	.+548    	; 0x2d6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	10 c1       	rjmp	.+544    	; 0x2d6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0e c1       	rjmp	.+540    	; 0x2d6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c c1       	rjmp	.+536    	; 0x2d6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	0a c1       	rjmp	.+532    	; 0x2d6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	08 c1       	rjmp	.+528    	; 0x2d6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	06 c1       	rjmp	.+524    	; 0x2d6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	04 c1       	rjmp	.+520    	; 0x2d6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	02 c1       	rjmp	.+516    	; 0x2d6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	00 c1       	rjmp	.+512    	; 0x2d6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	fe c0       	rjmp	.+508    	; 0x2d6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	fc c0       	rjmp	.+504    	; 0x2d6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	fa c0       	rjmp	.+500    	; 0x2d6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	59 05       	cpc	r21, r9
      e6:	23 05       	cpc	r18, r3
      e8:	2b 05       	cpc	r18, r11
      ea:	37 05       	cpc	r19, r7
      ec:	44 05       	cpc	r20, r4
      ee:	65 05       	cpc	r22, r5
      f0:	72 05       	cpc	r23, r2
      f2:	38 08       	sbc	r3, r8
      f4:	3b 08       	sbc	r3, r11
      f6:	2a 08       	sbc	r2, r10
      f8:	2e 08       	sbc	r2, r14
      fa:	34 08       	sbc	r3, r4
      fc:	72 08       	sbc	r7, r2
      fe:	3f 08       	sbc	r3, r15
     100:	43 08       	sbc	r4, r3
     102:	49 08       	sbc	r4, r9
     104:	4d 08       	sbc	r4, r13
     106:	51 08       	sbc	r5, r1
     108:	57 08       	sbc	r5, r7
     10a:	5b 08       	sbc	r5, r11
     10c:	5f 08       	sbc	r5, r15
     10e:	72 08       	sbc	r7, r2
     110:	65 08       	sbc	r6, r5
     112:	69 08       	sbc	r6, r9
     114:	6d 08       	sbc	r6, r13
     116:	d7 0a       	sbc	r13, r23
     118:	4b 0a       	sbc	r4, r27
     11a:	db 0a       	sbc	r13, r27
     11c:	4e 0a       	sbc	r4, r30
     11e:	51 0a       	sbc	r5, r17
     120:	55 0a       	sbc	r5, r21
     122:	58 0a       	sbc	r5, r24
     124:	5b 0a       	sbc	r5, r27
     126:	d5 0a       	sbc	r13, r21
     128:	d5 0a       	sbc	r13, r21
     12a:	5e 0a       	sbc	r5, r30
     12c:	61 0a       	sbc	r6, r17
     12e:	64 0a       	sbc	r6, r20
     130:	67 0a       	sbc	r6, r23
     132:	6a 0a       	sbc	r6, r26
     134:	6d 0a       	sbc	r6, r29
     136:	df 0a       	sbc	r13, r31
     138:	7c 0a       	sbc	r7, r28
     13a:	7f 0a       	sbc	r7, r31
     13c:	d5 0a       	sbc	r13, r21
     13e:	83 0a       	sbc	r8, r19
     140:	87 0a       	sbc	r8, r23
     142:	8a 0a       	sbc	r8, r26
     144:	8d 0a       	sbc	r8, r29
     146:	90 0a       	sbc	r9, r16
     148:	93 0a       	sbc	r9, r19
     14a:	c2 0a       	sbc	r12, r18
     14c:	96 0a       	sbc	r9, r22
     14e:	99 0a       	sbc	r9, r25
     150:	9c 0a       	sbc	r9, r28
     152:	9f 0a       	sbc	r9, r31
     154:	a2 0a       	sbc	r10, r18
     156:	e3 0a       	sbc	r14, r19
     158:	b1 0a       	sbc	r11, r17
     15a:	b4 0a       	sbc	r11, r20
     15c:	b8 0a       	sbc	r11, r24
     15e:	bb 0a       	sbc	r11, r27
     160:	d5 0a       	sbc	r13, r21
     162:	bf 0a       	sbc	r11, r31
     164:	c2 0a       	sbc	r12, r18
     166:	c6 0a       	sbc	r12, r22
     168:	ca 0a       	sbc	r12, r26
     16a:	ce 0a       	sbc	r12, r30
     16c:	d2 0a       	sbc	r13, r18

0000016e <__trampolines_end>:
     16e:	00 00       	nop
     170:	0a 0b       	sbc	r16, r26
     172:	02 09       	sbc	r16, r2
     174:	0c 0d       	add	r16, r12
     176:	0e 08       	sbc	r0, r14
     178:	07 03       	mulsu	r16, r23
     17a:	04 01       	movw	r0, r8
	...
     198:	00 00       	nop
     19a:	12 11       	cpse	r17, r2
     19c:	10 00       	.word	0x0010	; ????
	...

000001b4 <digital_pin_to_bit_mask_PGM>:
     1b4:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     1c4:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     1d4:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     1e4:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1f4:	04 08 10 20 40 80                                   ... @.

000001fa <digital_pin_to_port_PGM>:
     1fa:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     20a:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     21a:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     22a:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     23a:	0b 0b 0b 0b 0b 0b                                   ......

00000240 <port_to_output_PGM>:
     240:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     250:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000025a <port_to_mode_PGM>:
     25a:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     26a:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000274 <__ctors_start>:
     274:	4b 02       	muls	r20, r27

00000276 <__ctors_end>:
     276:	11 24       	eor	r1, r1
     278:	1f be       	out	0x3f, r1	; 63
     27a:	cf ef       	ldi	r28, 0xFF	; 255
     27c:	d1 e2       	ldi	r29, 0x21	; 33
     27e:	de bf       	out	0x3e, r29	; 62
     280:	cd bf       	out	0x3d, r28	; 61
     282:	00 e0       	ldi	r16, 0x00	; 0
     284:	0c bf       	out	0x3c, r16	; 60

00000286 <__do_copy_data>:
     286:	12 e0       	ldi	r17, 0x02	; 2
     288:	a0 e0       	ldi	r26, 0x00	; 0
     28a:	b2 e0       	ldi	r27, 0x02	; 2
     28c:	e0 ed       	ldi	r30, 0xD0	; 208
     28e:	f0 e2       	ldi	r31, 0x20	; 32
     290:	00 e0       	ldi	r16, 0x00	; 0
     292:	0b bf       	out	0x3b, r16	; 59
     294:	02 c0       	rjmp	.+4      	; 0x29a <__do_copy_data+0x14>
     296:	07 90       	elpm	r0, Z+
     298:	0d 92       	st	X+, r0
     29a:	aa 38       	cpi	r26, 0x8A	; 138
     29c:	b1 07       	cpc	r27, r17
     29e:	d9 f7       	brne	.-10     	; 0x296 <__do_copy_data+0x10>

000002a0 <__do_clear_bss>:
     2a0:	22 e0       	ldi	r18, 0x02	; 2
     2a2:	aa e8       	ldi	r26, 0x8A	; 138
     2a4:	b2 e0       	ldi	r27, 0x02	; 2
     2a6:	01 c0       	rjmp	.+2      	; 0x2aa <.do_clear_bss_start>

000002a8 <.do_clear_bss_loop>:
     2a8:	1d 92       	st	X+, r1

000002aa <.do_clear_bss_start>:
     2aa:	ae 3d       	cpi	r26, 0xDE	; 222
     2ac:	b2 07       	cpc	r27, r18
     2ae:	e1 f7       	brne	.-8      	; 0x2a8 <.do_clear_bss_loop>

000002b0 <__do_global_ctors>:
     2b0:	11 e0       	ldi	r17, 0x01	; 1
     2b2:	cb e3       	ldi	r28, 0x3B	; 59
     2b4:	d1 e0       	ldi	r29, 0x01	; 1
     2b6:	00 e0       	ldi	r16, 0x00	; 0
     2b8:	06 c0       	rjmp	.+12     	; 0x2c6 <__do_global_ctors+0x16>
     2ba:	21 97       	sbiw	r28, 0x01	; 1
     2bc:	01 09       	sbc	r16, r1
     2be:	80 2f       	mov	r24, r16
     2c0:	fe 01       	movw	r30, r28
     2c2:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <__tablejump2__>
     2c6:	ca 33       	cpi	r28, 0x3A	; 58
     2c8:	d1 07       	cpc	r29, r17
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	08 07       	cpc	r16, r24
     2ce:	a9 f7       	brne	.-22     	; 0x2ba <__do_global_ctors+0xa>
     2d0:	f8 d2       	rcall	.+1520   	; 0x8c2 <main>
     2d2:	0c 94 66 10 	jmp	0x20cc	; 0x20cc <_exit>

000002d6 <__bad_interrupt>:
     2d6:	94 ce       	rjmp	.-728    	; 0x0 <__vectors>

000002d8 <_Z6getBTNv>:
	BTN_LEFT_HANDLER,
	BTN_SELECT_HANDLER
};


void getBTN(){
     2d8:	0f 93       	push	r16
     2da:	1f 93       	push	r17
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	0a e0       	ldi	r16, 0x0A	; 10
     2e2:	10 e0       	ldi	r17, 0x00	; 0
	
	int temp = 0;
     2e4:	c0 e0       	ldi	r28, 0x00	; 0
     2e6:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i=0; i<10; i++){
		temp += analogRead(0);
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	83 d6       	rcall	.+3334   	; 0xff2 <analogRead>
     2ec:	c8 0f       	add	r28, r24
     2ee:	d9 1f       	adc	r29, r25
     2f0:	01 50       	subi	r16, 0x01	; 1
     2f2:	11 09       	sbc	r17, r1


void getBTN(){
	
	int temp = 0;
	for(int i=0; i<10; i++){
     2f4:	c9 f7       	brne	.-14     	; 0x2e8 <_Z6getBTNv+0x10>
		temp += analogRead(0);
	}
	
	int analogReading = temp / 10.0;
     2f6:	be 01       	movw	r22, r28
     2f8:	dd 0f       	add	r29, r29
     2fa:	88 0b       	sbc	r24, r24
     2fc:	99 0b       	sbc	r25, r25
     2fe:	54 d2       	rcall	.+1192   	; 0x7a8 <__floatsisf>
     300:	20 e0       	ldi	r18, 0x00	; 0
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	40 e2       	ldi	r20, 0x20	; 32
     306:	51 e4       	ldi	r21, 0x41	; 65
     308:	b4 d1       	rcall	.+872    	; 0x672 <__divsf3>
     30a:	1b d2       	rcall	.+1078   	; 0x742 <__fixsfsi>

	if(analogReading <= BTN_RIGHT_VALUE_MAX){
     30c:	63 33       	cpi	r22, 0x33	; 51
     30e:	71 05       	cpc	r23, r1
     310:	2c f4       	brge	.+10     	; 0x31c <_Z6getBTNv+0x44>
		ptrFunc[BTN_LEFT]();
	}
	else{
		/* return error */
	}
     312:	df 91       	pop	r29
     314:	cf 91       	pop	r28
     316:	1f 91       	pop	r17
	}
	
	int analogReading = temp / 10.0;

	if(analogReading <= BTN_RIGHT_VALUE_MAX){
		ptrFunc[BTN_RIGHT]();
     318:	0f 91       	pop	r16
     31a:	b1 c0       	rjmp	.+354    	; 0x47e <_Z17BTN_right_handlerv>
	}
	else if(analogReading <= BTN_UP_VALUE_MAX && analogReading >= BTN_UP_VALUE_MIN){
     31c:	9b 01       	movw	r18, r22
     31e:	21 53       	subi	r18, 0x31	; 49
     320:	31 09       	sbc	r19, r1
     322:	25 36       	cpi	r18, 0x65	; 101
     324:	31 05       	cpc	r19, r1
		ptrFunc[BTN_LEFT]();
	}
	else{
		/* return error */
	}
     326:	28 f4       	brcc	.+10     	; 0x332 <_Z6getBTNv+0x5a>
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	1f 91       	pop	r17

	if(analogReading <= BTN_RIGHT_VALUE_MAX){
		ptrFunc[BTN_RIGHT]();
	}
	else if(analogReading <= BTN_UP_VALUE_MAX && analogReading >= BTN_UP_VALUE_MIN){
		ptrFunc[BTN_UP]();
     32e:	0f 91       	pop	r16
     330:	9e c0       	rjmp	.+316    	; 0x46e <_Z14BTN_up_handlerv>
	}
	else if(analogReading <= BTN_DOWN_VALUE_MAX && analogReading >= BTN_DOWN_VALUE_MIN){
     332:	9b 01       	movw	r18, r22
     334:	2e 5c       	subi	r18, 0xCE	; 206
     336:	31 09       	sbc	r19, r1
     338:	25 36       	cpi	r18, 0x65	; 101
     33a:	31 05       	cpc	r19, r1
		ptrFunc[BTN_LEFT]();
	}
	else{
		/* return error */
	}
     33c:	28 f4       	brcc	.+10     	; 0x348 <_Z6getBTNv+0x70>
     33e:	df 91       	pop	r29
     340:	cf 91       	pop	r28
     342:	1f 91       	pop	r17
	}
	else if(analogReading <= BTN_UP_VALUE_MAX && analogReading >= BTN_UP_VALUE_MIN){
		ptrFunc[BTN_UP]();
	}
	else if(analogReading <= BTN_DOWN_VALUE_MAX && analogReading >= BTN_DOWN_VALUE_MIN){
		ptrFunc[BTN_DOWN]();
     344:	0f 91       	pop	r16
     346:	97 c0       	rjmp	.+302    	; 0x476 <_Z16BTN_down_handlerv>
	}
	else if(analogReading <= BTN_SELECT_VALUE_MAX && analogReading >= BTN_SELECT_VALUE_MIN){
     348:	9b 01       	movw	r18, r22
     34a:	2e 54       	subi	r18, 0x4E	; 78
     34c:	32 40       	sbci	r19, 0x02	; 2
     34e:	25 36       	cpi	r18, 0x65	; 101
     350:	31 05       	cpc	r19, r1
		ptrFunc[BTN_LEFT]();
	}
	else{
		/* return error */
	}
     352:	28 f4       	brcc	.+10     	; 0x35e <_Z6getBTNv+0x86>
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	1f 91       	pop	r17
	}
	else if(analogReading <= BTN_DOWN_VALUE_MAX && analogReading >= BTN_DOWN_VALUE_MIN){
		ptrFunc[BTN_DOWN]();
	}
	else if(analogReading <= BTN_SELECT_VALUE_MAX && analogReading >= BTN_SELECT_VALUE_MIN){
		ptrFunc[BTN_SELECT]();
     35a:	0f 91       	pop	r16
     35c:	94 c0       	rjmp	.+296    	; 0x486 <_Z18BTN_select_handlerv>
	}
	
	else if(analogReading <= BTN_LEFT_VALUE_MAX && analogReading >= BTN_LEFT_VALUE_MIN){
     35e:	68 56       	subi	r22, 0x68	; 104
     360:	71 40       	sbci	r23, 0x01	; 1
     362:	65 36       	cpi	r22, 0x65	; 101
     364:	71 05       	cpc	r23, r1
		ptrFunc[BTN_LEFT]();
	}
	else{
		/* return error */
	}
     366:	28 f4       	brcc	.+10     	; 0x372 <_Z6getBTNv+0x9a>
     368:	df 91       	pop	r29
     36a:	cf 91       	pop	r28
     36c:	1f 91       	pop	r17
	else if(analogReading <= BTN_SELECT_VALUE_MAX && analogReading >= BTN_SELECT_VALUE_MIN){
		ptrFunc[BTN_SELECT]();
	}
	
	else if(analogReading <= BTN_LEFT_VALUE_MAX && analogReading >= BTN_LEFT_VALUE_MIN){
		ptrFunc[BTN_LEFT]();
     36e:	0f 91       	pop	r16
     370:	7a c0       	rjmp	.+244    	; 0x466 <_Z16BTN_left_handlerv>
	}
	else{
		/* return error */
	}
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	1f 91       	pop	r17
     378:	0f 91       	pop	r16
     37a:	08 95       	ret

0000037c <_Z17canFrameRecieivedv>:
	}
}


void canFrameRecieived(){
	if(mcp2515.readMessage(&responseFrame) == MCP2515::ERROR_OK && responseFrame.can_id == CAN_MSG_RESPONSE_ID){
     37c:	60 ea       	ldi	r22, 0xA0	; 160
     37e:	72 e0       	ldi	r23, 0x02	; 2
     380:	81 eb       	ldi	r24, 0xB1	; 177
     382:	92 e0       	ldi	r25, 0x02	; 2
     384:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <_ZN7MCP251511readMessageEP9can_frame>
     388:	81 11       	cpse	r24, r1
     38a:	17 c0       	rjmp	.+46     	; 0x3ba <_Z17canFrameRecieivedv+0x3e>
     38c:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <responseFrame>
     390:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <responseFrame+0x1>
     394:	a0 91 a2 02 	lds	r26, 0x02A2	; 0x8002a2 <responseFrame+0x2>
     398:	b0 91 a3 02 	lds	r27, 0x02A3	; 0x8002a3 <responseFrame+0x3>
     39c:	40 97       	sbiw	r24, 0x10	; 16
     39e:	a1 05       	cpc	r26, r1
     3a0:	b1 05       	cpc	r27, r1
     3a2:	59 f4       	brne	.+22     	; 0x3ba <_Z17canFrameRecieivedv+0x3e>
		switch(responseFrame.data[1]){
     3a4:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <responseFrame+0x9>
     3a8:	81 30       	cpi	r24, 0x01	; 1
     3aa:	19 f4       	brne	.+6      	; 0x3b2 <_Z17canFrameRecieivedv+0x36>
			case RESPONSE_START:{
				mainEvent = EVENT_START_VOTE;
				break;
			}
			case RESPONSE_STOP:{
				mainEvent = EVENT_STOP_VOTE;
     3ac:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <mainEvent>
			default:{
				
			}
		}
	}
}
     3b0:	08 95       	ret
}


void canFrameRecieived(){
	if(mcp2515.readMessage(&responseFrame) == MCP2515::ERROR_OK && responseFrame.can_id == CAN_MSG_RESPONSE_ID){
		switch(responseFrame.data[1]){
     3b2:	82 30       	cpi	r24, 0x02	; 2
     3b4:	11 f4       	brne	.+4      	; 0x3ba <_Z17canFrameRecieivedv+0x3e>
			case RESPONSE_START:{
				mainEvent = EVENT_START_VOTE;
				break;
			}
			case RESPONSE_STOP:{
				mainEvent = EVENT_STOP_VOTE;
     3b6:	83 e0       	ldi	r24, 0x03	; 3
     3b8:	f9 cf       	rjmp	.-14     	; 0x3ac <_Z17canFrameRecieivedv+0x30>
     3ba:	08 95       	ret

000003bc <setup>:




void setup() {
	mainState = STATE_IDLE;
     3bc:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <mainState>
	mainEvent = EVENT_IDLE;
     3c0:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <mainEvent>
	
	stateEntry = true;
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <stateEntry>
	stateExit = false;
     3ca:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <__data_end>
	
	srand(analogRead(ADC_RANDOM_GENERATOR_CHANNEL));
     3ce:	82 e0       	ldi	r24, 0x02	; 2
     3d0:	10 d6       	rcall	.+3104   	; 0xff2 <analogRead>
     3d2:	0e 94 17 10 	call	0x202e	; 0x202e <srand>
	deviceID = rand() % 0xFF;
     3d6:	0e 94 14 10 	call	0x2028	; 0x2028 <rand>
     3da:	6f ef       	ldi	r22, 0xFF	; 255
     3dc:	70 e0       	ldi	r23, 0x00	; 0
     3de:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__divmodhi4>
     3e2:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <deviceID>
	
	lcd.begin(LCD_COLUMNS, LCD_ROWS);
     3e6:	20 e0       	ldi	r18, 0x00	; 0
     3e8:	42 e0       	ldi	r20, 0x02	; 2
     3ea:	60 e1       	ldi	r22, 0x10	; 16
     3ec:	88 eb       	ldi	r24, 0xB8	; 184
     3ee:	92 e0       	ldi	r25, 0x02	; 2
     3f0:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <_ZN13LiquidCrystal5beginEhhh>
	lcd.clear();
     3f4:	88 eb       	ldi	r24, 0xB8	; 184
     3f6:	92 e0       	ldi	r25, 0x02	; 2
     3f8:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <_ZN13LiquidCrystal5clearEv>
	
	mcp2515.reset();
     3fc:	81 eb       	ldi	r24, 0xB1	; 177
     3fe:	92 e0       	ldi	r25, 0x02	; 2
     400:	0e 94 c3 0b 	call	0x1786	; 0x1786 <_ZN7MCP25155resetEv>
	mcp2515.setBitrate(CAN_125KBPS);
     404:	6b e0       	ldi	r22, 0x0B	; 11
     406:	81 eb       	ldi	r24, 0xB1	; 177
     408:	92 e0       	ldi	r25, 0x02	; 2
     40a:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <_ZN7MCP251510setBitrateE9CAN_SPEED>
	mcp2515.setNormalMode();
     40e:	81 eb       	ldi	r24, 0xB1	; 177
     410:	92 e0       	ldi	r25, 0x02	; 2
     412:	0e 94 2c 0a 	call	0x1458	; 0x1458 <_ZN7MCP251513setNormalModeEv>
	
	pinMode(IRQ_PIN, INPUT);
     416:	60 e0       	ldi	r22, 0x00	; 0
     418:	85 e3       	ldi	r24, 0x35	; 53
     41a:	65 d6       	rcall	.+3274   	; 0x10e6 <pinMode>
	attachInterrupt(IRQ_NUMBER, canFrameRecieived, FALLING);
     41c:	42 e0       	ldi	r20, 0x02	; 2
     41e:	50 e0       	ldi	r21, 0x00	; 0
     420:	6e eb       	ldi	r22, 0xBE	; 190
     422:	71 e0       	ldi	r23, 0x01	; 1
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	f7 d2       	rcall	.+1518   	; 0xa16 <attachInterrupt>
	
	lcd.setCursor(0,0);
     428:	40 e0       	ldi	r20, 0x00	; 0
     42a:	60 e0       	ldi	r22, 0x00	; 0
     42c:	88 eb       	ldi	r24, 0xB8	; 184
     42e:	92 e0       	ldi	r25, 0x02	; 2
     430:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <_ZN13LiquidCrystal9setCursorEhh>
	lcd.print("4.5 Leaders");
     434:	6e e1       	ldi	r22, 0x1E	; 30
     436:	72 e0       	ldi	r23, 0x02	; 2
     438:	88 eb       	ldi	r24, 0xB8	; 184
     43a:	92 e0       	ldi	r25, 0x02	; 2
     43c:	90 d2       	rcall	.+1312   	; 0x95e <_ZN5Print5printEPKc>
	delay(2000);
     43e:	60 ed       	ldi	r22, 0xD0	; 208
     440:	77 e0       	ldi	r23, 0x07	; 7
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	2e d5       	rcall	.+2652   	; 0xea4 <delay>
	lcd.clear();
     448:	88 eb       	ldi	r24, 0xB8	; 184
     44a:	92 e0       	ldi	r25, 0x02	; 2
     44c:	0c 94 7a 0e 	jmp	0x1cf4	; 0x1cf4 <_ZN13LiquidCrystal5clearEv>

00000450 <loop>:
}

void loop() {
	
	switch(mainState){
     450:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <mainState>
     454:	81 30       	cpi	r24, 0x01	; 1
     456:	29 f0       	breq	.+10     	; 0x462 <loop+0x12>
     458:	18 f0       	brcs	.+6      	; 0x460 <loop+0x10>
     45a:	82 30       	cpi	r24, 0x02	; 2
     45c:	19 f0       	breq	.+6      	; 0x464 <loop+0x14>
     45e:	08 95       	ret
		case STATE_IDLE:{
			stateIDLE_handler();
     460:	39 c0       	rjmp	.+114    	; 0x4d4 <_Z17stateIDLE_handlerv>
			break;
		}
		
		case STATE_ACTIVE:{
			stateACTIVE_handler();
     462:	6d c0       	rjmp	.+218    	; 0x53e <_Z19stateACTIVE_handlerv>
			break;
		}
		
		case STATE_VOTED:{
			stateVOTED_handler();
     464:	b5 c0       	rjmp	.+362    	; 0x5d0 <_Z18stateVOTED_handlerv>

00000466 <_Z16BTN_left_handlerv>:
     466:	81 e4       	ldi	r24, 0x41	; 65




void BTN_left_handler(){
	vote = 'A';
     468:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <vote>
     46c:	08 95       	ret

0000046e <_Z14BTN_up_handlerv>:
}

void BTN_up_handler(){
	vote = 'B';
     46e:	82 e4       	ldi	r24, 0x42	; 66
     470:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <vote>
     474:	08 95       	ret

00000476 <_Z16BTN_down_handlerv>:
}

void BTN_down_handler(){
	vote = 'C';
     476:	83 e4       	ldi	r24, 0x43	; 67
     478:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <vote>
     47c:	08 95       	ret

0000047e <_Z17BTN_right_handlerv>:
}

void BTN_right_handler(){
	vote = 'D';
     47e:	84 e4       	ldi	r24, 0x44	; 68
     480:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <vote>
     484:	08 95       	ret

00000486 <_Z18BTN_select_handlerv>:
}

void BTN_select_handler(){
	if(vote != 0){
     486:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <vote>
     48a:	88 23       	and	r24, r24
     48c:	19 f0       	breq	.+6      	; 0x494 <_Z18BTN_select_handlerv+0xe>
		mainEvent = EVENT_DONE_VOTE;
     48e:	82 e0       	ldi	r24, 0x02	; 2
     490:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <mainEvent>
     494:	08 95       	ret

00000496 <_GLOBAL__sub_I_lcd>:
			default:{
				
			}
		}
	}
}
     496:	cf 92       	push	r12
     498:	ef 92       	push	r14
     49a:	0f 93       	push	r16
     49c:	1f 93       	push	r17
﻿#include "Sketch.h"


LiquidCrystal lcd(rs, en, d4, d5, d6, d7);
     49e:	87 e0       	ldi	r24, 0x07	; 7
     4a0:	c8 2e       	mov	r12, r24
     4a2:	96 e0       	ldi	r25, 0x06	; 6
     4a4:	e9 2e       	mov	r14, r25
     4a6:	05 e0       	ldi	r16, 0x05	; 5
     4a8:	24 e0       	ldi	r18, 0x04	; 4
     4aa:	49 e0       	ldi	r20, 0x09	; 9
     4ac:	68 e0       	ldi	r22, 0x08	; 8
     4ae:	88 eb       	ldi	r24, 0xB8	; 184
     4b0:	92 e0       	ldi	r25, 0x02	; 2
     4b2:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <_ZN13LiquidCrystalC1Ehhhhhh>
MCP2515 mcp2515(SS_PIN);
     4b6:	00 e0       	ldi	r16, 0x00	; 0
     4b8:	10 e0       	ldi	r17, 0x00	; 0
     4ba:	20 e8       	ldi	r18, 0x80	; 128
     4bc:	36 e9       	ldi	r19, 0x96	; 150
     4be:	48 e9       	ldi	r20, 0x98	; 152
     4c0:	50 e0       	ldi	r21, 0x00	; 0
     4c2:	61 e3       	ldi	r22, 0x31	; 49
     4c4:	81 eb       	ldi	r24, 0xB1	; 177
     4c6:	92 e0       	ldi	r25, 0x02	; 2
     4c8:	cd d6       	rcall	.+3482   	; 0x1264 <_ZN7MCP2515C1EhmP8SPIClass>
			default:{
				
			}
		}
	}
}
     4ca:	1f 91       	pop	r17
     4cc:	0f 91       	pop	r16
     4ce:	ef 90       	pop	r14
     4d0:	cf 90       	pop	r12
     4d2:	08 95       	ret

000004d4 <_Z17stateIDLE_handlerv>:
 */ 

#include "Sketch.h"

void stateIDLE_handler(){
	if(stateEntry == true){
     4d4:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <stateEntry>
     4d8:	88 23       	and	r24, r24
     4da:	f9 f0       	breq	.+62     	; 0x51a <_Z17stateIDLE_handlerv+0x46>
		lcd.setCursor(0,0);
     4dc:	40 e0       	ldi	r20, 0x00	; 0
     4de:	60 e0       	ldi	r22, 0x00	; 0
     4e0:	88 eb       	ldi	r24, 0xB8	; 184
     4e2:	92 e0       	ldi	r25, 0x02	; 2
     4e4:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <_ZN13LiquidCrystal9setCursorEhh>
		lcd.print("STATE: IDLE");
     4e8:	6a e2       	ldi	r22, 0x2A	; 42
     4ea:	72 e0       	ldi	r23, 0x02	; 2
     4ec:	88 eb       	ldi	r24, 0xB8	; 184
     4ee:	92 e0       	ldi	r25, 0x02	; 2
     4f0:	36 d2       	rcall	.+1132   	; 0x95e <_ZN5Print5printEPKc>
		
		lcd.setCursor(0,1);
     4f2:	41 e0       	ldi	r20, 0x01	; 1
     4f4:	60 e0       	ldi	r22, 0x00	; 0
     4f6:	88 eb       	ldi	r24, 0xB8	; 184
     4f8:	92 e0       	ldi	r25, 0x02	; 2
     4fa:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <_ZN13LiquidCrystal9setCursorEhh>
		lcd.print("Device ID: ");
     4fe:	66 e3       	ldi	r22, 0x36	; 54
     500:	72 e0       	ldi	r23, 0x02	; 2
     502:	88 eb       	ldi	r24, 0xB8	; 184
     504:	92 e0       	ldi	r25, 0x02	; 2
     506:	2b d2       	rcall	.+1110   	; 0x95e <_ZN5Print5printEPKc>
		lcd.print(deviceID);
     508:	4a e0       	ldi	r20, 0x0A	; 10
     50a:	50 e0       	ldi	r21, 0x00	; 0
     50c:	60 91 b0 02 	lds	r22, 0x02B0	; 0x8002b0 <deviceID>
     510:	88 eb       	ldi	r24, 0xB8	; 184
     512:	92 e0       	ldi	r25, 0x02	; 2
     514:	79 d2       	rcall	.+1266   	; 0xa08 <_ZN5Print5printEhi>
		
		vote = 0;
     516:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <vote>
	}
	
	if(mainEvent == EVENT_START_VOTE){
     51a:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <mainEvent>
     51e:	81 30       	cpi	r24, 0x01	; 1
     520:	31 f4       	brne	.+12     	; 0x52e <_Z17stateIDLE_handlerv+0x5a>
		mainEvent = EVENT_IDLE;
     522:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <mainEvent>
		
		mainState = STATE_ACTIVE;
     526:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <mainState>
		stateExit = true;
     52a:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <__data_end>
	}
	
	
	if(stateExit == true){
     52e:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <__data_end>
     532:	88 23       	and	r24, r24
     534:	19 f0       	breq	.+6      	; 0x53c <_Z17stateIDLE_handlerv+0x68>
		stateEntry = true;
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <stateEntry>
     53c:	08 95       	ret

0000053e <_Z19stateACTIVE_handlerv>:
	
}


void stateACTIVE_handler(){
	if(stateEntry == true){
     53e:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <stateEntry>
     542:	88 23       	and	r24, r24
     544:	d9 f0       	breq	.+54     	; 0x57c <_Z19stateACTIVE_handlerv+0x3e>
		lcd.setCursor(0,0);
     546:	40 e0       	ldi	r20, 0x00	; 0
     548:	60 e0       	ldi	r22, 0x00	; 0
     54a:	88 eb       	ldi	r24, 0xB8	; 184
     54c:	92 e0       	ldi	r25, 0x02	; 2
     54e:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <_ZN13LiquidCrystal9setCursorEhh>
		lcd.print("STATE: ACTIVE");
     552:	62 e4       	ldi	r22, 0x42	; 66
     554:	72 e0       	ldi	r23, 0x02	; 2
     556:	88 eb       	ldi	r24, 0xB8	; 184
     558:	92 e0       	ldi	r25, 0x02	; 2
     55a:	01 d2       	rcall	.+1026   	; 0x95e <_ZN5Print5printEPKc>
		
		lcd.setCursor(0,1);
     55c:	41 e0       	ldi	r20, 0x01	; 1
     55e:	60 e0       	ldi	r22, 0x00	; 0
     560:	88 eb       	ldi	r24, 0xB8	; 184
     562:	92 e0       	ldi	r25, 0x02	; 2
     564:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <_ZN13LiquidCrystal9setCursorEhh>
		lcd.print("SELECTION -> ");
     568:	60 e5       	ldi	r22, 0x50	; 80
     56a:	72 e0       	ldi	r23, 0x02	; 2
     56c:	88 eb       	ldi	r24, 0xB8	; 184
     56e:	92 e0       	ldi	r25, 0x02	; 2
     570:	f6 d1       	rcall	.+1004   	; 0x95e <_ZN5Print5printEPKc>
		lcd.print("-");
     572:	6e e5       	ldi	r22, 0x5E	; 94
     574:	72 e0       	ldi	r23, 0x02	; 2
     576:	88 eb       	ldi	r24, 0xB8	; 184
     578:	92 e0       	ldi	r25, 0x02	; 2
     57a:	f1 d1       	rcall	.+994    	; 0x95e <_ZN5Print5printEPKc>
	}
	
	
	lcd.setCursor(13,1);
     57c:	41 e0       	ldi	r20, 0x01	; 1
     57e:	6d e0       	ldi	r22, 0x0D	; 13
     580:	88 eb       	ldi	r24, 0xB8	; 184
     582:	92 e0       	ldi	r25, 0x02	; 2
     584:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <_ZN13LiquidCrystal9setCursorEhh>
	if(vote != 0){
     588:	60 91 8e 02 	lds	r22, 0x028E	; 0x80028e <vote>
     58c:	66 23       	and	r22, r22
     58e:	29 f0       	breq	.+10     	; 0x59a <_Z19stateACTIVE_handlerv+0x5c>
		lcd.print(vote);
     590:	4a e0       	ldi	r20, 0x0A	; 10
     592:	50 e0       	ldi	r21, 0x00	; 0
     594:	88 eb       	ldi	r24, 0xB8	; 184
     596:	92 e0       	ldi	r25, 0x02	; 2
	}
	
	getBTN();
     598:	37 d2       	rcall	.+1134   	; 0xa08 <_ZN5Print5printEhi>
     59a:	9e de       	rcall	.-708    	; 0x2d8 <_Z6getBTNv>
	
	switch(mainEvent){
     59c:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <mainEvent>
     5a0:	82 30       	cpi	r24, 0x02	; 2
     5a2:	39 f0       	breq	.+14     	; 0x5b2 <_Z19stateACTIVE_handlerv+0x74>
     5a4:	83 30       	cpi	r24, 0x03	; 3
     5a6:	61 f4       	brne	.+24     	; 0x5c0 <_Z19stateACTIVE_handlerv+0x82>
		case EVENT_STOP_VOTE:{
			mainEvent = EVENT_IDLE;
     5a8:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <mainEvent>
			
			mainState = STATE_IDLE;
     5ac:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <mainState>
     5b0:	04 c0       	rjmp	.+8      	; 0x5ba <_Z19stateACTIVE_handlerv+0x7c>
			stateExit = true;	
			break;
		}

		case EVENT_DONE_VOTE:{
			mainEvent = EVENT_IDLE;
     5b2:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <mainEvent>
			
			mainState = STATE_VOTED;
     5b6:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <mainState>
			stateExit = true;
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <__data_end>
		default:{
			
		}
	}
	
	if(stateExit == true){
     5c0:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <__data_end>
     5c4:	88 23       	and	r24, r24
     5c6:	19 f0       	breq	.+6      	; 0x5ce <_Z19stateACTIVE_handlerv+0x90>
		stateEntry = true;
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <stateEntry>
     5ce:	08 95       	ret

000005d0 <_Z18stateVOTED_handlerv>:
	}
}

void stateVOTED_handler(){
	if(stateEntry == true){
     5d0:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <stateEntry>
     5d4:	88 23       	and	r24, r24
     5d6:	d1 f1       	breq	.+116    	; 0x64c <_Z18stateVOTED_handlerv+0x7c>
		
		voteFrame.can_id = CAN_MSG_VOTE_ID;
     5d8:	81 e1       	ldi	r24, 0x11	; 17
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	a0 e0       	ldi	r26, 0x00	; 0
     5de:	b0 e0       	ldi	r27, 0x00	; 0
     5e0:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <voteFrame>
     5e4:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <voteFrame+0x1>
     5e8:	a0 93 92 02 	sts	0x0292, r26	; 0x800292 <voteFrame+0x2>
     5ec:	b0 93 93 02 	sts	0x0293, r27	; 0x800293 <voteFrame+0x3>
		voteFrame.can_dlc = CAN_MSG_DLC;
     5f0:	82 e0       	ldi	r24, 0x02	; 2
     5f2:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <voteFrame+0x4>
		voteFrame.data[0] = deviceID;
     5f6:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <deviceID>
     5fa:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <voteFrame+0x8>
		voteFrame.data[1] = vote;
     5fe:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <vote>
     602:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <voteFrame+0x9>
		
		mcp2515.sendMessage(&voteFrame);
     606:	60 e9       	ldi	r22, 0x90	; 144
     608:	72 e0       	ldi	r23, 0x02	; 2
     60a:	81 eb       	ldi	r24, 0xB1	; 177
     60c:	92 e0       	ldi	r25, 0x02	; 2
     60e:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <_ZN7MCP251511sendMessageEPK9can_frame>
		
		lcd.setCursor(0,0);
     612:	40 e0       	ldi	r20, 0x00	; 0
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	88 eb       	ldi	r24, 0xB8	; 184
     618:	92 e0       	ldi	r25, 0x02	; 2
     61a:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <_ZN13LiquidCrystal9setCursorEhh>
		lcd.print("STATE: VOTED");
     61e:	60 e6       	ldi	r22, 0x60	; 96
     620:	72 e0       	ldi	r23, 0x02	; 2
     622:	88 eb       	ldi	r24, 0xB8	; 184
     624:	92 e0       	ldi	r25, 0x02	; 2
     626:	9b d1       	rcall	.+822    	; 0x95e <_ZN5Print5printEPKc>
		
		lcd.setCursor(0,1);
     628:	41 e0       	ldi	r20, 0x01	; 1
     62a:	60 e0       	ldi	r22, 0x00	; 0
     62c:	88 eb       	ldi	r24, 0xB8	; 184
     62e:	92 e0       	ldi	r25, 0x02	; 2
     630:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <_ZN13LiquidCrystal9setCursorEhh>
		lcd.print("SELECTION -> ");
     634:	60 e5       	ldi	r22, 0x50	; 80
     636:	72 e0       	ldi	r23, 0x02	; 2
     638:	88 eb       	ldi	r24, 0xB8	; 184
     63a:	92 e0       	ldi	r25, 0x02	; 2
     63c:	90 d1       	rcall	.+800    	; 0x95e <_ZN5Print5printEPKc>
		lcd.print(vote);
     63e:	4a e0       	ldi	r20, 0x0A	; 10
     640:	50 e0       	ldi	r21, 0x00	; 0
     642:	60 91 8e 02 	lds	r22, 0x028E	; 0x80028e <vote>
     646:	88 eb       	ldi	r24, 0xB8	; 184
     648:	92 e0       	ldi	r25, 0x02	; 2
     64a:	de d1       	rcall	.+956    	; 0xa08 <_ZN5Print5printEhi>
	}
	
	switch(mainEvent){
     64c:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <mainEvent>
     650:	83 30       	cpi	r24, 0x03	; 3
     652:	39 f4       	brne	.+14     	; 0x662 <_Z18stateVOTED_handlerv+0x92>
		case EVENT_STOP_VOTE:{
			mainEvent = EVENT_IDLE;
     654:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <mainEvent>
			stateExit = true;
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <__data_end>
			
			mainState = STATE_IDLE;
     65e:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <mainState>
		default:{
			
		}
	}
	
	if(stateExit == true){
     662:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <__data_end>
     666:	88 23       	and	r24, r24
     668:	19 f0       	breq	.+6      	; 0x670 <_Z18stateVOTED_handlerv+0xa0>
		stateEntry = true;
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <stateEntry>
     670:	08 95       	ret

00000672 <__divsf3>:
     672:	0c d0       	rcall	.+24     	; 0x68c <__divsf3x>
     674:	eb c0       	rjmp	.+470    	; 0x84c <__fp_round>
     676:	e3 d0       	rcall	.+454    	; 0x83e <__fp_pscB>
     678:	40 f0       	brcs	.+16     	; 0x68a <__divsf3+0x18>
     67a:	da d0       	rcall	.+436    	; 0x830 <__fp_pscA>
     67c:	30 f0       	brcs	.+12     	; 0x68a <__divsf3+0x18>
     67e:	21 f4       	brne	.+8      	; 0x688 <__divsf3+0x16>
     680:	5f 3f       	cpi	r21, 0xFF	; 255
     682:	19 f0       	breq	.+6      	; 0x68a <__divsf3+0x18>
     684:	cc c0       	rjmp	.+408    	; 0x81e <__fp_inf>
     686:	51 11       	cpse	r21, r1
     688:	15 c1       	rjmp	.+554    	; 0x8b4 <__fp_szero>
     68a:	cf c0       	rjmp	.+414    	; 0x82a <__fp_nan>

0000068c <__divsf3x>:
     68c:	f0 d0       	rcall	.+480    	; 0x86e <__fp_split3>
     68e:	98 f3       	brcs	.-26     	; 0x676 <__divsf3+0x4>

00000690 <__divsf3_pse>:
     690:	99 23       	and	r25, r25
     692:	c9 f3       	breq	.-14     	; 0x686 <__divsf3+0x14>
     694:	55 23       	and	r21, r21
     696:	b1 f3       	breq	.-20     	; 0x684 <__divsf3+0x12>
     698:	95 1b       	sub	r25, r21
     69a:	55 0b       	sbc	r21, r21
     69c:	bb 27       	eor	r27, r27
     69e:	aa 27       	eor	r26, r26
     6a0:	62 17       	cp	r22, r18
     6a2:	73 07       	cpc	r23, r19
     6a4:	84 07       	cpc	r24, r20
     6a6:	38 f0       	brcs	.+14     	; 0x6b6 <__divsf3_pse+0x26>
     6a8:	9f 5f       	subi	r25, 0xFF	; 255
     6aa:	5f 4f       	sbci	r21, 0xFF	; 255
     6ac:	22 0f       	add	r18, r18
     6ae:	33 1f       	adc	r19, r19
     6b0:	44 1f       	adc	r20, r20
     6b2:	aa 1f       	adc	r26, r26
     6b4:	a9 f3       	breq	.-22     	; 0x6a0 <__divsf3_pse+0x10>
     6b6:	33 d0       	rcall	.+102    	; 0x71e <__divsf3_pse+0x8e>
     6b8:	0e 2e       	mov	r0, r30
     6ba:	3a f0       	brmi	.+14     	; 0x6ca <__divsf3_pse+0x3a>
     6bc:	e0 e8       	ldi	r30, 0x80	; 128
     6be:	30 d0       	rcall	.+96     	; 0x720 <__divsf3_pse+0x90>
     6c0:	91 50       	subi	r25, 0x01	; 1
     6c2:	50 40       	sbci	r21, 0x00	; 0
     6c4:	e6 95       	lsr	r30
     6c6:	00 1c       	adc	r0, r0
     6c8:	ca f7       	brpl	.-14     	; 0x6bc <__divsf3_pse+0x2c>
     6ca:	29 d0       	rcall	.+82     	; 0x71e <__divsf3_pse+0x8e>
     6cc:	fe 2f       	mov	r31, r30
     6ce:	27 d0       	rcall	.+78     	; 0x71e <__divsf3_pse+0x8e>
     6d0:	66 0f       	add	r22, r22
     6d2:	77 1f       	adc	r23, r23
     6d4:	88 1f       	adc	r24, r24
     6d6:	bb 1f       	adc	r27, r27
     6d8:	26 17       	cp	r18, r22
     6da:	37 07       	cpc	r19, r23
     6dc:	48 07       	cpc	r20, r24
     6de:	ab 07       	cpc	r26, r27
     6e0:	b0 e8       	ldi	r27, 0x80	; 128
     6e2:	09 f0       	breq	.+2      	; 0x6e6 <__divsf3_pse+0x56>
     6e4:	bb 0b       	sbc	r27, r27
     6e6:	80 2d       	mov	r24, r0
     6e8:	bf 01       	movw	r22, r30
     6ea:	ff 27       	eor	r31, r31
     6ec:	93 58       	subi	r25, 0x83	; 131
     6ee:	5f 4f       	sbci	r21, 0xFF	; 255
     6f0:	2a f0       	brmi	.+10     	; 0x6fc <__divsf3_pse+0x6c>
     6f2:	9e 3f       	cpi	r25, 0xFE	; 254
     6f4:	51 05       	cpc	r21, r1
     6f6:	68 f0       	brcs	.+26     	; 0x712 <__divsf3_pse+0x82>
     6f8:	92 c0       	rjmp	.+292    	; 0x81e <__fp_inf>
     6fa:	dc c0       	rjmp	.+440    	; 0x8b4 <__fp_szero>
     6fc:	5f 3f       	cpi	r21, 0xFF	; 255
     6fe:	ec f3       	brlt	.-6      	; 0x6fa <__divsf3_pse+0x6a>
     700:	98 3e       	cpi	r25, 0xE8	; 232
     702:	dc f3       	brlt	.-10     	; 0x6fa <__divsf3_pse+0x6a>
     704:	86 95       	lsr	r24
     706:	77 95       	ror	r23
     708:	67 95       	ror	r22
     70a:	b7 95       	ror	r27
     70c:	f7 95       	ror	r31
     70e:	9f 5f       	subi	r25, 0xFF	; 255
     710:	c9 f7       	brne	.-14     	; 0x704 <__divsf3_pse+0x74>
     712:	88 0f       	add	r24, r24
     714:	91 1d       	adc	r25, r1
     716:	96 95       	lsr	r25
     718:	87 95       	ror	r24
     71a:	97 f9       	bld	r25, 7
     71c:	08 95       	ret
     71e:	e1 e0       	ldi	r30, 0x01	; 1
     720:	66 0f       	add	r22, r22
     722:	77 1f       	adc	r23, r23
     724:	88 1f       	adc	r24, r24
     726:	bb 1f       	adc	r27, r27
     728:	62 17       	cp	r22, r18
     72a:	73 07       	cpc	r23, r19
     72c:	84 07       	cpc	r24, r20
     72e:	ba 07       	cpc	r27, r26
     730:	20 f0       	brcs	.+8      	; 0x73a <__divsf3_pse+0xaa>
     732:	62 1b       	sub	r22, r18
     734:	73 0b       	sbc	r23, r19
     736:	84 0b       	sbc	r24, r20
     738:	ba 0b       	sbc	r27, r26
     73a:	ee 1f       	adc	r30, r30
     73c:	88 f7       	brcc	.-30     	; 0x720 <__divsf3_pse+0x90>
     73e:	e0 95       	com	r30
     740:	08 95       	ret

00000742 <__fixsfsi>:
     742:	04 d0       	rcall	.+8      	; 0x74c <__fixunssfsi>
     744:	68 94       	set
     746:	b1 11       	cpse	r27, r1
     748:	b5 c0       	rjmp	.+362    	; 0x8b4 <__fp_szero>
     74a:	08 95       	ret

0000074c <__fixunssfsi>:
     74c:	98 d0       	rcall	.+304    	; 0x87e <__fp_splitA>
     74e:	88 f0       	brcs	.+34     	; 0x772 <__fixunssfsi+0x26>
     750:	9f 57       	subi	r25, 0x7F	; 127
     752:	90 f0       	brcs	.+36     	; 0x778 <__fixunssfsi+0x2c>
     754:	b9 2f       	mov	r27, r25
     756:	99 27       	eor	r25, r25
     758:	b7 51       	subi	r27, 0x17	; 23
     75a:	a0 f0       	brcs	.+40     	; 0x784 <__fixunssfsi+0x38>
     75c:	d1 f0       	breq	.+52     	; 0x792 <__fixunssfsi+0x46>
     75e:	66 0f       	add	r22, r22
     760:	77 1f       	adc	r23, r23
     762:	88 1f       	adc	r24, r24
     764:	99 1f       	adc	r25, r25
     766:	1a f0       	brmi	.+6      	; 0x76e <__fixunssfsi+0x22>
     768:	ba 95       	dec	r27
     76a:	c9 f7       	brne	.-14     	; 0x75e <__fixunssfsi+0x12>
     76c:	12 c0       	rjmp	.+36     	; 0x792 <__fixunssfsi+0x46>
     76e:	b1 30       	cpi	r27, 0x01	; 1
     770:	81 f0       	breq	.+32     	; 0x792 <__fixunssfsi+0x46>
     772:	9f d0       	rcall	.+318    	; 0x8b2 <__fp_zero>
     774:	b1 e0       	ldi	r27, 0x01	; 1
     776:	08 95       	ret
     778:	9c c0       	rjmp	.+312    	; 0x8b2 <__fp_zero>
     77a:	67 2f       	mov	r22, r23
     77c:	78 2f       	mov	r23, r24
     77e:	88 27       	eor	r24, r24
     780:	b8 5f       	subi	r27, 0xF8	; 248
     782:	39 f0       	breq	.+14     	; 0x792 <__fixunssfsi+0x46>
     784:	b9 3f       	cpi	r27, 0xF9	; 249
     786:	cc f3       	brlt	.-14     	; 0x77a <__fixunssfsi+0x2e>
     788:	86 95       	lsr	r24
     78a:	77 95       	ror	r23
     78c:	67 95       	ror	r22
     78e:	b3 95       	inc	r27
     790:	d9 f7       	brne	.-10     	; 0x788 <__fixunssfsi+0x3c>
     792:	3e f4       	brtc	.+14     	; 0x7a2 <__fixunssfsi+0x56>
     794:	90 95       	com	r25
     796:	80 95       	com	r24
     798:	70 95       	com	r23
     79a:	61 95       	neg	r22
     79c:	7f 4f       	sbci	r23, 0xFF	; 255
     79e:	8f 4f       	sbci	r24, 0xFF	; 255
     7a0:	9f 4f       	sbci	r25, 0xFF	; 255
     7a2:	08 95       	ret

000007a4 <__floatunsisf>:
     7a4:	e8 94       	clt
     7a6:	09 c0       	rjmp	.+18     	; 0x7ba <__floatsisf+0x12>

000007a8 <__floatsisf>:
     7a8:	97 fb       	bst	r25, 7
     7aa:	3e f4       	brtc	.+14     	; 0x7ba <__floatsisf+0x12>
     7ac:	90 95       	com	r25
     7ae:	80 95       	com	r24
     7b0:	70 95       	com	r23
     7b2:	61 95       	neg	r22
     7b4:	7f 4f       	sbci	r23, 0xFF	; 255
     7b6:	8f 4f       	sbci	r24, 0xFF	; 255
     7b8:	9f 4f       	sbci	r25, 0xFF	; 255
     7ba:	99 23       	and	r25, r25
     7bc:	a9 f0       	breq	.+42     	; 0x7e8 <__floatsisf+0x40>
     7be:	f9 2f       	mov	r31, r25
     7c0:	96 e9       	ldi	r25, 0x96	; 150
     7c2:	bb 27       	eor	r27, r27
     7c4:	93 95       	inc	r25
     7c6:	f6 95       	lsr	r31
     7c8:	87 95       	ror	r24
     7ca:	77 95       	ror	r23
     7cc:	67 95       	ror	r22
     7ce:	b7 95       	ror	r27
     7d0:	f1 11       	cpse	r31, r1
     7d2:	f8 cf       	rjmp	.-16     	; 0x7c4 <__floatsisf+0x1c>
     7d4:	fa f4       	brpl	.+62     	; 0x814 <__floatsisf+0x6c>
     7d6:	bb 0f       	add	r27, r27
     7d8:	11 f4       	brne	.+4      	; 0x7de <__floatsisf+0x36>
     7da:	60 ff       	sbrs	r22, 0
     7dc:	1b c0       	rjmp	.+54     	; 0x814 <__floatsisf+0x6c>
     7de:	6f 5f       	subi	r22, 0xFF	; 255
     7e0:	7f 4f       	sbci	r23, 0xFF	; 255
     7e2:	8f 4f       	sbci	r24, 0xFF	; 255
     7e4:	9f 4f       	sbci	r25, 0xFF	; 255
     7e6:	16 c0       	rjmp	.+44     	; 0x814 <__floatsisf+0x6c>
     7e8:	88 23       	and	r24, r24
     7ea:	11 f0       	breq	.+4      	; 0x7f0 <__floatsisf+0x48>
     7ec:	96 e9       	ldi	r25, 0x96	; 150
     7ee:	11 c0       	rjmp	.+34     	; 0x812 <__floatsisf+0x6a>
     7f0:	77 23       	and	r23, r23
     7f2:	21 f0       	breq	.+8      	; 0x7fc <__floatsisf+0x54>
     7f4:	9e e8       	ldi	r25, 0x8E	; 142
     7f6:	87 2f       	mov	r24, r23
     7f8:	76 2f       	mov	r23, r22
     7fa:	05 c0       	rjmp	.+10     	; 0x806 <__floatsisf+0x5e>
     7fc:	66 23       	and	r22, r22
     7fe:	71 f0       	breq	.+28     	; 0x81c <__floatsisf+0x74>
     800:	96 e8       	ldi	r25, 0x86	; 134
     802:	86 2f       	mov	r24, r22
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	60 e0       	ldi	r22, 0x00	; 0
     808:	2a f0       	brmi	.+10     	; 0x814 <__floatsisf+0x6c>
     80a:	9a 95       	dec	r25
     80c:	66 0f       	add	r22, r22
     80e:	77 1f       	adc	r23, r23
     810:	88 1f       	adc	r24, r24
     812:	da f7       	brpl	.-10     	; 0x80a <__floatsisf+0x62>
     814:	88 0f       	add	r24, r24
     816:	96 95       	lsr	r25
     818:	87 95       	ror	r24
     81a:	97 f9       	bld	r25, 7
     81c:	08 95       	ret

0000081e <__fp_inf>:
     81e:	97 f9       	bld	r25, 7
     820:	9f 67       	ori	r25, 0x7F	; 127
     822:	80 e8       	ldi	r24, 0x80	; 128
     824:	70 e0       	ldi	r23, 0x00	; 0
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	08 95       	ret

0000082a <__fp_nan>:
     82a:	9f ef       	ldi	r25, 0xFF	; 255
     82c:	80 ec       	ldi	r24, 0xC0	; 192
     82e:	08 95       	ret

00000830 <__fp_pscA>:
     830:	00 24       	eor	r0, r0
     832:	0a 94       	dec	r0
     834:	16 16       	cp	r1, r22
     836:	17 06       	cpc	r1, r23
     838:	18 06       	cpc	r1, r24
     83a:	09 06       	cpc	r0, r25
     83c:	08 95       	ret

0000083e <__fp_pscB>:
     83e:	00 24       	eor	r0, r0
     840:	0a 94       	dec	r0
     842:	12 16       	cp	r1, r18
     844:	13 06       	cpc	r1, r19
     846:	14 06       	cpc	r1, r20
     848:	05 06       	cpc	r0, r21
     84a:	08 95       	ret

0000084c <__fp_round>:
     84c:	09 2e       	mov	r0, r25
     84e:	03 94       	inc	r0
     850:	00 0c       	add	r0, r0
     852:	11 f4       	brne	.+4      	; 0x858 <__fp_round+0xc>
     854:	88 23       	and	r24, r24
     856:	52 f0       	brmi	.+20     	; 0x86c <__fp_round+0x20>
     858:	bb 0f       	add	r27, r27
     85a:	40 f4       	brcc	.+16     	; 0x86c <__fp_round+0x20>
     85c:	bf 2b       	or	r27, r31
     85e:	11 f4       	brne	.+4      	; 0x864 <__fp_round+0x18>
     860:	60 ff       	sbrs	r22, 0
     862:	04 c0       	rjmp	.+8      	; 0x86c <__fp_round+0x20>
     864:	6f 5f       	subi	r22, 0xFF	; 255
     866:	7f 4f       	sbci	r23, 0xFF	; 255
     868:	8f 4f       	sbci	r24, 0xFF	; 255
     86a:	9f 4f       	sbci	r25, 0xFF	; 255
     86c:	08 95       	ret

0000086e <__fp_split3>:
     86e:	57 fd       	sbrc	r21, 7
     870:	90 58       	subi	r25, 0x80	; 128
     872:	44 0f       	add	r20, r20
     874:	55 1f       	adc	r21, r21
     876:	59 f0       	breq	.+22     	; 0x88e <__fp_splitA+0x10>
     878:	5f 3f       	cpi	r21, 0xFF	; 255
     87a:	71 f0       	breq	.+28     	; 0x898 <__fp_splitA+0x1a>
     87c:	47 95       	ror	r20

0000087e <__fp_splitA>:
     87e:	88 0f       	add	r24, r24
     880:	97 fb       	bst	r25, 7
     882:	99 1f       	adc	r25, r25
     884:	61 f0       	breq	.+24     	; 0x89e <__fp_splitA+0x20>
     886:	9f 3f       	cpi	r25, 0xFF	; 255
     888:	79 f0       	breq	.+30     	; 0x8a8 <__fp_splitA+0x2a>
     88a:	87 95       	ror	r24
     88c:	08 95       	ret
     88e:	12 16       	cp	r1, r18
     890:	13 06       	cpc	r1, r19
     892:	14 06       	cpc	r1, r20
     894:	55 1f       	adc	r21, r21
     896:	f2 cf       	rjmp	.-28     	; 0x87c <__fp_split3+0xe>
     898:	46 95       	lsr	r20
     89a:	f1 df       	rcall	.-30     	; 0x87e <__fp_splitA>
     89c:	08 c0       	rjmp	.+16     	; 0x8ae <__fp_splitA+0x30>
     89e:	16 16       	cp	r1, r22
     8a0:	17 06       	cpc	r1, r23
     8a2:	18 06       	cpc	r1, r24
     8a4:	99 1f       	adc	r25, r25
     8a6:	f1 cf       	rjmp	.-30     	; 0x88a <__fp_splitA+0xc>
     8a8:	86 95       	lsr	r24
     8aa:	71 05       	cpc	r23, r1
     8ac:	61 05       	cpc	r22, r1
     8ae:	08 94       	sec
     8b0:	08 95       	ret

000008b2 <__fp_zero>:
     8b2:	e8 94       	clt

000008b4 <__fp_szero>:
     8b4:	bb 27       	eor	r27, r27
     8b6:	66 27       	eor	r22, r22
     8b8:	77 27       	eor	r23, r23
     8ba:	cb 01       	movw	r24, r22
     8bc:	97 f9       	bld	r25, 7
     8be:	08 95       	ret

000008c0 <initVariant>:
     8c0:	08 95       	ret

000008c2 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     8c2:	35 d3       	rcall	.+1642   	; 0xf2e <init>

	initVariant();
     8c4:	fd df       	rcall	.-6      	; 0x8c0 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     8c6:	7a dd       	rcall	.-1292   	; 0x3bc <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     8c8:	c0 e0       	ldi	r28, 0x00	; 0
     8ca:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
     8cc:	c1 dd       	rcall	.-1150   	; 0x450 <loop>
     8ce:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
     8d0:	e9 f3       	breq	.-6      	; 0x8cc <main+0xa>
     8d2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     8d6:	fa cf       	rjmp	.-12     	; 0x8cc <main+0xa>

000008d8 <_ZN5Print17availableForWriteEv>:
     8d8:	80 e0       	ldi	r24, 0x00	; 0
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	08 95       	ret

000008de <_ZN5Print5flushEv>:
     8de:	08 95       	ret

000008e0 <_ZN5Print5writeEPKhj>:
     8e0:	cf 92       	push	r12
     8e2:	df 92       	push	r13
     8e4:	ef 92       	push	r14
     8e6:	ff 92       	push	r15
     8e8:	0f 93       	push	r16
     8ea:	1f 93       	push	r17
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
     8f0:	6c 01       	movw	r12, r24
     8f2:	7a 01       	movw	r14, r20
     8f4:	8b 01       	movw	r16, r22
     8f6:	c0 e0       	ldi	r28, 0x00	; 0
     8f8:	d0 e0       	ldi	r29, 0x00	; 0
     8fa:	ce 15       	cp	r28, r14
     8fc:	df 05       	cpc	r29, r15
     8fe:	81 f0       	breq	.+32     	; 0x920 <_ZN5Print5writeEPKhj+0x40>
     900:	d8 01       	movw	r26, r16
     902:	6d 91       	ld	r22, X+
     904:	8d 01       	movw	r16, r26
     906:	d6 01       	movw	r26, r12
     908:	ed 91       	ld	r30, X+
     90a:	fc 91       	ld	r31, X
     90c:	01 90       	ld	r0, Z+
     90e:	f0 81       	ld	r31, Z
     910:	e0 2d       	mov	r30, r0
     912:	c6 01       	movw	r24, r12
     914:	19 95       	eicall
     916:	89 2b       	or	r24, r25
     918:	11 f0       	breq	.+4      	; 0x91e <_ZN5Print5writeEPKhj+0x3e>
     91a:	21 96       	adiw	r28, 0x01	; 1
     91c:	ee cf       	rjmp	.-36     	; 0x8fa <_ZN5Print5writeEPKhj+0x1a>
     91e:	7e 01       	movw	r14, r28
     920:	c7 01       	movw	r24, r14
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	1f 91       	pop	r17
     928:	0f 91       	pop	r16
     92a:	ff 90       	pop	r15
     92c:	ef 90       	pop	r14
     92e:	df 90       	pop	r13
     930:	cf 90       	pop	r12
     932:	08 95       	ret

00000934 <_ZN5Print5writeEPKc>:
     934:	61 15       	cp	r22, r1
     936:	71 05       	cpc	r23, r1
     938:	79 f0       	breq	.+30     	; 0x958 <_ZN5Print5writeEPKc+0x24>
     93a:	fb 01       	movw	r30, r22
     93c:	01 90       	ld	r0, Z+
     93e:	00 20       	and	r0, r0
     940:	e9 f7       	brne	.-6      	; 0x93c <_ZN5Print5writeEPKc+0x8>
     942:	31 97       	sbiw	r30, 0x01	; 1
     944:	af 01       	movw	r20, r30
     946:	46 1b       	sub	r20, r22
     948:	57 0b       	sbc	r21, r23
     94a:	dc 01       	movw	r26, r24
     94c:	ed 91       	ld	r30, X+
     94e:	fc 91       	ld	r31, X
     950:	02 80       	ldd	r0, Z+2	; 0x02
     952:	f3 81       	ldd	r31, Z+3	; 0x03
     954:	e0 2d       	mov	r30, r0
     956:	19 94       	eijmp
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	08 95       	ret

0000095e <_ZN5Print5printEPKc>:
     95e:	ea cf       	rjmp	.-44     	; 0x934 <_ZN5Print5writeEPKc>

00000960 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
     960:	8f 92       	push	r8
     962:	9f 92       	push	r9
     964:	af 92       	push	r10
     966:	bf 92       	push	r11
     968:	ef 92       	push	r14
     96a:	ff 92       	push	r15
     96c:	0f 93       	push	r16
     96e:	1f 93       	push	r17
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	cd b7       	in	r28, 0x3d	; 61
     976:	de b7       	in	r29, 0x3e	; 62
     978:	a1 97       	sbiw	r28, 0x21	; 33
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	de bf       	out	0x3e, r29	; 62
     980:	0f be       	out	0x3f, r0	; 63
     982:	cd bf       	out	0x3d, r28	; 61
     984:	7c 01       	movw	r14, r24
     986:	fa 01       	movw	r30, r20
     988:	cb 01       	movw	r24, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     98a:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     98c:	22 30       	cpi	r18, 0x02	; 2
     98e:	08 f4       	brcc	.+2      	; 0x992 <_ZN5Print11printNumberEmh+0x32>
     990:	2a e0       	ldi	r18, 0x0A	; 10
     992:	8e 01       	movw	r16, r28
     994:	0f 5d       	subi	r16, 0xDF	; 223
     996:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
     998:	82 2e       	mov	r8, r18
     99a:	91 2c       	mov	r9, r1
     99c:	a1 2c       	mov	r10, r1
     99e:	b1 2c       	mov	r11, r1
     9a0:	bf 01       	movw	r22, r30
     9a2:	a5 01       	movw	r20, r10
     9a4:	94 01       	movw	r18, r8
     9a6:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <__udivmodsi4>
    n /= base;
     9aa:	f9 01       	movw	r30, r18
     9ac:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     9ae:	01 50       	subi	r16, 0x01	; 1
     9b0:	11 09       	sbc	r17, r1
     9b2:	6a 30       	cpi	r22, 0x0A	; 10
     9b4:	10 f4       	brcc	.+4      	; 0x9ba <_ZN5Print11printNumberEmh+0x5a>
     9b6:	60 5d       	subi	r22, 0xD0	; 208
     9b8:	01 c0       	rjmp	.+2      	; 0x9bc <_ZN5Print11printNumberEmh+0x5c>
     9ba:	69 5c       	subi	r22, 0xC9	; 201
     9bc:	d8 01       	movw	r26, r16
     9be:	6c 93       	st	X, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
     9c0:	23 2b       	or	r18, r19
     9c2:	24 2b       	or	r18, r20
     9c4:	25 2b       	or	r18, r21
     9c6:	61 f7       	brne	.-40     	; 0x9a0 <_ZN5Print11printNumberEmh+0x40>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
     9c8:	b8 01       	movw	r22, r16
     9ca:	c7 01       	movw	r24, r14
     9cc:	b3 df       	rcall	.-154    	; 0x934 <_ZN5Print5writeEPKc>
}
     9ce:	a1 96       	adiw	r28, 0x21	; 33
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	f8 94       	cli
     9d4:	de bf       	out	0x3e, r29	; 62
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	cd bf       	out	0x3d, r28	; 61
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	1f 91       	pop	r17
     9e0:	0f 91       	pop	r16
     9e2:	ff 90       	pop	r15
     9e4:	ef 90       	pop	r14
     9e6:	bf 90       	pop	r11
     9e8:	af 90       	pop	r10
     9ea:	9f 90       	pop	r9
     9ec:	8f 90       	pop	r8
     9ee:	08 95       	ret

000009f0 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
     9f0:	21 15       	cp	r18, r1
     9f2:	31 05       	cpc	r19, r1
     9f4:	41 f4       	brne	.+16     	; 0xa06 <_ZN5Print5printEmi+0x16>
     9f6:	dc 01       	movw	r26, r24
     9f8:	ed 91       	ld	r30, X+
     9fa:	fc 91       	ld	r31, X
     9fc:	01 90       	ld	r0, Z+
     9fe:	f0 81       	ld	r31, Z
     a00:	e0 2d       	mov	r30, r0
     a02:	64 2f       	mov	r22, r20
     a04:	19 94       	eijmp
  else return printNumber(n, base);
     a06:	ac cf       	rjmp	.-168    	; 0x960 <_ZN5Print11printNumberEmh>

00000a08 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
     a08:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
     a0a:	46 2f       	mov	r20, r22
     a0c:	50 e0       	ldi	r21, 0x00	; 0
     a0e:	60 e0       	ldi	r22, 0x00	; 0
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	ee cf       	rjmp	.-36     	; 0x9f0 <_ZN5Print5printEmi>

00000a14 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
     a14:	08 95       	ret

00000a16 <attachInterrupt>:
     a16:	88 30       	cpi	r24, 0x08	; 8
     a18:	08 f0       	brcs	.+2      	; 0xa1c <attachInterrupt+0x6>
     a1a:	70 c0       	rjmp	.+224    	; 0xafc <attachInterrupt+0xe6>
     a1c:	a8 2f       	mov	r26, r24
     a1e:	b0 e0       	ldi	r27, 0x00	; 0
     a20:	aa 0f       	add	r26, r26
     a22:	bb 1f       	adc	r27, r27
     a24:	ac 5f       	subi	r26, 0xFC	; 252
     a26:	bd 4f       	sbci	r27, 0xFD	; 253
     a28:	11 96       	adiw	r26, 0x01	; 1
     a2a:	7c 93       	st	X, r23
     a2c:	6e 93       	st	-X, r22
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	fc 01       	movw	r30, r24
     a32:	31 97       	sbiw	r30, 0x01	; 1
     a34:	e7 30       	cpi	r30, 0x07	; 7
     a36:	f1 05       	cpc	r31, r1
     a38:	a0 f5       	brcc	.+104    	; 0xaa2 <attachInterrupt+0x8c>
     a3a:	88 27       	eor	r24, r24
     a3c:	ee 58       	subi	r30, 0x8E	; 142
     a3e:	ff 4f       	sbci	r31, 0xFF	; 255
     a40:	8f 4f       	sbci	r24, 0xFF	; 255
     a42:	0c 94 b1 0f 	jmp	0x1f62	; 0x1f62 <__tablejump2__>
     a46:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
     a4a:	8c 7f       	andi	r24, 0xFC	; 252
     a4c:	48 2b       	or	r20, r24
     a4e:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
     a52:	e8 9a       	sbi	0x1d, 0	; 29
     a54:	08 95       	ret
     a56:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
     a5a:	83 7f       	andi	r24, 0xF3	; 243
     a5c:	44 0f       	add	r20, r20
     a5e:	55 1f       	adc	r21, r21
     a60:	44 0f       	add	r20, r20
     a62:	55 1f       	adc	r21, r21
     a64:	48 2b       	or	r20, r24
     a66:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
     a6a:	e9 9a       	sbi	0x1d, 1	; 29
     a6c:	08 95       	ret
     a6e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
     a72:	8f 7c       	andi	r24, 0xCF	; 207
     a74:	74 e0       	ldi	r23, 0x04	; 4
     a76:	44 0f       	add	r20, r20
     a78:	55 1f       	adc	r21, r21
     a7a:	7a 95       	dec	r23
     a7c:	e1 f7       	brne	.-8      	; 0xa76 <attachInterrupt+0x60>
     a7e:	48 2b       	or	r20, r24
     a80:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
     a84:	ea 9a       	sbi	0x1d, 2	; 29
     a86:	08 95       	ret
     a88:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
     a8c:	8f 73       	andi	r24, 0x3F	; 63
     a8e:	66 e0       	ldi	r22, 0x06	; 6
     a90:	44 0f       	add	r20, r20
     a92:	55 1f       	adc	r21, r21
     a94:	6a 95       	dec	r22
     a96:	e1 f7       	brne	.-8      	; 0xa90 <attachInterrupt+0x7a>
     a98:	48 2b       	or	r20, r24
     a9a:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
     a9e:	eb 9a       	sbi	0x1d, 3	; 29
     aa0:	08 95       	ret
     aa2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
     aa6:	8c 7f       	andi	r24, 0xFC	; 252
     aa8:	48 2b       	or	r20, r24
     aaa:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
     aae:	ec 9a       	sbi	0x1d, 4	; 29
     ab0:	08 95       	ret
     ab2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
     ab6:	83 7f       	andi	r24, 0xF3	; 243
     ab8:	44 0f       	add	r20, r20
     aba:	55 1f       	adc	r21, r21
     abc:	44 0f       	add	r20, r20
     abe:	55 1f       	adc	r21, r21
     ac0:	48 2b       	or	r20, r24
     ac2:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
     ac6:	ed 9a       	sbi	0x1d, 5	; 29
     ac8:	08 95       	ret
     aca:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
     ace:	8f 7c       	andi	r24, 0xCF	; 207
     ad0:	24 e0       	ldi	r18, 0x04	; 4
     ad2:	44 0f       	add	r20, r20
     ad4:	55 1f       	adc	r21, r21
     ad6:	2a 95       	dec	r18
     ad8:	e1 f7       	brne	.-8      	; 0xad2 <attachInterrupt+0xbc>
     ada:	48 2b       	or	r20, r24
     adc:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
     ae0:	ee 9a       	sbi	0x1d, 6	; 29
     ae2:	08 95       	ret
     ae4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
     ae8:	8f 73       	andi	r24, 0x3F	; 63
     aea:	96 e0       	ldi	r25, 0x06	; 6
     aec:	44 0f       	add	r20, r20
     aee:	55 1f       	adc	r21, r21
     af0:	9a 95       	dec	r25
     af2:	e1 f7       	brne	.-8      	; 0xaec <attachInterrupt+0xd6>
     af4:	48 2b       	or	r20, r24
     af6:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x7c006a>
     afa:	ef 9a       	sbi	0x1d, 7	; 29
     afc:	08 95       	ret

00000afe <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#elif defined(EICRA) && defined(EICRB)

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_2)
     afe:	1f 92       	push	r1
     b00:	0f 92       	push	r0
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	0f 92       	push	r0
     b06:	11 24       	eor	r1, r1
     b08:	0b b6       	in	r0, 0x3b	; 59
     b0a:	0f 92       	push	r0
     b0c:	2f 93       	push	r18
     b0e:	3f 93       	push	r19
     b10:	4f 93       	push	r20
     b12:	5f 93       	push	r21
     b14:	6f 93       	push	r22
     b16:	7f 93       	push	r23
     b18:	8f 93       	push	r24
     b1a:	9f 93       	push	r25
     b1c:	af 93       	push	r26
     b1e:	bf 93       	push	r27
     b20:	ef 93       	push	r30
     b22:	ff 93       	push	r31
     b24:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <intFunc+0x4>
     b28:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <intFunc+0x5>
     b2c:	19 95       	eicall
     b2e:	ff 91       	pop	r31
     b30:	ef 91       	pop	r30
     b32:	bf 91       	pop	r27
     b34:	af 91       	pop	r26
     b36:	9f 91       	pop	r25
     b38:	8f 91       	pop	r24
     b3a:	7f 91       	pop	r23
     b3c:	6f 91       	pop	r22
     b3e:	5f 91       	pop	r21
     b40:	4f 91       	pop	r20
     b42:	3f 91       	pop	r19
     b44:	2f 91       	pop	r18
     b46:	0f 90       	pop	r0
     b48:	0b be       	out	0x3b, r0	; 59
     b4a:	0f 90       	pop	r0
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	0f 90       	pop	r0
     b50:	1f 90       	pop	r1
     b52:	18 95       	reti

00000b54 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_3)
     b54:	1f 92       	push	r1
     b56:	0f 92       	push	r0
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	0f 92       	push	r0
     b5c:	11 24       	eor	r1, r1
     b5e:	0b b6       	in	r0, 0x3b	; 59
     b60:	0f 92       	push	r0
     b62:	2f 93       	push	r18
     b64:	3f 93       	push	r19
     b66:	4f 93       	push	r20
     b68:	5f 93       	push	r21
     b6a:	6f 93       	push	r22
     b6c:	7f 93       	push	r23
     b6e:	8f 93       	push	r24
     b70:	9f 93       	push	r25
     b72:	af 93       	push	r26
     b74:	bf 93       	push	r27
     b76:	ef 93       	push	r30
     b78:	ff 93       	push	r31
     b7a:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <intFunc+0x6>
     b7e:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <intFunc+0x7>
     b82:	19 95       	eicall
     b84:	ff 91       	pop	r31
     b86:	ef 91       	pop	r30
     b88:	bf 91       	pop	r27
     b8a:	af 91       	pop	r26
     b8c:	9f 91       	pop	r25
     b8e:	8f 91       	pop	r24
     b90:	7f 91       	pop	r23
     b92:	6f 91       	pop	r22
     b94:	5f 91       	pop	r21
     b96:	4f 91       	pop	r20
     b98:	3f 91       	pop	r19
     b9a:	2f 91       	pop	r18
     b9c:	0f 90       	pop	r0
     b9e:	0b be       	out	0x3b, r0	; 59
     ba0:	0f 90       	pop	r0
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	0f 90       	pop	r0
     ba6:	1f 90       	pop	r1
     ba8:	18 95       	reti

00000baa <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_4)
     baa:	1f 92       	push	r1
     bac:	0f 92       	push	r0
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	0f 92       	push	r0
     bb2:	11 24       	eor	r1, r1
     bb4:	0b b6       	in	r0, 0x3b	; 59
     bb6:	0f 92       	push	r0
     bb8:	2f 93       	push	r18
     bba:	3f 93       	push	r19
     bbc:	4f 93       	push	r20
     bbe:	5f 93       	push	r21
     bc0:	6f 93       	push	r22
     bc2:	7f 93       	push	r23
     bc4:	8f 93       	push	r24
     bc6:	9f 93       	push	r25
     bc8:	af 93       	push	r26
     bca:	bf 93       	push	r27
     bcc:	ef 93       	push	r30
     bce:	ff 93       	push	r31
     bd0:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <intFunc+0x8>
     bd4:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <intFunc+0x9>
     bd8:	19 95       	eicall
     bda:	ff 91       	pop	r31
     bdc:	ef 91       	pop	r30
     bde:	bf 91       	pop	r27
     be0:	af 91       	pop	r26
     be2:	9f 91       	pop	r25
     be4:	8f 91       	pop	r24
     be6:	7f 91       	pop	r23
     be8:	6f 91       	pop	r22
     bea:	5f 91       	pop	r21
     bec:	4f 91       	pop	r20
     bee:	3f 91       	pop	r19
     bf0:	2f 91       	pop	r18
     bf2:	0f 90       	pop	r0
     bf4:	0b be       	out	0x3b, r0	; 59
     bf6:	0f 90       	pop	r0
     bf8:	0f be       	out	0x3f, r0	; 63
     bfa:	0f 90       	pop	r0
     bfc:	1f 90       	pop	r1
     bfe:	18 95       	reti

00000c00 <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_5)
     c00:	1f 92       	push	r1
     c02:	0f 92       	push	r0
     c04:	0f b6       	in	r0, 0x3f	; 63
     c06:	0f 92       	push	r0
     c08:	11 24       	eor	r1, r1
     c0a:	0b b6       	in	r0, 0x3b	; 59
     c0c:	0f 92       	push	r0
     c0e:	2f 93       	push	r18
     c10:	3f 93       	push	r19
     c12:	4f 93       	push	r20
     c14:	5f 93       	push	r21
     c16:	6f 93       	push	r22
     c18:	7f 93       	push	r23
     c1a:	8f 93       	push	r24
     c1c:	9f 93       	push	r25
     c1e:	af 93       	push	r26
     c20:	bf 93       	push	r27
     c22:	ef 93       	push	r30
     c24:	ff 93       	push	r31
     c26:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <intFunc+0xa>
     c2a:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <intFunc+0xb>
     c2e:	19 95       	eicall
     c30:	ff 91       	pop	r31
     c32:	ef 91       	pop	r30
     c34:	bf 91       	pop	r27
     c36:	af 91       	pop	r26
     c38:	9f 91       	pop	r25
     c3a:	8f 91       	pop	r24
     c3c:	7f 91       	pop	r23
     c3e:	6f 91       	pop	r22
     c40:	5f 91       	pop	r21
     c42:	4f 91       	pop	r20
     c44:	3f 91       	pop	r19
     c46:	2f 91       	pop	r18
     c48:	0f 90       	pop	r0
     c4a:	0b be       	out	0x3b, r0	; 59
     c4c:	0f 90       	pop	r0
     c4e:	0f be       	out	0x3f, r0	; 63
     c50:	0f 90       	pop	r0
     c52:	1f 90       	pop	r1
     c54:	18 95       	reti

00000c56 <__vector_5>:
IMPLEMENT_ISR(INT4_vect, EXTERNAL_INT_0)
     c56:	1f 92       	push	r1
     c58:	0f 92       	push	r0
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	0f 92       	push	r0
     c5e:	11 24       	eor	r1, r1
     c60:	0b b6       	in	r0, 0x3b	; 59
     c62:	0f 92       	push	r0
     c64:	2f 93       	push	r18
     c66:	3f 93       	push	r19
     c68:	4f 93       	push	r20
     c6a:	5f 93       	push	r21
     c6c:	6f 93       	push	r22
     c6e:	7f 93       	push	r23
     c70:	8f 93       	push	r24
     c72:	9f 93       	push	r25
     c74:	af 93       	push	r26
     c76:	bf 93       	push	r27
     c78:	ef 93       	push	r30
     c7a:	ff 93       	push	r31
     c7c:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <intFunc>
     c80:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <intFunc+0x1>
     c84:	19 95       	eicall
     c86:	ff 91       	pop	r31
     c88:	ef 91       	pop	r30
     c8a:	bf 91       	pop	r27
     c8c:	af 91       	pop	r26
     c8e:	9f 91       	pop	r25
     c90:	8f 91       	pop	r24
     c92:	7f 91       	pop	r23
     c94:	6f 91       	pop	r22
     c96:	5f 91       	pop	r21
     c98:	4f 91       	pop	r20
     c9a:	3f 91       	pop	r19
     c9c:	2f 91       	pop	r18
     c9e:	0f 90       	pop	r0
     ca0:	0b be       	out	0x3b, r0	; 59
     ca2:	0f 90       	pop	r0
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	0f 90       	pop	r0
     ca8:	1f 90       	pop	r1
     caa:	18 95       	reti

00000cac <__vector_6>:
IMPLEMENT_ISR(INT5_vect, EXTERNAL_INT_1)
     cac:	1f 92       	push	r1
     cae:	0f 92       	push	r0
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	0f 92       	push	r0
     cb4:	11 24       	eor	r1, r1
     cb6:	0b b6       	in	r0, 0x3b	; 59
     cb8:	0f 92       	push	r0
     cba:	2f 93       	push	r18
     cbc:	3f 93       	push	r19
     cbe:	4f 93       	push	r20
     cc0:	5f 93       	push	r21
     cc2:	6f 93       	push	r22
     cc4:	7f 93       	push	r23
     cc6:	8f 93       	push	r24
     cc8:	9f 93       	push	r25
     cca:	af 93       	push	r26
     ccc:	bf 93       	push	r27
     cce:	ef 93       	push	r30
     cd0:	ff 93       	push	r31
     cd2:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <intFunc+0x2>
     cd6:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <intFunc+0x3>
     cda:	19 95       	eicall
     cdc:	ff 91       	pop	r31
     cde:	ef 91       	pop	r30
     ce0:	bf 91       	pop	r27
     ce2:	af 91       	pop	r26
     ce4:	9f 91       	pop	r25
     ce6:	8f 91       	pop	r24
     ce8:	7f 91       	pop	r23
     cea:	6f 91       	pop	r22
     cec:	5f 91       	pop	r21
     cee:	4f 91       	pop	r20
     cf0:	3f 91       	pop	r19
     cf2:	2f 91       	pop	r18
     cf4:	0f 90       	pop	r0
     cf6:	0b be       	out	0x3b, r0	; 59
     cf8:	0f 90       	pop	r0
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	0f 90       	pop	r0
     cfe:	1f 90       	pop	r1
     d00:	18 95       	reti

00000d02 <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
     d02:	1f 92       	push	r1
     d04:	0f 92       	push	r0
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	0f 92       	push	r0
     d0a:	11 24       	eor	r1, r1
     d0c:	0b b6       	in	r0, 0x3b	; 59
     d0e:	0f 92       	push	r0
     d10:	2f 93       	push	r18
     d12:	3f 93       	push	r19
     d14:	4f 93       	push	r20
     d16:	5f 93       	push	r21
     d18:	6f 93       	push	r22
     d1a:	7f 93       	push	r23
     d1c:	8f 93       	push	r24
     d1e:	9f 93       	push	r25
     d20:	af 93       	push	r26
     d22:	bf 93       	push	r27
     d24:	ef 93       	push	r30
     d26:	ff 93       	push	r31
     d28:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <intFunc+0xc>
     d2c:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <intFunc+0xd>
     d30:	19 95       	eicall
     d32:	ff 91       	pop	r31
     d34:	ef 91       	pop	r30
     d36:	bf 91       	pop	r27
     d38:	af 91       	pop	r26
     d3a:	9f 91       	pop	r25
     d3c:	8f 91       	pop	r24
     d3e:	7f 91       	pop	r23
     d40:	6f 91       	pop	r22
     d42:	5f 91       	pop	r21
     d44:	4f 91       	pop	r20
     d46:	3f 91       	pop	r19
     d48:	2f 91       	pop	r18
     d4a:	0f 90       	pop	r0
     d4c:	0b be       	out	0x3b, r0	; 59
     d4e:	0f 90       	pop	r0
     d50:	0f be       	out	0x3f, r0	; 63
     d52:	0f 90       	pop	r0
     d54:	1f 90       	pop	r1
     d56:	18 95       	reti

00000d58 <__vector_8>:
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)
     d58:	1f 92       	push	r1
     d5a:	0f 92       	push	r0
     d5c:	0f b6       	in	r0, 0x3f	; 63
     d5e:	0f 92       	push	r0
     d60:	11 24       	eor	r1, r1
     d62:	0b b6       	in	r0, 0x3b	; 59
     d64:	0f 92       	push	r0
     d66:	2f 93       	push	r18
     d68:	3f 93       	push	r19
     d6a:	4f 93       	push	r20
     d6c:	5f 93       	push	r21
     d6e:	6f 93       	push	r22
     d70:	7f 93       	push	r23
     d72:	8f 93       	push	r24
     d74:	9f 93       	push	r25
     d76:	af 93       	push	r26
     d78:	bf 93       	push	r27
     d7a:	ef 93       	push	r30
     d7c:	ff 93       	push	r31
     d7e:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <intFunc+0xe>
     d82:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <intFunc+0xf>
     d86:	19 95       	eicall
     d88:	ff 91       	pop	r31
     d8a:	ef 91       	pop	r30
     d8c:	bf 91       	pop	r27
     d8e:	af 91       	pop	r26
     d90:	9f 91       	pop	r25
     d92:	8f 91       	pop	r24
     d94:	7f 91       	pop	r23
     d96:	6f 91       	pop	r22
     d98:	5f 91       	pop	r21
     d9a:	4f 91       	pop	r20
     d9c:	3f 91       	pop	r19
     d9e:	2f 91       	pop	r18
     da0:	0f 90       	pop	r0
     da2:	0b be       	out	0x3b, r0	; 59
     da4:	0f 90       	pop	r0
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	0f 90       	pop	r0
     daa:	1f 90       	pop	r1
     dac:	18 95       	reti

00000dae <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     dae:	1f 92       	push	r1
     db0:	0f 92       	push	r0
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	0f 92       	push	r0
     db6:	11 24       	eor	r1, r1
     db8:	2f 93       	push	r18
     dba:	3f 93       	push	r19
     dbc:	8f 93       	push	r24
     dbe:	9f 93       	push	r25
     dc0:	af 93       	push	r26
     dc2:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     dc4:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <timer0_millis>
     dc8:	90 91 d2 02 	lds	r25, 0x02D2	; 0x8002d2 <timer0_millis+0x1>
     dcc:	a0 91 d3 02 	lds	r26, 0x02D3	; 0x8002d3 <timer0_millis+0x2>
     dd0:	b0 91 d4 02 	lds	r27, 0x02D4	; 0x8002d4 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
     dd4:	30 91 d0 02 	lds	r19, 0x02D0	; 0x8002d0 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
     dd8:	23 e0       	ldi	r18, 0x03	; 3
     dda:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     ddc:	2d 37       	cpi	r18, 0x7D	; 125
     dde:	20 f4       	brcc	.+8      	; 0xde8 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     de0:	01 96       	adiw	r24, 0x01	; 1
     de2:	a1 1d       	adc	r26, r1
     de4:	b1 1d       	adc	r27, r1
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     de8:	26 e8       	ldi	r18, 0x86	; 134
     dea:	23 0f       	add	r18, r19
		m += 1;
     dec:	02 96       	adiw	r24, 0x02	; 2
     dee:	a1 1d       	adc	r26, r1
     df0:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     df2:	20 93 d0 02 	sts	0x02D0, r18	; 0x8002d0 <timer0_fract>
	timer0_millis = m;
     df6:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <timer0_millis>
     dfa:	90 93 d2 02 	sts	0x02D2, r25	; 0x8002d2 <timer0_millis+0x1>
     dfe:	a0 93 d3 02 	sts	0x02D3, r26	; 0x8002d3 <timer0_millis+0x2>
     e02:	b0 93 d4 02 	sts	0x02D4, r27	; 0x8002d4 <timer0_millis+0x3>
	timer0_overflow_count++;
     e06:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <timer0_overflow_count>
     e0a:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <timer0_overflow_count+0x1>
     e0e:	a0 91 d7 02 	lds	r26, 0x02D7	; 0x8002d7 <timer0_overflow_count+0x2>
     e12:	b0 91 d8 02 	lds	r27, 0x02D8	; 0x8002d8 <timer0_overflow_count+0x3>
     e16:	01 96       	adiw	r24, 0x01	; 1
     e18:	a1 1d       	adc	r26, r1
     e1a:	b1 1d       	adc	r27, r1
     e1c:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <timer0_overflow_count>
     e20:	90 93 d6 02 	sts	0x02D6, r25	; 0x8002d6 <timer0_overflow_count+0x1>
     e24:	a0 93 d7 02 	sts	0x02D7, r26	; 0x8002d7 <timer0_overflow_count+0x2>
     e28:	b0 93 d8 02 	sts	0x02D8, r27	; 0x8002d8 <timer0_overflow_count+0x3>
}
     e2c:	bf 91       	pop	r27
     e2e:	af 91       	pop	r26
     e30:	9f 91       	pop	r25
     e32:	8f 91       	pop	r24
     e34:	3f 91       	pop	r19
     e36:	2f 91       	pop	r18
     e38:	0f 90       	pop	r0
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	0f 90       	pop	r0
     e3e:	1f 90       	pop	r1
     e40:	18 95       	reti

00000e42 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     e42:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     e44:	f8 94       	cli
	m = timer0_millis;
     e46:	60 91 d1 02 	lds	r22, 0x02D1	; 0x8002d1 <timer0_millis>
     e4a:	70 91 d2 02 	lds	r23, 0x02D2	; 0x8002d2 <timer0_millis+0x1>
     e4e:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <timer0_millis+0x2>
     e52:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <timer0_millis+0x3>
	SREG = oldSREG;
     e56:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     e58:	08 95       	ret

00000e5a <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     e5a:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     e5c:	f8 94       	cli
	m = timer0_overflow_count;
     e5e:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <timer0_overflow_count>
     e62:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <timer0_overflow_count+0x1>
     e66:	a0 91 d7 02 	lds	r26, 0x02D7	; 0x8002d7 <timer0_overflow_count+0x2>
     e6a:	b0 91 d8 02 	lds	r27, 0x02D8	; 0x8002d8 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     e6e:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     e70:	a8 9b       	sbis	0x15, 0	; 21
     e72:	05 c0       	rjmp	.+10     	; 0xe7e <micros+0x24>
     e74:	2f 3f       	cpi	r18, 0xFF	; 255
     e76:	19 f0       	breq	.+6      	; 0xe7e <micros+0x24>
		m++;
     e78:	01 96       	adiw	r24, 0x01	; 1
     e7a:	a1 1d       	adc	r26, r1
     e7c:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     e7e:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     e80:	ba 2f       	mov	r27, r26
     e82:	a9 2f       	mov	r26, r25
     e84:	98 2f       	mov	r25, r24
     e86:	88 27       	eor	r24, r24
     e88:	82 0f       	add	r24, r18
     e8a:	91 1d       	adc	r25, r1
     e8c:	a1 1d       	adc	r26, r1
     e8e:	b1 1d       	adc	r27, r1
     e90:	bc 01       	movw	r22, r24
     e92:	cd 01       	movw	r24, r26
     e94:	42 e0       	ldi	r20, 0x02	; 2
     e96:	66 0f       	add	r22, r22
     e98:	77 1f       	adc	r23, r23
     e9a:	88 1f       	adc	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	4a 95       	dec	r20
     ea0:	d1 f7       	brne	.-12     	; 0xe96 <micros+0x3c>
}
     ea2:	08 95       	ret

00000ea4 <delay>:

void delay(unsigned long ms)
{
     ea4:	8f 92       	push	r8
     ea6:	9f 92       	push	r9
     ea8:	af 92       	push	r10
     eaa:	bf 92       	push	r11
     eac:	cf 92       	push	r12
     eae:	df 92       	push	r13
     eb0:	ef 92       	push	r14
     eb2:	ff 92       	push	r15
     eb4:	6b 01       	movw	r12, r22
     eb6:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     eb8:	d0 df       	rcall	.-96     	; 0xe5a <micros>
     eba:	4b 01       	movw	r8, r22
     ebc:	5c 01       	movw	r10, r24

	while (ms > 0) {
     ebe:	c1 14       	cp	r12, r1
     ec0:	d1 04       	cpc	r13, r1
     ec2:	e1 04       	cpc	r14, r1
     ec4:	f1 04       	cpc	r15, r1
     ec6:	f9 f0       	breq	.+62     	; 0xf06 <delay+0x62>
		yield();
     ec8:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
     ecc:	c6 df       	rcall	.-116    	; 0xe5a <micros>
     ece:	dc 01       	movw	r26, r24
     ed0:	cb 01       	movw	r24, r22
     ed2:	88 19       	sub	r24, r8
     ed4:	99 09       	sbc	r25, r9
     ed6:	aa 09       	sbc	r26, r10
     ed8:	bb 09       	sbc	r27, r11
     eda:	88 3e       	cpi	r24, 0xE8	; 232
     edc:	93 40       	sbci	r25, 0x03	; 3
     ede:	a1 05       	cpc	r26, r1
     ee0:	b1 05       	cpc	r27, r1
     ee2:	68 f3       	brcs	.-38     	; 0xebe <delay+0x1a>
			ms--;
     ee4:	21 e0       	ldi	r18, 0x01	; 1
     ee6:	c2 1a       	sub	r12, r18
     ee8:	d1 08       	sbc	r13, r1
     eea:	e1 08       	sbc	r14, r1
     eec:	f1 08       	sbc	r15, r1
			start += 1000;
     eee:	88 ee       	ldi	r24, 0xE8	; 232
     ef0:	88 0e       	add	r8, r24
     ef2:	83 e0       	ldi	r24, 0x03	; 3
     ef4:	98 1e       	adc	r9, r24
     ef6:	a1 1c       	adc	r10, r1
     ef8:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     efa:	c1 14       	cp	r12, r1
     efc:	d1 04       	cpc	r13, r1
     efe:	e1 04       	cpc	r14, r1
     f00:	f1 04       	cpc	r15, r1
     f02:	21 f7       	brne	.-56     	; 0xecc <delay+0x28>
     f04:	dc cf       	rjmp	.-72     	; 0xebe <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
     f06:	ff 90       	pop	r15
     f08:	ef 90       	pop	r14
     f0a:	df 90       	pop	r13
     f0c:	cf 90       	pop	r12
     f0e:	bf 90       	pop	r11
     f10:	af 90       	pop	r10
     f12:	9f 90       	pop	r9
     f14:	8f 90       	pop	r8
     f16:	08 95       	ret

00000f18 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     f18:	82 30       	cpi	r24, 0x02	; 2
     f1a:	91 05       	cpc	r25, r1
     f1c:	38 f0       	brcs	.+14     	; 0xf2c <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     f26:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     f28:	01 97       	sbiw	r24, 0x01	; 1
     f2a:	f1 f7       	brne	.-4      	; 0xf28 <delayMicroseconds+0x10>
     f2c:	08 95       	ret

00000f2e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     f2e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     f30:	84 b5       	in	r24, 0x24	; 36
     f32:	82 60       	ori	r24, 0x02	; 2
     f34:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     f36:	84 b5       	in	r24, 0x24	; 36
     f38:	81 60       	ori	r24, 0x01	; 1
     f3a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     f3c:	85 b5       	in	r24, 0x25	; 37
     f3e:	82 60       	ori	r24, 0x02	; 2
     f40:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     f42:	85 b5       	in	r24, 0x25	; 37
     f44:	81 60       	ori	r24, 0x01	; 1
     f46:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     f48:	ee e6       	ldi	r30, 0x6E	; 110
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	81 60       	ori	r24, 0x01	; 1
     f50:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     f52:	e1 e8       	ldi	r30, 0x81	; 129
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     f58:	80 81       	ld	r24, Z
     f5a:	82 60       	ori	r24, 0x02	; 2
     f5c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     f5e:	80 81       	ld	r24, Z
     f60:	81 60       	ori	r24, 0x01	; 1
     f62:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     f64:	e0 e8       	ldi	r30, 0x80	; 128
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	81 60       	ori	r24, 0x01	; 1
     f6c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     f6e:	e1 eb       	ldi	r30, 0xB1	; 177
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	84 60       	ori	r24, 0x04	; 4
     f76:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     f78:	e0 eb       	ldi	r30, 0xB0	; 176
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	81 60       	ori	r24, 0x01	; 1
     f80:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
     f82:	e1 e9       	ldi	r30, 0x91	; 145
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	82 60       	ori	r24, 0x02	; 2
     f8a:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
     f8c:	80 81       	ld	r24, Z
     f8e:	81 60       	ori	r24, 0x01	; 1
     f90:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
     f92:	e0 e9       	ldi	r30, 0x90	; 144
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	81 60       	ori	r24, 0x01	; 1
     f9a:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
     f9c:	e1 ea       	ldi	r30, 0xA1	; 161
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	82 60       	ori	r24, 0x02	; 2
     fa4:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
     fa6:	80 81       	ld	r24, Z
     fa8:	81 60       	ori	r24, 0x01	; 1
     faa:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
     fac:	e0 ea       	ldi	r30, 0xA0	; 160
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	81 60       	ori	r24, 0x01	; 1
     fb4:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
     fb6:	e1 e2       	ldi	r30, 0x21	; 33
     fb8:	f1 e0       	ldi	r31, 0x01	; 1
     fba:	80 81       	ld	r24, Z
     fbc:	82 60       	ori	r24, 0x02	; 2
     fbe:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
     fc0:	80 81       	ld	r24, Z
     fc2:	81 60       	ori	r24, 0x01	; 1
     fc4:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
     fc6:	e0 e2       	ldi	r30, 0x20	; 32
     fc8:	f1 e0       	ldi	r31, 0x01	; 1
     fca:	80 81       	ld	r24, Z
     fcc:	81 60       	ori	r24, 0x01	; 1
     fce:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     fd0:	ea e7       	ldi	r30, 0x7A	; 122
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	84 60       	ori	r24, 0x04	; 4
     fd8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     fda:	80 81       	ld	r24, Z
     fdc:	82 60       	ori	r24, 0x02	; 2
     fde:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     fe0:	80 81       	ld	r24, Z
     fe2:	81 60       	ori	r24, 0x01	; 1
     fe4:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     fe6:	80 81       	ld	r24, Z
     fe8:	80 68       	ori	r24, 0x80	; 128
     fea:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     fec:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
     ff0:	08 95       	ret

00000ff2 <analogRead>:
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#endif
	pin = analogPinToChannel(pin);
#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
     ff2:	86 33       	cpi	r24, 0x36	; 54
     ff4:	08 f0       	brcs	.+2      	; 0xff8 <analogRead+0x6>
     ff6:	86 53       	subi	r24, 0x36	; 54
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
     ff8:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
     ffc:	28 2f       	mov	r18, r24
     ffe:	28 70       	andi	r18, 0x08	; 8
    1000:	97 7f       	andi	r25, 0xF7	; 247
    1002:	92 2b       	or	r25, r18
    1004:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    1008:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <analog_reference>
    100c:	90 e4       	ldi	r25, 0x40	; 64
    100e:	29 9f       	mul	r18, r25
    1010:	90 01       	movw	r18, r0
    1012:	11 24       	eor	r1, r1
    1014:	87 70       	andi	r24, 0x07	; 7
    1016:	82 2b       	or	r24, r18
    1018:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    101c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
    1020:	80 64       	ori	r24, 0x40	; 64
    1022:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    1026:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
    102a:	86 fd       	sbrc	r24, 6
    102c:	fc cf       	rjmp	.-8      	; 0x1026 <__EEPROM_REGION_LENGTH__+0x26>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    102e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
	high = ADCH;
    1032:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    1036:	90 e0       	ldi	r25, 0x00	; 0
}
    1038:	92 2b       	or	r25, r18
    103a:	08 95       	ret

0000103c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	fc 01       	movw	r30, r24
    1040:	31 97       	sbiw	r30, 0x01	; 1
    1042:	e2 31       	cpi	r30, 0x12	; 18
    1044:	f1 05       	cpc	r31, r1
    1046:	08 f0       	brcs	.+2      	; 0x104a <turnOffPWM+0xe>
    1048:	4d c0       	rjmp	.+154    	; 0x10e4 <turnOffPWM+0xa8>
    104a:	88 27       	eor	r24, r24
    104c:	e7 58       	subi	r30, 0x87	; 135
    104e:	ff 4f       	sbci	r31, 0xFF	; 255
    1050:	8f 4f       	sbci	r24, 0xFF	; 255
    1052:	87 c7       	rjmp	.+3854   	; 0x1f62 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1054:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    1058:	8f 77       	andi	r24, 0x7F	; 127
    105a:	03 c0       	rjmp	.+6      	; 0x1062 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    105c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    1060:	8f 7d       	andi	r24, 0xDF	; 223
    1062:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    1066:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    1068:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    106c:	87 7f       	andi	r24, 0xF7	; 247
    106e:	f9 cf       	rjmp	.-14     	; 0x1062 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1070:	84 b5       	in	r24, 0x24	; 36
    1072:	8f 77       	andi	r24, 0x7F	; 127
    1074:	02 c0       	rjmp	.+4      	; 0x107a <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1076:	84 b5       	in	r24, 0x24	; 36
    1078:	8f 7d       	andi	r24, 0xDF	; 223
    107a:	84 bd       	out	0x24, r24	; 36
    107c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    107e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    1082:	8f 77       	andi	r24, 0x7F	; 127
    1084:	03 c0       	rjmp	.+6      	; 0x108c <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1086:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    108a:	8f 7d       	andi	r24, 0xDF	; 223
    108c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    1090:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    1092:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    1096:	8f 77       	andi	r24, 0x7F	; 127
    1098:	07 c0       	rjmp	.+14     	; 0x10a8 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    109a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    109e:	8f 7d       	andi	r24, 0xDF	; 223
    10a0:	03 c0       	rjmp	.+6      	; 0x10a8 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    10a2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    10a6:	87 7f       	andi	r24, 0xF7	; 247
    10a8:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    10ac:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    10ae:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    10b2:	8f 77       	andi	r24, 0x7F	; 127
    10b4:	07 c0       	rjmp	.+14     	; 0x10c4 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    10b6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    10ba:	8f 7d       	andi	r24, 0xDF	; 223
    10bc:	03 c0       	rjmp	.+6      	; 0x10c4 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    10be:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    10c2:	87 7f       	andi	r24, 0xF7	; 247
    10c4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    10c8:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    10ca:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    10ce:	8f 77       	andi	r24, 0x7F	; 127
    10d0:	07 c0       	rjmp	.+14     	; 0x10e0 <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    10d2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    10d6:	8f 7d       	andi	r24, 0xDF	; 223
    10d8:	03 c0       	rjmp	.+6      	; 0x10e0 <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    10da:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    10de:	87 7f       	andi	r24, 0xF7	; 247
    10e0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    10e4:	08 95       	ret

000010e6 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    10e6:	cf 93       	push	r28
    10e8:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	fc 01       	movw	r30, r24
    10ee:	ec 54       	subi	r30, 0x4C	; 76
    10f0:	fe 4f       	sbci	r31, 0xFE	; 254
    10f2:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    10f4:	fc 01       	movw	r30, r24
    10f6:	e6 50       	subi	r30, 0x06	; 6
    10f8:	fe 4f       	sbci	r31, 0xFE	; 254
    10fa:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    10fc:	88 23       	and	r24, r24
    10fe:	61 f1       	breq	.+88     	; 0x1158 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	fc 01       	movw	r30, r24
    1108:	e6 5a       	subi	r30, 0xA6	; 166
    110a:	fd 4f       	sbci	r31, 0xFD	; 253
    110c:	c5 91       	lpm	r28, Z+
    110e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1110:	fc 01       	movw	r30, r24
    1112:	e0 5c       	subi	r30, 0xC0	; 192
    1114:	fd 4f       	sbci	r31, 0xFD	; 253
    1116:	a5 91       	lpm	r26, Z+
    1118:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    111a:	61 11       	cpse	r22, r1
    111c:	09 c0       	rjmp	.+18     	; 0x1130 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    111e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1120:	f8 94       	cli
		*reg &= ~bit;
    1122:	88 81       	ld	r24, Y
    1124:	20 95       	com	r18
    1126:	82 23       	and	r24, r18
    1128:	88 83       	st	Y, r24
		*out &= ~bit;
    112a:	ec 91       	ld	r30, X
    112c:	2e 23       	and	r18, r30
    112e:	0b c0       	rjmp	.+22     	; 0x1146 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1130:	62 30       	cpi	r22, 0x02	; 2
    1132:	61 f4       	brne	.+24     	; 0x114c <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1134:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1136:	f8 94       	cli
		*reg &= ~bit;
    1138:	88 81       	ld	r24, Y
    113a:	32 2f       	mov	r19, r18
    113c:	30 95       	com	r19
    113e:	83 23       	and	r24, r19
    1140:	88 83       	st	Y, r24
		*out |= bit;
    1142:	ec 91       	ld	r30, X
    1144:	2e 2b       	or	r18, r30
    1146:	2c 93       	st	X, r18
		SREG = oldSREG;
    1148:	9f bf       	out	0x3f, r25	; 63
    114a:	06 c0       	rjmp	.+12     	; 0x1158 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    114c:	8f b7       	in	r24, 0x3f	; 63
                cli();
    114e:	f8 94       	cli
		*reg |= bit;
    1150:	e8 81       	ld	r30, Y
    1152:	2e 2b       	or	r18, r30
    1154:	28 83       	st	Y, r18
		SREG = oldSREG;
    1156:	8f bf       	out	0x3f, r24	; 63
	}
}
    1158:	df 91       	pop	r29
    115a:	cf 91       	pop	r28
    115c:	08 95       	ret

0000115e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    115e:	1f 93       	push	r17
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	f9 01       	movw	r30, r18
    116a:	e2 59       	subi	r30, 0x92	; 146
    116c:	fe 4f       	sbci	r31, 0xFE	; 254
    116e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1170:	f9 01       	movw	r30, r18
    1172:	ec 54       	subi	r30, 0x4C	; 76
    1174:	fe 4f       	sbci	r31, 0xFE	; 254
    1176:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1178:	f9 01       	movw	r30, r18
    117a:	e6 50       	subi	r30, 0x06	; 6
    117c:	fe 4f       	sbci	r31, 0xFE	; 254
    117e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1180:	cc 23       	and	r28, r28
    1182:	b9 f0       	breq	.+46     	; 0x11b2 <digitalWrite+0x54>
    1184:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1186:	81 11       	cpse	r24, r1
    1188:	59 df       	rcall	.-334    	; 0x103c <turnOffPWM>

	out = portOutputRegister(port);
    118a:	ec 2f       	mov	r30, r28
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	ee 0f       	add	r30, r30
    1190:	ff 1f       	adc	r31, r31
    1192:	e0 5c       	subi	r30, 0xC0	; 192
    1194:	fd 4f       	sbci	r31, 0xFD	; 253
    1196:	a5 91       	lpm	r26, Z+
    1198:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    119a:	9f b7       	in	r25, 0x3f	; 63
	cli();
    119c:	f8 94       	cli

	if (val == LOW) {
    119e:	11 11       	cpse	r17, r1
    11a0:	04 c0       	rjmp	.+8      	; 0x11aa <digitalWrite+0x4c>
		*out &= ~bit;
    11a2:	8c 91       	ld	r24, X
    11a4:	d0 95       	com	r29
    11a6:	d8 23       	and	r29, r24
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <digitalWrite+0x50>
	} else {
		*out |= bit;
    11aa:	ec 91       	ld	r30, X
    11ac:	de 2b       	or	r29, r30
    11ae:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    11b0:	9f bf       	out	0x3f, r25	; 63
}
    11b2:	df 91       	pop	r29
    11b4:	cf 91       	pop	r28
    11b6:	1f 91       	pop	r17
    11b8:	08 95       	ret

000011ba <_ZN8SPIClass8transferEh>:
    modifyRegister(MCP_CANCTRL, CANCTRL_CLKEN, CANCTRL_CLKEN);

    /* Turn off CLKOUT for SOF */
    modifyRegister(MCP_CNF3, CNF3_SOF, 0x00);
    return ERROR_OK;
}
    11ba:	8e bd       	out	0x2e, r24	; 46
    11bc:	00 00       	nop
    11be:	0d b4       	in	r0, 0x2d	; 45
    11c0:	07 fe       	sbrs	r0, 7
    11c2:	fd cf       	rjmp	.-6      	; 0x11be <_ZN8SPIClass8transferEh+0x4>
    11c4:	8e b5       	in	r24, 0x2e	; 46
    11c6:	08 95       	ret

000011c8 <_ZN7MCP25158startSPIEv>:
    11c8:	fc 01       	movw	r30, r24
    11ca:	41 81       	ldd	r20, Z+1	; 0x01
    11cc:	52 81       	ldd	r21, Z+2	; 0x02
    11ce:	63 81       	ldd	r22, Z+3	; 0x03
    11d0:	74 81       	ldd	r23, Z+4	; 0x04
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	92 e1       	ldi	r25, 0x12	; 18
    11d6:	aa e7       	ldi	r26, 0x7A	; 122
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	48 17       	cp	r20, r24
    11de:	59 07       	cpc	r21, r25
    11e0:	6a 07       	cpc	r22, r26
    11e2:	7b 07       	cpc	r23, r27
    11e4:	40 f4       	brcc	.+16     	; 0x11f6 <_ZN7MCP25158startSPIEv+0x2e>
    11e6:	b6 95       	lsr	r27
    11e8:	a7 95       	ror	r26
    11ea:	97 95       	ror	r25
    11ec:	87 95       	ror	r24
    11ee:	2f 5f       	subi	r18, 0xFF	; 255
    11f0:	26 30       	cpi	r18, 0x06	; 6
    11f2:	a1 f7       	brne	.-24     	; 0x11dc <_ZN7MCP25158startSPIEv+0x14>
    11f4:	27 e0       	ldi	r18, 0x07	; 7
    11f6:	91 e0       	ldi	r25, 0x01	; 1
    11f8:	92 27       	eor	r25, r18
    11fa:	29 2f       	mov	r18, r25
    11fc:	20 6a       	ori	r18, 0xA0	; 160
    11fe:	26 95       	lsr	r18
    1200:	91 70       	andi	r25, 0x01	; 1
    1202:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <_ZN8SPIClass13interruptModeE>
    1206:	88 23       	and	r24, r24
    1208:	99 f0       	breq	.+38     	; 0x1230 <_ZN7MCP25158startSPIEv+0x68>
    120a:	8f b7       	in	r24, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	30 91 db 02 	lds	r19, 0x02DB	; 0x8002db <_ZN8SPIClass13interruptModeE>
    1212:	31 30       	cpi	r19, 0x01	; 1
    1214:	59 f4       	brne	.+22     	; 0x122c <_ZN7MCP25158startSPIEv+0x64>
    1216:	3d b3       	in	r19, 0x1d	; 29
    1218:	30 93 d9 02 	sts	0x02D9, r19	; 0x8002d9 <_ZN8SPIClass13interruptSaveE>
    121c:	4d b3       	in	r20, 0x1d	; 29
    121e:	30 91 da 02 	lds	r19, 0x02DA	; 0x8002da <_ZN8SPIClass13interruptMaskE>
    1222:	30 95       	com	r19
    1224:	34 23       	and	r19, r20
    1226:	3d bb       	out	0x1d, r19	; 29
    1228:	8f bf       	out	0x3f, r24	; 63
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <_ZN7MCP25158startSPIEv+0x68>
    122c:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <_ZN8SPIClass13interruptSaveE>
    1230:	2c bd       	out	0x2c, r18	; 44
    1232:	9d bd       	out	0x2d, r25	; 45
    1234:	60 e0       	ldi	r22, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	92 cf       	rjmp	.-220    	; 0x115e <digitalWrite>

0000123a <_ZN7MCP25156endSPIEv>:
    123a:	61 e0       	ldi	r22, 0x01	; 1
    123c:	fc 01       	movw	r30, r24
    123e:	80 81       	ld	r24, Z
    1240:	8e df       	rcall	.-228    	; 0x115e <digitalWrite>
    1242:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <_ZN8SPIClass13interruptModeE>
    1246:	88 23       	and	r24, r24
    1248:	61 f0       	breq	.+24     	; 0x1262 <_ZN7MCP25156endSPIEv+0x28>
    124a:	9f b7       	in	r25, 0x3f	; 63
    124c:	f8 94       	cli
    124e:	20 91 db 02 	lds	r18, 0x02DB	; 0x8002db <_ZN8SPIClass13interruptModeE>
    1252:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <_ZN8SPIClass13interruptSaveE>
    1256:	21 30       	cpi	r18, 0x01	; 1
    1258:	19 f4       	brne	.+6      	; 0x1260 <_ZN7MCP25156endSPIEv+0x26>
    125a:	8d bb       	out	0x1d, r24	; 29
    125c:	9f bf       	out	0x3f, r25	; 63
    125e:	08 95       	ret
    1260:	8f bf       	out	0x3f, r24	; 63
    1262:	08 95       	ret

00001264 <_ZN7MCP2515C1EhmP8SPIClass>:
    1264:	8f 92       	push	r8
    1266:	9f 92       	push	r9
    1268:	af 92       	push	r10
    126a:	bf 92       	push	r11
    126c:	ff 92       	push	r15
    126e:	0f 93       	push	r16
    1270:	1f 93       	push	r17
    1272:	cf 93       	push	r28
    1274:	df 93       	push	r29
    1276:	ec 01       	movw	r28, r24
    1278:	f6 2e       	mov	r15, r22
    127a:	49 01       	movw	r8, r18
    127c:	5a 01       	movw	r10, r20
    127e:	01 15       	cp	r16, r1
    1280:	11 05       	cpc	r17, r1
    1282:	19 f0       	breq	.+6      	; 0x128a <_ZN7MCP2515C1EhmP8SPIClass+0x26>
    1284:	1e 83       	std	Y+6, r17	; 0x06
    1286:	0d 83       	std	Y+5, r16	; 0x05
    1288:	05 c0       	rjmp	.+10     	; 0x1294 <_ZN7MCP2515C1EhmP8SPIClass+0x30>
    128a:	8d ed       	ldi	r24, 0xDD	; 221
    128c:	92 e0       	ldi	r25, 0x02	; 2
    128e:	9e 83       	std	Y+6, r25	; 0x06
    1290:	8d 83       	std	Y+5, r24	; 0x05
    1292:	ff d5       	rcall	.+3070   	; 0x1e92 <_ZN8SPIClass5beginEv>
    1294:	f8 82       	st	Y, r15
    1296:	89 82       	std	Y+1, r8	; 0x01
    1298:	9a 82       	std	Y+2, r9	; 0x02
    129a:	ab 82       	std	Y+3, r10	; 0x03
    129c:	bc 82       	std	Y+4, r11	; 0x04
    129e:	61 e0       	ldi	r22, 0x01	; 1
    12a0:	8f 2d       	mov	r24, r15
    12a2:	21 df       	rcall	.-446    	; 0x10e6 <pinMode>
    12a4:	ce 01       	movw	r24, r28
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	1f 91       	pop	r17
    12ac:	0f 91       	pop	r16
    12ae:	ff 90       	pop	r15
    12b0:	bf 90       	pop	r11
    12b2:	af 90       	pop	r10
    12b4:	9f 90       	pop	r9
    12b6:	8f 90       	pop	r8
    12b8:	c0 cf       	rjmp	.-128    	; 0x123a <_ZN7MCP25156endSPIEv>

000012ba <_ZN7MCP251512readRegisterENS_8REGISTERE>:
    12ba:	1f 93       	push	r17
    12bc:	cf 93       	push	r28
    12be:	df 93       	push	r29
    12c0:	ec 01       	movw	r28, r24
    12c2:	16 2f       	mov	r17, r22
    12c4:	81 df       	rcall	.-254    	; 0x11c8 <_ZN7MCP25158startSPIEv>
    12c6:	83 e0       	ldi	r24, 0x03	; 3
    12c8:	78 df       	rcall	.-272    	; 0x11ba <_ZN8SPIClass8transferEh>
    12ca:	81 2f       	mov	r24, r17
    12cc:	76 df       	rcall	.-276    	; 0x11ba <_ZN8SPIClass8transferEh>
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	74 df       	rcall	.-280    	; 0x11ba <_ZN8SPIClass8transferEh>
    12d2:	18 2f       	mov	r17, r24
    12d4:	ce 01       	movw	r24, r28
    12d6:	b1 df       	rcall	.-158    	; 0x123a <_ZN7MCP25156endSPIEv>
    12d8:	81 2f       	mov	r24, r17
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
    12de:	1f 91       	pop	r17
    12e0:	08 95       	ret

000012e2 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>:
    12e2:	df 92       	push	r13
    12e4:	ef 92       	push	r14
    12e6:	ff 92       	push	r15
    12e8:	0f 93       	push	r16
    12ea:	1f 93       	push	r17
    12ec:	cf 93       	push	r28
    12ee:	df 93       	push	r29
    12f0:	8c 01       	movw	r16, r24
    12f2:	c6 2f       	mov	r28, r22
    12f4:	d4 2e       	mov	r13, r20
    12f6:	e5 2e       	mov	r14, r21
    12f8:	f2 2e       	mov	r15, r18
    12fa:	66 df       	rcall	.-308    	; 0x11c8 <_ZN7MCP25158startSPIEv>
    12fc:	83 e0       	ldi	r24, 0x03	; 3
    12fe:	5d df       	rcall	.-326    	; 0x11ba <_ZN8SPIClass8transferEh>
    1300:	8c 2f       	mov	r24, r28
    1302:	5b df       	rcall	.-330    	; 0x11ba <_ZN8SPIClass8transferEh>
    1304:	cd 2d       	mov	r28, r13
    1306:	de 2d       	mov	r29, r14
    1308:	ce 01       	movw	r24, r28
    130a:	8f 0d       	add	r24, r15
    130c:	91 1d       	adc	r25, r1
    130e:	7c 01       	movw	r14, r24
    1310:	ce 15       	cp	r28, r14
    1312:	df 05       	cpc	r29, r15
    1314:	21 f0       	breq	.+8      	; 0x131e <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x3c>
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	50 df       	rcall	.-352    	; 0x11ba <_ZN8SPIClass8transferEh>
    131a:	89 93       	st	Y+, r24
    131c:	f9 cf       	rjmp	.-14     	; 0x1310 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x2e>
    131e:	c8 01       	movw	r24, r16
    1320:	df 91       	pop	r29
    1322:	cf 91       	pop	r28
    1324:	1f 91       	pop	r17
    1326:	0f 91       	pop	r16
    1328:	ff 90       	pop	r15
    132a:	ef 90       	pop	r14
    132c:	df 90       	pop	r13
    132e:	85 cf       	rjmp	.-246    	; 0x123a <_ZN7MCP25156endSPIEv>

00001330 <_ZN7MCP251511setRegisterENS_8REGISTEREh>:
    1330:	0f 93       	push	r16
    1332:	1f 93       	push	r17
    1334:	cf 93       	push	r28
    1336:	df 93       	push	r29
    1338:	ec 01       	movw	r28, r24
    133a:	06 2f       	mov	r16, r22
    133c:	14 2f       	mov	r17, r20
    133e:	44 df       	rcall	.-376    	; 0x11c8 <_ZN7MCP25158startSPIEv>
    1340:	82 e0       	ldi	r24, 0x02	; 2
    1342:	3b df       	rcall	.-394    	; 0x11ba <_ZN8SPIClass8transferEh>
    1344:	80 2f       	mov	r24, r16
    1346:	39 df       	rcall	.-398    	; 0x11ba <_ZN8SPIClass8transferEh>
    1348:	81 2f       	mov	r24, r17
    134a:	37 df       	rcall	.-402    	; 0x11ba <_ZN8SPIClass8transferEh>
    134c:	ce 01       	movw	r24, r28
    134e:	df 91       	pop	r29
    1350:	cf 91       	pop	r28
    1352:	1f 91       	pop	r17
    1354:	0f 91       	pop	r16
    1356:	71 cf       	rjmp	.-286    	; 0x123a <_ZN7MCP25156endSPIEv>

00001358 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>:
    1358:	df 92       	push	r13
    135a:	ef 92       	push	r14
    135c:	ff 92       	push	r15
    135e:	0f 93       	push	r16
    1360:	1f 93       	push	r17
    1362:	cf 93       	push	r28
    1364:	df 93       	push	r29
    1366:	8c 01       	movw	r16, r24
    1368:	c6 2f       	mov	r28, r22
    136a:	d4 2e       	mov	r13, r20
    136c:	e5 2e       	mov	r14, r21
    136e:	f2 2e       	mov	r15, r18
    1370:	2b df       	rcall	.-426    	; 0x11c8 <_ZN7MCP25158startSPIEv>
    1372:	82 e0       	ldi	r24, 0x02	; 2
    1374:	22 df       	rcall	.-444    	; 0x11ba <_ZN8SPIClass8transferEh>
    1376:	8c 2f       	mov	r24, r28
    1378:	20 df       	rcall	.-448    	; 0x11ba <_ZN8SPIClass8transferEh>
    137a:	cd 2d       	mov	r28, r13
    137c:	de 2d       	mov	r29, r14
    137e:	ce 01       	movw	r24, r28
    1380:	8f 0d       	add	r24, r15
    1382:	91 1d       	adc	r25, r1
    1384:	7c 01       	movw	r14, r24
    1386:	ce 15       	cp	r28, r14
    1388:	df 05       	cpc	r29, r15
    138a:	19 f0       	breq	.+6      	; 0x1392 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x3a>
    138c:	89 91       	ld	r24, Y+
    138e:	15 df       	rcall	.-470    	; 0x11ba <_ZN8SPIClass8transferEh>
    1390:	fa cf       	rjmp	.-12     	; 0x1386 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x2e>
    1392:	c8 01       	movw	r24, r16
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	1f 91       	pop	r17
    139a:	0f 91       	pop	r16
    139c:	ff 90       	pop	r15
    139e:	ef 90       	pop	r14
    13a0:	df 90       	pop	r13
    13a2:	4b cf       	rjmp	.-362    	; 0x123a <_ZN7MCP25156endSPIEv>

000013a4 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>:
    13a4:	ff 92       	push	r15
    13a6:	0f 93       	push	r16
    13a8:	1f 93       	push	r17
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	ec 01       	movw	r28, r24
    13b0:	f6 2e       	mov	r15, r22
    13b2:	04 2f       	mov	r16, r20
    13b4:	12 2f       	mov	r17, r18
    13b6:	08 df       	rcall	.-496    	; 0x11c8 <_ZN7MCP25158startSPIEv>
    13b8:	85 e0       	ldi	r24, 0x05	; 5
    13ba:	ff de       	rcall	.-514    	; 0x11ba <_ZN8SPIClass8transferEh>
    13bc:	8f 2d       	mov	r24, r15
    13be:	fd de       	rcall	.-518    	; 0x11ba <_ZN8SPIClass8transferEh>
    13c0:	80 2f       	mov	r24, r16
    13c2:	fb de       	rcall	.-522    	; 0x11ba <_ZN8SPIClass8transferEh>
    13c4:	81 2f       	mov	r24, r17
    13c6:	f9 de       	rcall	.-526    	; 0x11ba <_ZN8SPIClass8transferEh>
    13c8:	ce 01       	movw	r24, r28
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	1f 91       	pop	r17
    13d0:	0f 91       	pop	r16
    13d2:	ff 90       	pop	r15
    13d4:	32 cf       	rjmp	.-412    	; 0x123a <_ZN7MCP25156endSPIEv>

000013d6 <_ZN7MCP25159getStatusEv>:
    13d6:	1f 93       	push	r17
    13d8:	cf 93       	push	r28
    13da:	df 93       	push	r29
    13dc:	ec 01       	movw	r28, r24
    13de:	f4 de       	rcall	.-536    	; 0x11c8 <_ZN7MCP25158startSPIEv>
    13e0:	80 ea       	ldi	r24, 0xA0	; 160
    13e2:	eb de       	rcall	.-554    	; 0x11ba <_ZN8SPIClass8transferEh>
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	e9 de       	rcall	.-558    	; 0x11ba <_ZN8SPIClass8transferEh>
    13e8:	18 2f       	mov	r17, r24
    13ea:	ce 01       	movw	r24, r28
    13ec:	26 df       	rcall	.-436    	; 0x123a <_ZN7MCP25156endSPIEv>
    13ee:	81 2f       	mov	r24, r17
    13f0:	df 91       	pop	r29
    13f2:	cf 91       	pop	r28
    13f4:	1f 91       	pop	r17
    13f6:	08 95       	ret

000013f8 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>:
    13f8:	cf 92       	push	r12
    13fa:	df 92       	push	r13
    13fc:	ef 92       	push	r14
    13fe:	ff 92       	push	r15
    1400:	1f 93       	push	r17
    1402:	cf 93       	push	r28
    1404:	df 93       	push	r29
    1406:	ec 01       	movw	r28, r24
    1408:	16 2f       	mov	r17, r22
    140a:	26 2f       	mov	r18, r22
    140c:	40 ee       	ldi	r20, 0xE0	; 224
    140e:	6f e0       	ldi	r22, 0x0F	; 15
    1410:	c9 df       	rcall	.-110    	; 0x13a4 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
    1412:	17 dd       	rcall	.-1490   	; 0xe42 <millis>
    1414:	6b 01       	movw	r12, r22
    1416:	7c 01       	movw	r14, r24
    1418:	2a e0       	ldi	r18, 0x0A	; 10
    141a:	c2 0e       	add	r12, r18
    141c:	d1 1c       	adc	r13, r1
    141e:	e1 1c       	adc	r14, r1
    1420:	f1 1c       	adc	r15, r1
    1422:	0f dd       	rcall	.-1506   	; 0xe42 <millis>
    1424:	6c 15       	cp	r22, r12
    1426:	7d 05       	cpc	r23, r13
    1428:	8e 05       	cpc	r24, r14
    142a:	9f 05       	cpc	r25, r15
    142c:	40 f4       	brcc	.+16     	; 0x143e <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x46>
    142e:	6e e0       	ldi	r22, 0x0E	; 14
    1430:	ce 01       	movw	r24, r28
    1432:	43 df       	rcall	.-378    	; 0x12ba <_ZN7MCP251512readRegisterENS_8REGISTERE>
    1434:	80 7e       	andi	r24, 0xE0	; 224
    1436:	18 13       	cpse	r17, r24
    1438:	f4 cf       	rjmp	.-24     	; 0x1422 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x2a>
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	01 c0       	rjmp	.+2      	; 0x1440 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x48>
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	91 e0       	ldi	r25, 0x01	; 1
    1442:	89 27       	eor	r24, r25
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	1f 91       	pop	r17
    144a:	ff 90       	pop	r15
    144c:	ef 90       	pop	r14
    144e:	df 90       	pop	r13
    1450:	cf 90       	pop	r12
    1452:	08 95       	ret

00001454 <_ZN7MCP251513setConfigModeEv>:
    1454:	60 e8       	ldi	r22, 0x80	; 128
    1456:	d0 cf       	rjmp	.-96     	; 0x13f8 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>

00001458 <_ZN7MCP251513setNormalModeEv>:
    1458:	60 e0       	ldi	r22, 0x00	; 0
    145a:	ce cf       	rjmp	.-100    	; 0x13f8 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>

0000145c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>:
    145c:	0f 93       	push	r16
    145e:	1f 93       	push	r17
    1460:	cf 93       	push	r28
    1462:	df 93       	push	r29
    1464:	8c 01       	movw	r16, r24
    1466:	c6 2f       	mov	r28, r22
    1468:	d4 2f       	mov	r29, r20
    146a:	f4 df       	rcall	.-24     	; 0x1454 <_ZN7MCP251513setConfigModeEv>
    146c:	81 11       	cpse	r24, r1
    146e:	ba c0       	rjmp	.+372    	; 0x15e4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x188>
    1470:	d1 30       	cpi	r29, 0x01	; 1
    1472:	b1 f1       	breq	.+108    	; 0x14e0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x84>
    1474:	08 f4       	brcc	.+2      	; 0x1478 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x1c>
    1476:	69 c0       	rjmp	.+210    	; 0x154a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0xee>
    1478:	d2 30       	cpi	r29, 0x02	; 2
    147a:	09 f0       	breq	.+2      	; 0x147e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x22>
    147c:	96 c0       	rjmp	.+300    	; 0x15aa <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14e>
    147e:	8c 2f       	mov	r24, r28
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	80 31       	cpi	r24, 0x10	; 16
    1484:	91 05       	cpc	r25, r1
    1486:	08 f0       	brcs	.+2      	; 0x148a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x2e>
    1488:	90 c0       	rjmp	.+288    	; 0x15aa <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14e>
    148a:	fc 01       	movw	r30, r24
    148c:	88 27       	eor	r24, r24
    148e:	e5 57       	subi	r30, 0x75	; 117
    1490:	ff 4f       	sbci	r31, 0xFF	; 255
    1492:	8f 4f       	sbci	r24, 0xFF	; 255
    1494:	66 c5       	rjmp	.+2764   	; 0x1f62 <__tablejump2__>
    1496:	c7 e8       	ldi	r28, 0x87	; 135
    1498:	df eb       	ldi	r29, 0xBF	; 191
    149a:	33 c0       	rjmp	.+102    	; 0x1502 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0xa6>
    149c:	c4 e8       	ldi	r28, 0x84	; 132
    149e:	d4 ea       	ldi	r29, 0xA4	; 164
    14a0:	8c c0       	rjmp	.+280    	; 0x15ba <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15e>
    14a2:	c5 e8       	ldi	r28, 0x85	; 133
    14a4:	d2 ee       	ldi	r29, 0xE2	; 226
    14a6:	47 e4       	ldi	r20, 0x47	; 71
    14a8:	91 c0       	rjmp	.+290    	; 0x15cc <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
    14aa:	c7 e8       	ldi	r28, 0x87	; 135
    14ac:	df eb       	ldi	r29, 0xBF	; 191
    14ae:	6c c0       	rjmp	.+216    	; 0x1588 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x12c>
    14b0:	c6 e8       	ldi	r28, 0x86	; 134
    14b2:	d4 eb       	ldi	r29, 0xB4	; 180
    14b4:	69 c0       	rjmp	.+210    	; 0x1588 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x12c>
    14b6:	c7 e8       	ldi	r28, 0x87	; 135
    14b8:	df eb       	ldi	r29, 0xBF	; 191
    14ba:	6a c0       	rjmp	.+212    	; 0x1590 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x134>
    14bc:	c6 e8       	ldi	r28, 0x86	; 134
    14be:	d4 eb       	ldi	r29, 0xB4	; 180
    14c0:	67 c0       	rjmp	.+206    	; 0x1590 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x134>
    14c2:	c5 e8       	ldi	r28, 0x85	; 133
    14c4:	d1 eb       	ldi	r29, 0xB1	; 177
    14c6:	64 c0       	rjmp	.+200    	; 0x1590 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x134>
    14c8:	c6 e8       	ldi	r28, 0x86	; 134
    14ca:	d4 eb       	ldi	r29, 0xB4	; 180
    14cc:	69 c0       	rjmp	.+210    	; 0x15a0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x144>
    14ce:	c5 e8       	ldi	r28, 0x85	; 133
    14d0:	d1 eb       	ldi	r29, 0xB1	; 177
    14d2:	66 c0       	rjmp	.+204    	; 0x15a0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x144>
    14d4:	c2 e8       	ldi	r28, 0x82	; 130
    14d6:	d0 e9       	ldi	r29, 0x90	; 144
    14d8:	63 c0       	rjmp	.+198    	; 0x15a0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x144>
    14da:	c0 e8       	ldi	r28, 0x80	; 128
    14dc:	d0 e8       	ldi	r29, 0x80	; 128
    14de:	60 c0       	rjmp	.+192    	; 0x15a0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x144>
    14e0:	8c 2f       	mov	r24, r28
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	80 31       	cpi	r24, 0x10	; 16
    14e6:	91 05       	cpc	r25, r1
    14e8:	08 f0       	brcs	.+2      	; 0x14ec <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x90>
    14ea:	5f c0       	rjmp	.+190    	; 0x15aa <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14e>
    14ec:	fc 01       	movw	r30, r24
    14ee:	88 27       	eor	r24, r24
    14f0:	e5 56       	subi	r30, 0x65	; 101
    14f2:	ff 4f       	sbci	r31, 0xFF	; 255
    14f4:	8f 4f       	sbci	r24, 0xFF	; 255
    14f6:	35 c5       	rjmp	.+2666   	; 0x1f62 <__tablejump2__>
    14f8:	c7 e8       	ldi	r28, 0x87	; 135
    14fa:	df ef       	ldi	r29, 0xFF	; 255
    14fc:	5a c0       	rjmp	.+180    	; 0x15b2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x156>
    14fe:	c7 e8       	ldi	r28, 0x87	; 135
    1500:	df ef       	ldi	r29, 0xFF	; 255
    1502:	4f e0       	ldi	r20, 0x0F	; 15
    1504:	63 c0       	rjmp	.+198    	; 0x15cc <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
    1506:	c5 e8       	ldi	r28, 0x85	; 133
    1508:	d1 ef       	ldi	r29, 0xF1	; 241
    150a:	4e e4       	ldi	r20, 0x4E	; 78
    150c:	5f c0       	rjmp	.+190    	; 0x15cc <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
    150e:	c7 e8       	ldi	r28, 0x87	; 135
    1510:	df ef       	ldi	r29, 0xFF	; 255
    1512:	53 c0       	rjmp	.+166    	; 0x15ba <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15e>
    1514:	c7 e8       	ldi	r28, 0x87	; 135
    1516:	da ef       	ldi	r29, 0xFA	; 250
    1518:	50 c0       	rjmp	.+160    	; 0x15ba <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15e>
    151a:	c7 e8       	ldi	r28, 0x87	; 135
    151c:	df ef       	ldi	r29, 0xFF	; 255
    151e:	34 c0       	rjmp	.+104    	; 0x1588 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x12c>
    1520:	c7 e0       	ldi	r28, 0x07	; 7
    1522:	de eb       	ldi	r29, 0xBE	; 190
    1524:	31 c0       	rjmp	.+98     	; 0x1588 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x12c>
    1526:	c7 e0       	ldi	r28, 0x07	; 7
    1528:	dd ea       	ldi	r29, 0xAD	; 173
    152a:	2e c0       	rjmp	.+92     	; 0x1588 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x12c>
    152c:	c6 e8       	ldi	r28, 0x86	; 134
    152e:	d0 ef       	ldi	r29, 0xF0	; 240
    1530:	2b c0       	rjmp	.+86     	; 0x1588 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x12c>
    1532:	c7 e8       	ldi	r28, 0x87	; 135
    1534:	da ef       	ldi	r29, 0xFA	; 250
    1536:	2c c0       	rjmp	.+88     	; 0x1590 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x134>
    1538:	c5 e8       	ldi	r28, 0x85	; 133
    153a:	d1 ef       	ldi	r29, 0xF1	; 241
    153c:	2d c0       	rjmp	.+90     	; 0x1598 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x13c>
    153e:	c6 e8       	ldi	r28, 0x86	; 134
    1540:	d0 ef       	ldi	r29, 0xF0	; 240
    1542:	2e c0       	rjmp	.+92     	; 0x15a0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x144>
    1544:	c2 e8       	ldi	r28, 0x82	; 130
    1546:	d0 ed       	ldi	r29, 0xD0	; 208
    1548:	2b c0       	rjmp	.+86     	; 0x15a0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x144>
    154a:	8c 2f       	mov	r24, r28
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	fc 01       	movw	r30, r24
    1550:	34 97       	sbiw	r30, 0x04	; 4
    1552:	ec 30       	cpi	r30, 0x0C	; 12
    1554:	f1 05       	cpc	r31, r1
    1556:	48 f5       	brcc	.+82     	; 0x15aa <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14e>
    1558:	88 27       	eor	r24, r24
    155a:	e5 55       	subi	r30, 0x55	; 85
    155c:	ff 4f       	sbci	r31, 0xFF	; 255
    155e:	8f 4f       	sbci	r24, 0xFF	; 255
    1560:	00 c5       	rjmp	.+2560   	; 0x1f62 <__tablejump2__>
    1562:	c7 e8       	ldi	r28, 0x87	; 135
    1564:	df ef       	ldi	r29, 0xFF	; 255
    1566:	02 c0       	rjmp	.+4      	; 0x156c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x110>
    1568:	c7 e8       	ldi	r28, 0x87	; 135
    156a:	da ef       	ldi	r29, 0xFA	; 250
    156c:	49 e0       	ldi	r20, 0x09	; 9
    156e:	2e c0       	rjmp	.+92     	; 0x15cc <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
    1570:	c7 e8       	ldi	r28, 0x87	; 135
    1572:	df ef       	ldi	r29, 0xFF	; 255
    1574:	02 c0       	rjmp	.+4      	; 0x157a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x11e>
    1576:	c7 e8       	ldi	r28, 0x87	; 135
    1578:	de ef       	ldi	r29, 0xFE	; 254
    157a:	44 e0       	ldi	r20, 0x04	; 4
    157c:	27 c0       	rjmp	.+78     	; 0x15cc <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
    157e:	c7 e8       	ldi	r28, 0x87	; 135
    1580:	da ef       	ldi	r29, 0xFA	; 250
    1582:	fb cf       	rjmp	.-10     	; 0x157a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x11e>
    1584:	c7 e8       	ldi	r28, 0x87	; 135
    1586:	da ef       	ldi	r29, 0xFA	; 250
    1588:	43 e0       	ldi	r20, 0x03	; 3
    158a:	20 c0       	rjmp	.+64     	; 0x15cc <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
    158c:	c7 e8       	ldi	r28, 0x87	; 135
    158e:	df ef       	ldi	r29, 0xFF	; 255
    1590:	41 e0       	ldi	r20, 0x01	; 1
    1592:	1c c0       	rjmp	.+56     	; 0x15cc <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
    1594:	c6 e8       	ldi	r28, 0x86	; 134
    1596:	db ef       	ldi	r29, 0xFB	; 251
    1598:	41 e4       	ldi	r20, 0x41	; 65
    159a:	18 c0       	rjmp	.+48     	; 0x15cc <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
    159c:	c7 e8       	ldi	r28, 0x87	; 135
    159e:	da ef       	ldi	r29, 0xFA	; 250
    15a0:	40 e0       	ldi	r20, 0x00	; 0
    15a2:	14 c0       	rjmp	.+40     	; 0x15cc <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
    15a4:	c2 e8       	ldi	r28, 0x82	; 130
    15a6:	d9 ed       	ldi	r29, 0xD9	; 217
    15a8:	fb cf       	rjmp	.-10     	; 0x15a0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x144>
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	1b c0       	rjmp	.+54     	; 0x15e4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x188>
    15ae:	c7 e8       	ldi	r28, 0x87	; 135
    15b0:	df eb       	ldi	r29, 0xBF	; 191
    15b2:	4f e1       	ldi	r20, 0x1F	; 31
    15b4:	0b c0       	rjmp	.+22     	; 0x15cc <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
    15b6:	c7 e8       	ldi	r28, 0x87	; 135
    15b8:	df eb       	ldi	r29, 0xBF	; 191
    15ba:	47 e0       	ldi	r20, 0x07	; 7
    15bc:	07 c0       	rjmp	.+14     	; 0x15cc <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
    15be:	c7 e8       	ldi	r28, 0x87	; 135
    15c0:	df ef       	ldi	r29, 0xFF	; 255
    15c2:	4f e3       	ldi	r20, 0x3F	; 63
    15c4:	03 c0       	rjmp	.+6      	; 0x15cc <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x170>
    15c6:	c7 e8       	ldi	r28, 0x87	; 135
    15c8:	df ef       	ldi	r29, 0xFF	; 255
    15ca:	4b e0       	ldi	r20, 0x0B	; 11
    15cc:	6a e2       	ldi	r22, 0x2A	; 42
    15ce:	c8 01       	movw	r24, r16
    15d0:	af de       	rcall	.-674    	; 0x1330 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    15d2:	4d 2f       	mov	r20, r29
    15d4:	69 e2       	ldi	r22, 0x29	; 41
    15d6:	c8 01       	movw	r24, r16
    15d8:	ab de       	rcall	.-682    	; 0x1330 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    15da:	4c 2f       	mov	r20, r28
    15dc:	68 e2       	ldi	r22, 0x28	; 40
    15de:	c8 01       	movw	r24, r16
    15e0:	a7 de       	rcall	.-690    	; 0x1330 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	df 91       	pop	r29
    15e6:	cf 91       	pop	r28
    15e8:	1f 91       	pop	r17
    15ea:	0f 91       	pop	r16
    15ec:	08 95       	ret

000015ee <_ZN7MCP251510setBitrateE9CAN_SPEED>:
    15ee:	41 e0       	ldi	r20, 0x01	; 1
    15f0:	35 cf       	rjmp	.-406    	; 0x145c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>

000015f2 <_ZN7MCP25159prepareIdEPhbm>:

void MCP2515::prepareId(uint8_t *buffer, const bool ext, const uint32_t id)
{
    15f2:	0f 93       	push	r16
    15f4:	1f 93       	push	r17
    15f6:	fb 01       	movw	r30, r22
    uint16_t canid = (uint16_t)(id & 0x0FFFF);

    if (ext) {
    15f8:	44 23       	and	r20, r20
    15fa:	b1 f0       	breq	.+44     	; 0x1628 <_ZN7MCP25159prepareIdEPhbm+0x36>
        buffer[MCP_EID0] = (uint8_t) (canid & 0xFF);
    15fc:	03 83       	std	Z+3, r16	; 0x03
        buffer[MCP_EID8] = (uint8_t) (canid >> 8);
    15fe:	12 83       	std	Z+2, r17	; 0x02
        canid = (uint16_t)(id >> 16);
    1600:	89 01       	movw	r16, r18
    1602:	22 27       	eor	r18, r18
    1604:	33 27       	eor	r19, r19
        buffer[MCP_SIDL] = (uint8_t) (canid & 0x03);
        buffer[MCP_SIDL] += (uint8_t) ((canid & 0x1C) << 3);
        buffer[MCP_SIDL] |= TXB_EXIDE_MASK;
    1606:	90 2f       	mov	r25, r16
    1608:	9c 71       	andi	r25, 0x1C	; 28
    160a:	80 2f       	mov	r24, r16
    160c:	83 70       	andi	r24, 0x03	; 3
    160e:	48 e0       	ldi	r20, 0x08	; 8
    1610:	94 9f       	mul	r25, r20
    1612:	80 0d       	add	r24, r0
    1614:	11 24       	eor	r1, r1
    1616:	88 60       	ori	r24, 0x08	; 8
    1618:	81 83       	std	Z+1, r24	; 0x01
        buffer[MCP_SIDH] = (uint8_t) (canid >> 5);
    161a:	55 e0       	ldi	r21, 0x05	; 5
    161c:	16 95       	lsr	r17
    161e:	07 95       	ror	r16
    1620:	5a 95       	dec	r21
    1622:	e1 f7       	brne	.-8      	; 0x161c <_ZN7MCP25159prepareIdEPhbm+0x2a>
    1624:	00 83       	st	Z, r16
    1626:	0d c0       	rjmp	.+26     	; 0x1642 <_ZN7MCP25159prepareIdEPhbm+0x50>
    } else {
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
    1628:	c8 01       	movw	r24, r16
    162a:	23 e0       	ldi	r18, 0x03	; 3
    162c:	96 95       	lsr	r25
    162e:	87 95       	ror	r24
    1630:	2a 95       	dec	r18
    1632:	e1 f7       	brne	.-8      	; 0x162c <_ZN7MCP25159prepareIdEPhbm+0x3a>
    1634:	80 83       	st	Z, r24
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
    1636:	02 95       	swap	r16
    1638:	00 0f       	add	r16, r16
    163a:	00 7e       	andi	r16, 0xE0	; 224
    163c:	01 83       	std	Z+1, r16	; 0x01
        buffer[MCP_EID0] = 0;
    163e:	13 82       	std	Z+3, r1	; 0x03
        buffer[MCP_EID8] = 0;
    1640:	12 82       	std	Z+2, r1	; 0x02
    }
}
    1642:	1f 91       	pop	r17
    1644:	0f 91       	pop	r16
    1646:	08 95       	ret

00001648 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>:

MCP2515::ERROR MCP2515::setFilterMask(const MASK mask, const bool ext, const uint32_t ulData)
{
    1648:	8f 92       	push	r8
    164a:	9f 92       	push	r9
    164c:	af 92       	push	r10
    164e:	bf 92       	push	r11
    1650:	cf 92       	push	r12
    1652:	df 92       	push	r13
    1654:	ef 92       	push	r14
    1656:	ff 92       	push	r15
    1658:	0f 93       	push	r16
    165a:	1f 93       	push	r17
    165c:	cf 93       	push	r28
    165e:	df 93       	push	r29
    1660:	00 d0       	rcall	.+0      	; 0x1662 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x1a>
    1662:	1f 92       	push	r1
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
    1668:	7c 01       	movw	r14, r24
    166a:	d6 2e       	mov	r13, r22
    166c:	c4 2e       	mov	r12, r20
    166e:	48 01       	movw	r8, r16
    1670:	59 01       	movw	r10, r18
    ERROR res = setConfigMode();
    1672:	f0 de       	rcall	.-544    	; 0x1454 <_ZN7MCP251513setConfigModeEv>
    if (res != ERROR_OK) {
    1674:	81 11       	cpse	r24, r1
    1676:	19 c0       	rjmp	.+50     	; 0x16aa <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x62>
        return res;
    }
    
    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
    1678:	95 01       	movw	r18, r10
    167a:	84 01       	movw	r16, r8
    167c:	4c 2d       	mov	r20, r12
    167e:	be 01       	movw	r22, r28
    1680:	6f 5f       	subi	r22, 0xFF	; 255
    1682:	7f 4f       	sbci	r23, 0xFF	; 255
    1684:	c7 01       	movw	r24, r14
    1686:	b5 df       	rcall	.-150    	; 0x15f2 <_ZN7MCP25159prepareIdEPhbm>

    REGISTER reg;
    switch (mask) {
    1688:	dd 20       	and	r13, r13
    168a:	29 f0       	breq	.+10     	; 0x1696 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x4e>
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	d8 12       	cpse	r13, r24
    1690:	0b c0       	rjmp	.+22     	; 0x16a8 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
        case MASK0: reg = MCP_RXM0SIDH; break;
        case MASK1: reg = MCP_RXM1SIDH; break;
    1692:	64 e2       	ldi	r22, 0x24	; 36
    1694:	01 c0       	rjmp	.+2      	; 0x1698 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);

    REGISTER reg;
    switch (mask) {
        case MASK0: reg = MCP_RXM0SIDH; break;
    1696:	60 e2       	ldi	r22, 0x20	; 32
        case MASK1: reg = MCP_RXM1SIDH; break;
        default:
            return ERROR_FAIL;
    }

    setRegisters(reg, tbufdata, 4);
    1698:	24 e0       	ldi	r18, 0x04	; 4
    169a:	ae 01       	movw	r20, r28
    169c:	4f 5f       	subi	r20, 0xFF	; 255
    169e:	5f 4f       	sbci	r21, 0xFF	; 255
    16a0:	c7 01       	movw	r24, r14
    16a2:	5a de       	rcall	.-844    	; 0x1358 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    
    return ERROR_OK;
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	01 c0       	rjmp	.+2      	; 0x16aa <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x62>
    REGISTER reg;
    switch (mask) {
        case MASK0: reg = MCP_RXM0SIDH; break;
        case MASK1: reg = MCP_RXM1SIDH; break;
        default:
            return ERROR_FAIL;
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    }

    setRegisters(reg, tbufdata, 4);
    
    return ERROR_OK;
}
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	df 91       	pop	r29
    16b4:	cf 91       	pop	r28
    16b6:	1f 91       	pop	r17
    16b8:	0f 91       	pop	r16
    16ba:	ff 90       	pop	r15
    16bc:	ef 90       	pop	r14
    16be:	df 90       	pop	r13
    16c0:	cf 90       	pop	r12
    16c2:	bf 90       	pop	r11
    16c4:	af 90       	pop	r10
    16c6:	9f 90       	pop	r9
    16c8:	8f 90       	pop	r8
    16ca:	08 95       	ret

000016cc <_ZN7MCP25159setFilterENS_3RXFEbm>:

MCP2515::ERROR MCP2515::setFilter(const RXF num, const bool ext, const uint32_t ulData)
{
    16cc:	8f 92       	push	r8
    16ce:	9f 92       	push	r9
    16d0:	af 92       	push	r10
    16d2:	bf 92       	push	r11
    16d4:	cf 92       	push	r12
    16d6:	df 92       	push	r13
    16d8:	ef 92       	push	r14
    16da:	ff 92       	push	r15
    16dc:	0f 93       	push	r16
    16de:	1f 93       	push	r17
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
    16e4:	00 d0       	rcall	.+0      	; 0x16e6 <_ZN7MCP25159setFilterENS_3RXFEbm+0x1a>
    16e6:	1f 92       	push	r1
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62
    16ec:	6c 01       	movw	r12, r24
    16ee:	f6 2e       	mov	r15, r22
    16f0:	e4 2e       	mov	r14, r20
    16f2:	48 01       	movw	r8, r16
    16f4:	59 01       	movw	r10, r18
    ERROR res = setConfigMode();
    16f6:	ae de       	rcall	.-676    	; 0x1454 <_ZN7MCP251513setConfigModeEv>
    if (res != ERROR_OK) {
    16f8:	81 11       	cpse	r24, r1
    16fa:	34 c0       	rjmp	.+104    	; 0x1764 <_ZN7MCP25159setFilterENS_3RXFEbm+0x98>
        return res;
    }

    REGISTER reg;

    switch (num) {
    16fc:	82 e0       	ldi	r24, 0x02	; 2
    16fe:	f8 16       	cp	r15, r24
    1700:	a9 f0       	breq	.+42     	; 0x172c <_ZN7MCP25159setFilterENS_3RXFEbm+0x60>
    1702:	8f 15       	cp	r24, r15
    1704:	40 f0       	brcs	.+16     	; 0x1716 <_ZN7MCP25159setFilterENS_3RXFEbm+0x4a>
    1706:	ff 20       	and	r15, r15
    1708:	d1 f0       	breq	.+52     	; 0x173e <_ZN7MCP25159setFilterENS_3RXFEbm+0x72>
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	f8 12       	cpse	r15, r24
    170e:	29 c0       	rjmp	.+82     	; 0x1762 <_ZN7MCP25159setFilterENS_3RXFEbm+0x96>
        case RXF0: reg = MCP_RXF0SIDH; break;
        case RXF1: reg = MCP_RXF1SIDH; break;
    1710:	44 e0       	ldi	r20, 0x04	; 4
    1712:	f4 2e       	mov	r15, r20
    1714:	15 c0       	rjmp	.+42     	; 0x1740 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        return res;
    }

    REGISTER reg;

    switch (num) {
    1716:	84 e0       	ldi	r24, 0x04	; 4
    1718:	f8 16       	cp	r15, r24
    171a:	71 f0       	breq	.+28     	; 0x1738 <_ZN7MCP25159setFilterENS_3RXFEbm+0x6c>
    171c:	f8 16       	cp	r15, r24
    171e:	48 f0       	brcs	.+18     	; 0x1732 <_ZN7MCP25159setFilterENS_3RXFEbm+0x66>
    1720:	85 e0       	ldi	r24, 0x05	; 5
    1722:	f8 12       	cpse	r15, r24
    1724:	1e c0       	rjmp	.+60     	; 0x1762 <_ZN7MCP25159setFilterENS_3RXFEbm+0x96>
        case RXF0: reg = MCP_RXF0SIDH; break;
        case RXF1: reg = MCP_RXF1SIDH; break;
        case RXF2: reg = MCP_RXF2SIDH; break;
        case RXF3: reg = MCP_RXF3SIDH; break;
        case RXF4: reg = MCP_RXF4SIDH; break;
        case RXF5: reg = MCP_RXF5SIDH; break;
    1726:	88 e1       	ldi	r24, 0x18	; 24
    1728:	f8 2e       	mov	r15, r24
    172a:	0a c0       	rjmp	.+20     	; 0x1740 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
    REGISTER reg;

    switch (num) {
        case RXF0: reg = MCP_RXF0SIDH; break;
        case RXF1: reg = MCP_RXF1SIDH; break;
        case RXF2: reg = MCP_RXF2SIDH; break;
    172c:	38 e0       	ldi	r19, 0x08	; 8
    172e:	f3 2e       	mov	r15, r19
    1730:	07 c0       	rjmp	.+14     	; 0x1740 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF3: reg = MCP_RXF3SIDH; break;
    1732:	20 e1       	ldi	r18, 0x10	; 16
    1734:	f2 2e       	mov	r15, r18
    1736:	04 c0       	rjmp	.+8      	; 0x1740 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF4: reg = MCP_RXF4SIDH; break;
    1738:	94 e1       	ldi	r25, 0x14	; 20
    173a:	f9 2e       	mov	r15, r25
    173c:	01 c0       	rjmp	.+2      	; 0x1740 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
    }

    REGISTER reg;

    switch (num) {
        case RXF0: reg = MCP_RXF0SIDH; break;
    173e:	f1 2c       	mov	r15, r1
        default:
            return ERROR_FAIL;
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
    1740:	95 01       	movw	r18, r10
    1742:	84 01       	movw	r16, r8
    1744:	4e 2d       	mov	r20, r14
    1746:	be 01       	movw	r22, r28
    1748:	6f 5f       	subi	r22, 0xFF	; 255
    174a:	7f 4f       	sbci	r23, 0xFF	; 255
    174c:	c6 01       	movw	r24, r12
    174e:	51 df       	rcall	.-350    	; 0x15f2 <_ZN7MCP25159prepareIdEPhbm>
    setRegisters(reg, tbufdata, 4);
    1750:	24 e0       	ldi	r18, 0x04	; 4
    1752:	ae 01       	movw	r20, r28
    1754:	4f 5f       	subi	r20, 0xFF	; 255
    1756:	5f 4f       	sbci	r21, 0xFF	; 255
    1758:	6f 2d       	mov	r22, r15
    175a:	c6 01       	movw	r24, r12
    175c:	fd dd       	rcall	.-1030   	; 0x1358 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
    175e:	80 e0       	ldi	r24, 0x00	; 0
    1760:	01 c0       	rjmp	.+2      	; 0x1764 <_ZN7MCP25159setFilterENS_3RXFEbm+0x98>
        case RXF2: reg = MCP_RXF2SIDH; break;
        case RXF3: reg = MCP_RXF3SIDH; break;
        case RXF4: reg = MCP_RXF4SIDH; break;
        case RXF5: reg = MCP_RXF5SIDH; break;
        default:
            return ERROR_FAIL;
    1762:	81 e0       	ldi	r24, 0x01	; 1
    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
    setRegisters(reg, tbufdata, 4);

    return ERROR_OK;
}
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	df 91       	pop	r29
    176e:	cf 91       	pop	r28
    1770:	1f 91       	pop	r17
    1772:	0f 91       	pop	r16
    1774:	ff 90       	pop	r15
    1776:	ef 90       	pop	r14
    1778:	df 90       	pop	r13
    177a:	cf 90       	pop	r12
    177c:	bf 90       	pop	r11
    177e:	af 90       	pop	r10
    1780:	9f 90       	pop	r9
    1782:	8f 90       	pop	r8
    1784:	08 95       	ret

00001786 <_ZN7MCP25155resetEv>:
    digitalWrite(SPICS, HIGH);
    SPIn->endTransaction();
}

MCP2515::ERROR MCP2515::reset(void)
{
    1786:	af 92       	push	r10
    1788:	bf 92       	push	r11
    178a:	cf 92       	push	r12
    178c:	df 92       	push	r13
    178e:	ef 92       	push	r14
    1790:	ff 92       	push	r15
    1792:	0f 93       	push	r16
    1794:	1f 93       	push	r17
    1796:	cf 93       	push	r28
    1798:	df 93       	push	r29
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
    179e:	64 97       	sbiw	r28, 0x14	; 20
    17a0:	0f b6       	in	r0, 0x3f	; 63
    17a2:	f8 94       	cli
    17a4:	de bf       	out	0x3e, r29	; 62
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	cd bf       	out	0x3d, r28	; 61
    17aa:	7c 01       	movw	r14, r24
    startSPI();
    17ac:	0d dd       	rcall	.-1510   	; 0x11c8 <_ZN7MCP25158startSPIEv>
    SPIn->transfer(INSTRUCTION_RESET);
    17ae:	80 ec       	ldi	r24, 0xC0	; 192
    17b0:	04 dd       	rcall	.-1528   	; 0x11ba <_ZN8SPIClass8transferEh>
    endSPI();
    17b2:	c7 01       	movw	r24, r14
    17b4:	42 dd       	rcall	.-1404   	; 0x123a <_ZN7MCP25156endSPIEv>
    17b6:	6a e0       	ldi	r22, 0x0A	; 10

    delay(10);
    17b8:	70 e0       	ldi	r23, 0x00	; 0
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	72 db       	rcall	.-2332   	; 0xea4 <delay>
    17c0:	8e 01       	movw	r16, r28

    uint8_t zeros[14];
    memset(zeros, 0, sizeof(zeros));
    17c2:	0f 5f       	subi	r16, 0xFF	; 255
    17c4:	1f 4f       	sbci	r17, 0xFF	; 255
    17c6:	8e e0       	ldi	r24, 0x0E	; 14
    17c8:	f8 01       	movw	r30, r16
    17ca:	11 92       	st	Z+, r1
    17cc:	8a 95       	dec	r24
    17ce:	e9 f7       	brne	.-6      	; 0x17ca <_ZN7MCP25155resetEv+0x44>
    17d0:	2e e0       	ldi	r18, 0x0E	; 14
    setRegisters(MCP_TXB0CTRL, zeros, 14);
    17d2:	a8 01       	movw	r20, r16
    17d4:	60 e3       	ldi	r22, 0x30	; 48
    17d6:	c7 01       	movw	r24, r14
    17d8:	bf dd       	rcall	.-1154   	; 0x1358 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    17da:	2e e0       	ldi	r18, 0x0E	; 14
    setRegisters(MCP_TXB1CTRL, zeros, 14);
    17dc:	a8 01       	movw	r20, r16
    17de:	60 e4       	ldi	r22, 0x40	; 64
    17e0:	c7 01       	movw	r24, r14
    17e2:	ba dd       	rcall	.-1164   	; 0x1358 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    17e4:	2e e0       	ldi	r18, 0x0E	; 14
    setRegisters(MCP_TXB2CTRL, zeros, 14);
    17e6:	a8 01       	movw	r20, r16
    17e8:	60 e5       	ldi	r22, 0x50	; 80
    17ea:	c7 01       	movw	r24, r14
    17ec:	b5 dd       	rcall	.-1174   	; 0x1358 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    17ee:	40 e0       	ldi	r20, 0x00	; 0

    setRegister(MCP_RXB0CTRL, 0);
    17f0:	60 e6       	ldi	r22, 0x60	; 96
    17f2:	c7 01       	movw	r24, r14
    17f4:	9d dd       	rcall	.-1222   	; 0x1330 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    17f6:	40 e0       	ldi	r20, 0x00	; 0
    setRegister(MCP_RXB1CTRL, 0);
    17f8:	60 e7       	ldi	r22, 0x70	; 112
    17fa:	c7 01       	movw	r24, r14
    17fc:	99 dd       	rcall	.-1230   	; 0x1330 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    17fe:	43 ea       	ldi	r20, 0xA3	; 163

    setRegister(MCP_CANINTE, CANINTF_RX0IF | CANINTF_RX1IF | CANINTF_ERRIF | CANINTF_MERRF);
    1800:	6b e2       	ldi	r22, 0x2B	; 43
    1802:	c7 01       	movw	r24, r14
    1804:	95 dd       	rcall	.-1238   	; 0x1330 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    1806:	24 e0       	ldi	r18, 0x04	; 4

    // receives all valid messages using either Standard or Extended Identifiers that
    // meet filter criteria. RXF0 is applied for RXB0, RXF1 is applied for RXB1
    modifyRegister(MCP_RXB0CTRL,
                   RXBnCTRL_RXM_MASK | RXB0CTRL_BUKT | RXB0CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB0CTRL_BUKT | RXB0CTRL_FILHIT);
    1808:	47 e6       	ldi	r20, 0x67	; 103
    180a:	60 e6       	ldi	r22, 0x60	; 96
    180c:	c7 01       	movw	r24, r14
    180e:	ca dd       	rcall	.-1132   	; 0x13a4 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
    1810:	21 e0       	ldi	r18, 0x01	; 1
    1812:	47 e6       	ldi	r20, 0x67	; 103
    modifyRegister(MCP_RXB1CTRL,
                   RXBnCTRL_RXM_MASK | RXB1CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB1CTRL_FILHIT);
    1814:	60 e7       	ldi	r22, 0x70	; 112
    1816:	c7 01       	movw	r24, r14
    1818:	c5 dd       	rcall	.-1142   	; 0x13a4 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
    181a:	86 e0       	ldi	r24, 0x06	; 6
    181c:	e5 e1       	ldi	r30, 0x15	; 21
    181e:	f2 e0       	ldi	r31, 0x02	; 2

    // clear filters and masks
    // do not filter any standard frames for RXF0 used by RXB0
    // do not filter any extended frames for RXF1 used by RXB1
    RXF filters[] = {RXF0, RXF1, RXF2, RXF3, RXF4, RXF5};
    1820:	de 01       	movw	r26, r28
    1822:	1f 96       	adiw	r26, 0x0f	; 15
    1824:	01 90       	ld	r0, Z+
    1826:	0d 92       	st	X+, r0
    1828:	8a 95       	dec	r24
    182a:	e1 f7       	brne	.-8      	; 0x1824 <_ZN7MCP25155resetEv+0x9e>
    182c:	5e 01       	movw	r10, r28
    182e:	ff e0       	ldi	r31, 0x0F	; 15
    1830:	af 0e       	add	r10, r31
    1832:	b1 1c       	adc	r11, r1
    1834:	c1 2c       	mov	r12, r1
    1836:	d1 2c       	mov	r13, r1
    1838:	f5 01       	movw	r30, r10
    for (int i=0; i<6; i++) {
    183a:	61 91       	ld	r22, Z+
    183c:	5f 01       	movw	r10, r30
        bool ext = (i == 1);
        ERROR result = setFilter(filters[i], ext, 0);
    183e:	41 e0       	ldi	r20, 0x01	; 1
    1840:	f1 e0       	ldi	r31, 0x01	; 1
    1842:	cf 16       	cp	r12, r31
    1844:	d1 04       	cpc	r13, r1
    1846:	09 f0       	breq	.+2      	; 0x184a <_ZN7MCP25155resetEv+0xc4>
    1848:	40 e0       	ldi	r20, 0x00	; 0
    184a:	00 e0       	ldi	r16, 0x00	; 0
    184c:	10 e0       	ldi	r17, 0x00	; 0
    184e:	98 01       	movw	r18, r16
    1850:	c7 01       	movw	r24, r14
    1852:	3c df       	rcall	.-392    	; 0x16cc <_ZN7MCP25159setFilterENS_3RXFEbm>
    1854:	81 11       	cpse	r24, r1
    1856:	17 c0       	rjmp	.+46     	; 0x1886 <_ZN7MCP25155resetEv+0x100>
    1858:	8f ef       	ldi	r24, 0xFF	; 255
        if (result != ERROR_OK) {
    185a:	c8 1a       	sub	r12, r24
    185c:	d8 0a       	sbc	r13, r24

    // clear filters and masks
    // do not filter any standard frames for RXF0 used by RXB0
    // do not filter any extended frames for RXF1 used by RXB1
    RXF filters[] = {RXF0, RXF1, RXF2, RXF3, RXF4, RXF5};
    for (int i=0; i<6; i++) {
    185e:	e6 e0       	ldi	r30, 0x06	; 6
    1860:	ce 16       	cp	r12, r30
    1862:	d1 04       	cpc	r13, r1
    1864:	49 f7       	brne	.-46     	; 0x1838 <_ZN7MCP25155resetEv+0xb2>
    1866:	00 e0       	ldi	r16, 0x00	; 0
    1868:	10 e0       	ldi	r17, 0x00	; 0
        }
    }

    MASK masks[] = {MASK0, MASK1};
    for (int i=0; i<2; i++) {
        ERROR result = setFilterMask(masks[i], true, 0);
    186a:	98 01       	movw	r18, r16
    186c:	41 e0       	ldi	r20, 0x01	; 1
    186e:	60 e0       	ldi	r22, 0x00	; 0
    1870:	c7 01       	movw	r24, r14
    1872:	ea de       	rcall	.-556    	; 0x1648 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>
    1874:	81 11       	cpse	r24, r1
    1876:	07 c0       	rjmp	.+14     	; 0x1886 <_ZN7MCP25155resetEv+0x100>
        if (result != ERROR_OK) {
    1878:	00 e0       	ldi	r16, 0x00	; 0
    187a:	10 e0       	ldi	r17, 0x00	; 0
        }
    }

    MASK masks[] = {MASK0, MASK1};
    for (int i=0; i<2; i++) {
        ERROR result = setFilterMask(masks[i], true, 0);
    187c:	98 01       	movw	r18, r16
    187e:	41 e0       	ldi	r20, 0x01	; 1
    1880:	61 e0       	ldi	r22, 0x01	; 1
    1882:	c7 01       	movw	r24, r14
    1884:	e1 de       	rcall	.-574    	; 0x1648 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>
    1886:	64 96       	adiw	r28, 0x14	; 20
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	f8 94       	cli
            return result;
        }
    }

    return ERROR_OK;
}
    188c:	de bf       	out	0x3e, r29	; 62
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	cd bf       	out	0x3d, r28	; 61
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	1f 91       	pop	r17
    1898:	0f 91       	pop	r16
    189a:	ff 90       	pop	r15
    189c:	ef 90       	pop	r14
    189e:	df 90       	pop	r13
    18a0:	cf 90       	pop	r12
    18a2:	bf 90       	pop	r11
    18a4:	af 90       	pop	r10
    18a6:	08 95       	ret

000018a8 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame>:
    18a8:	4f 92       	push	r4
    18aa:	5f 92       	push	r5
    18ac:	6f 92       	push	r6

    return ERROR_OK;
}

MCP2515::ERROR MCP2515::sendMessage(const TXBn txbn, const struct can_frame *frame)
{
    18ae:	7f 92       	push	r7
    18b0:	af 92       	push	r10
    18b2:	bf 92       	push	r11
    18b4:	cf 92       	push	r12
    18b6:	df 92       	push	r13
    18b8:	ef 92       	push	r14
    18ba:	ff 92       	push	r15
    18bc:	0f 93       	push	r16
    18be:	1f 93       	push	r17
    18c0:	cf 93       	push	r28
    18c2:	df 93       	push	r29
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
    18c8:	2d 97       	sbiw	r28, 0x0d	; 13
    18ca:	0f b6       	in	r0, 0x3f	; 63
    18cc:	f8 94       	cli
    18ce:	de bf       	out	0x3e, r29	; 62
    18d0:	0f be       	out	0x3f, r0	; 63
    18d2:	cd bf       	out	0x3d, r28	; 61
    18d4:	5c 01       	movw	r10, r24
    18d6:	fa 01       	movw	r30, r20
    if (frame->can_dlc > CAN_MAX_DLEN) {
    18d8:	24 81       	ldd	r18, Z+4	; 0x04
    18da:	29 30       	cpi	r18, 0x09	; 9
    18dc:	08 f0       	brcs	.+2      	; 0x18e0 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x38>
    18de:	57 c0       	rjmp	.+174    	; 0x198e <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0xe6>
        return ERROR_FAILTX;
    }

    const struct TXBn_REGS *txbuf = &TXB[txbn];
    18e0:	e6 2e       	mov	r14, r22
    18e2:	f1 2c       	mov	r15, r1

    uint8_t data[13];

    bool ext = (frame->can_id & CAN_EFF_FLAG);
    18e4:	80 81       	ld	r24, Z
    18e6:	91 81       	ldd	r25, Z+1	; 0x01
    18e8:	a2 81       	ldd	r26, Z+2	; 0x02
    18ea:	b3 81       	ldd	r27, Z+3	; 0x03
    18ec:	ac 01       	movw	r20, r24
    18ee:	bd 01       	movw	r22, r26
    18f0:	44 27       	eor	r20, r20
    18f2:	77 fd       	sbrc	r23, 7
    18f4:	43 95       	inc	r20
    18f6:	55 27       	eor	r21, r21
    18f8:	66 27       	eor	r22, r22
    18fa:	77 27       	eor	r23, r23
    bool rtr = (frame->can_id & CAN_RTR_FLAG);
    18fc:	2c 01       	movw	r4, r24
    18fe:	3d 01       	movw	r6, r26
    1900:	44 24       	eor	r4, r4
    1902:	55 24       	eor	r5, r5
    1904:	66 24       	eor	r6, r6
    1906:	20 e4       	ldi	r18, 0x40	; 64
    1908:	72 22       	and	r7, r18
    uint32_t id = (frame->can_id & (ext ? CAN_EFF_MASK : CAN_SFF_MASK));
    190a:	b7 fd       	sbrc	r27, 7
    190c:	05 c0       	rjmp	.+10     	; 0x1918 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x70>
    190e:	0f ef       	ldi	r16, 0xFF	; 255
    1910:	17 e0       	ldi	r17, 0x07	; 7
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	04 c0       	rjmp	.+8      	; 0x1920 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x78>
    1918:	0f ef       	ldi	r16, 0xFF	; 255
    191a:	1f ef       	ldi	r17, 0xFF	; 255
    191c:	2f ef       	ldi	r18, 0xFF	; 255
    191e:	3f e1       	ldi	r19, 0x1F	; 31
    1920:	6f 01       	movw	r12, r30

    prepareId(data, ext, id);
    1922:	08 23       	and	r16, r24
    1924:	19 23       	and	r17, r25
    1926:	2a 23       	and	r18, r26
    1928:	3b 23       	and	r19, r27
    192a:	be 01       	movw	r22, r28
    192c:	6f 5f       	subi	r22, 0xFF	; 255
    192e:	7f 4f       	sbci	r23, 0xFF	; 255
    1930:	c5 01       	movw	r24, r10
    1932:	5f de       	rcall	.-834    	; 0x15f2 <_ZN7MCP25159prepareIdEPhbm>
    1934:	f6 01       	movw	r30, r12
    1936:	14 81       	ldd	r17, Z+4	; 0x04

    data[MCP_DLC] = rtr ? (frame->can_dlc | RTR_MASK) : frame->can_dlc;
    1938:	81 2f       	mov	r24, r17
    193a:	45 28       	or	r4, r5
    193c:	46 28       	or	r4, r6
    193e:	47 28       	or	r4, r7
    1940:	09 f0       	breq	.+2      	; 0x1944 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x9c>
    1942:	80 64       	ori	r24, 0x40	; 64
    1944:	8d 83       	std	Y+5, r24	; 0x05

    memcpy(&data[MCP_DATA], frame->data, frame->can_dlc);
    1946:	41 2f       	mov	r20, r17
    1948:	50 e0       	ldi	r21, 0x00	; 0
    194a:	b6 01       	movw	r22, r12
    194c:	68 5f       	subi	r22, 0xF8	; 248
    194e:	7f 4f       	sbci	r23, 0xFF	; 255
    1950:	ce 01       	movw	r24, r28
    1952:	06 96       	adiw	r24, 0x06	; 6
    1954:	77 d3       	rcall	.+1774   	; 0x2044 <memcpy>

    setRegisters(txbuf->SIDH, data, 5 + frame->can_dlc);
    1956:	25 e0       	ldi	r18, 0x05	; 5
    1958:	21 0f       	add	r18, r17
    195a:	87 01       	movw	r16, r14
    195c:	00 0f       	add	r16, r16
    195e:	11 1f       	adc	r17, r17
    1960:	0e 0d       	add	r16, r14
    1962:	1f 1d       	adc	r17, r15
    1964:	0b 58       	subi	r16, 0x8B	; 139
    1966:	1d 4f       	sbci	r17, 0xFD	; 253
    1968:	ae 01       	movw	r20, r28
    196a:	4f 5f       	subi	r20, 0xFF	; 255
    196c:	5f 4f       	sbci	r21, 0xFF	; 255
    196e:	f8 01       	movw	r30, r16
    1970:	61 81       	ldd	r22, Z+1	; 0x01
    1972:	c5 01       	movw	r24, r10
    1974:	f1 dc       	rcall	.-1566   	; 0x1358 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    modifyRegister(txbuf->CTRL, TXB_TXREQ, TXB_TXREQ);
    1976:	f8 01       	movw	r30, r16
    1978:	10 81       	ld	r17, Z
    197a:	28 e0       	ldi	r18, 0x08	; 8
    197c:	48 e0       	ldi	r20, 0x08	; 8
    197e:	61 2f       	mov	r22, r17
    1980:	c5 01       	movw	r24, r10

    uint8_t ctrl = readRegister(txbuf->CTRL);
    1982:	10 dd       	rcall	.-1504   	; 0x13a4 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
    1984:	61 2f       	mov	r22, r17
    1986:	c5 01       	movw	r24, r10
    1988:	98 dc       	rcall	.-1744   	; 0x12ba <_ZN7MCP251512readRegisterENS_8REGISTERE>
    if ((ctrl & (TXB_ABTF | TXB_MLOA | TXB_TXERR)) != 0) {
    198a:	80 77       	andi	r24, 0x70	; 112
    198c:	09 f0       	breq	.+2      	; 0x1990 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0xe8>
}

MCP2515::ERROR MCP2515::sendMessage(const TXBn txbn, const struct can_frame *frame)
{
    if (frame->can_dlc > CAN_MAX_DLEN) {
        return ERROR_FAILTX;
    198e:	84 e0       	ldi	r24, 0x04	; 4
    uint8_t ctrl = readRegister(txbuf->CTRL);
    if ((ctrl & (TXB_ABTF | TXB_MLOA | TXB_TXERR)) != 0) {
        return ERROR_FAILTX;
    }
    return ERROR_OK;
}
    1990:	2d 96       	adiw	r28, 0x0d	; 13
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	de bf       	out	0x3e, r29	; 62
    1998:	0f be       	out	0x3f, r0	; 63
    199a:	cd bf       	out	0x3d, r28	; 61
    199c:	df 91       	pop	r29
    199e:	cf 91       	pop	r28
    19a0:	1f 91       	pop	r17
    19a2:	0f 91       	pop	r16
    19a4:	ff 90       	pop	r15
    19a6:	ef 90       	pop	r14
    19a8:	df 90       	pop	r13
    19aa:	cf 90       	pop	r12
    19ac:	bf 90       	pop	r11
    19ae:	af 90       	pop	r10
    19b0:	7f 90       	pop	r7
    19b2:	6f 90       	pop	r6
    19b4:	5f 90       	pop	r5
    19b6:	4f 90       	pop	r4
    19b8:	08 95       	ret

000019ba <_ZN7MCP251511sendMessageEPK9can_frame>:

MCP2515::ERROR MCP2515::sendMessage(const struct can_frame *frame)
{
    19ba:	9f 92       	push	r9
    19bc:	af 92       	push	r10
    19be:	bf 92       	push	r11
    19c0:	cf 92       	push	r12
    19c2:	df 92       	push	r13
    19c4:	ef 92       	push	r14
    19c6:	ff 92       	push	r15
    19c8:	0f 93       	push	r16
    19ca:	1f 93       	push	r17
    19cc:	cf 93       	push	r28
    19ce:	df 93       	push	r29
    19d0:	00 d0       	rcall	.+0      	; 0x19d2 <_ZN7MCP251511sendMessageEPK9can_frame+0x18>
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
    if (frame->can_dlc > CAN_MAX_DLEN) {
    19d6:	fb 01       	movw	r30, r22
    19d8:	24 81       	ldd	r18, Z+4	; 0x04
    19da:	29 30       	cpi	r18, 0x09	; 9
    19dc:	d8 f5       	brcc	.+118    	; 0x1a54 <_ZN7MCP251511sendMessageEPK9can_frame+0x9a>
    19de:	7b 01       	movw	r14, r22
    19e0:	8c 01       	movw	r16, r24
        return ERROR_FAILTX;
    }

    TXBn txBuffers[N_TXBUFFERS] = {TXB0, TXB1, TXB2};
    19e2:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <analog_reference+0x7>
    19e6:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <analog_reference+0x8>
    19ea:	a0 91 1d 02 	lds	r26, 0x021D	; 0x80021d <analog_reference+0x9>
    19ee:	89 83       	std	Y+1, r24	; 0x01
    19f0:	9a 83       	std	Y+2, r25	; 0x02
    19f2:	ab 83       	std	Y+3, r26	; 0x03
    19f4:	ce 01       	movw	r24, r28
    19f6:	01 96       	adiw	r24, 0x01	; 1
    19f8:	6c 01       	movw	r12, r24
    19fa:	5e 01       	movw	r10, r28
    19fc:	94 e0       	ldi	r25, 0x04	; 4
    19fe:	a9 0e       	add	r10, r25
    1a00:	b1 1c       	adc	r11, r1

    for (int i=0; i<N_TXBUFFERS; i++) {
        const struct TXBn_REGS *txbuf = &TXB[txBuffers[i]];
    1a02:	f6 01       	movw	r30, r12
    1a04:	91 90       	ld	r9, Z+
    1a06:	6f 01       	movw	r12, r30
        uint8_t ctrlval = readRegister(txbuf->CTRL);
    1a08:	29 2d       	mov	r18, r9
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	f9 01       	movw	r30, r18
    1a0e:	ee 0f       	add	r30, r30
    1a10:	ff 1f       	adc	r31, r31
    1a12:	2e 0f       	add	r18, r30
    1a14:	3f 1f       	adc	r19, r31
    1a16:	f9 01       	movw	r30, r18
    1a18:	eb 58       	subi	r30, 0x8B	; 139
    1a1a:	fd 4f       	sbci	r31, 0xFD	; 253
    1a1c:	60 81       	ld	r22, Z
    1a1e:	c8 01       	movw	r24, r16
    1a20:	4c dc       	rcall	.-1896   	; 0x12ba <_ZN7MCP251512readRegisterENS_8REGISTERE>
        if ( (ctrlval & TXB_TXREQ) == 0 ) {
    1a22:	83 fd       	sbrc	r24, 3
    1a24:	12 c0       	rjmp	.+36     	; 0x1a4a <_ZN7MCP251511sendMessageEPK9can_frame+0x90>
            return sendMessage(txBuffers[i], frame);
    1a26:	a7 01       	movw	r20, r14
    1a28:	69 2d       	mov	r22, r9
    1a2a:	c8 01       	movw	r24, r16
        }
    }

    return ERROR_ALLTXBUSY;
}
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	df 91       	pop	r29
    1a34:	cf 91       	pop	r28
    1a36:	1f 91       	pop	r17
    1a38:	0f 91       	pop	r16
    1a3a:	ff 90       	pop	r15
    1a3c:	ef 90       	pop	r14
    1a3e:	df 90       	pop	r13
    1a40:	cf 90       	pop	r12
    1a42:	bf 90       	pop	r11
    1a44:	af 90       	pop	r10

    for (int i=0; i<N_TXBUFFERS; i++) {
        const struct TXBn_REGS *txbuf = &TXB[txBuffers[i]];
        uint8_t ctrlval = readRegister(txbuf->CTRL);
        if ( (ctrlval & TXB_TXREQ) == 0 ) {
            return sendMessage(txBuffers[i], frame);
    1a46:	9f 90       	pop	r9
    1a48:	2f cf       	rjmp	.-418    	; 0x18a8 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame>
        return ERROR_FAILTX;
    }

    TXBn txBuffers[N_TXBUFFERS] = {TXB0, TXB1, TXB2};

    for (int i=0; i<N_TXBUFFERS; i++) {
    1a4a:	ca 14       	cp	r12, r10
    1a4c:	db 04       	cpc	r13, r11
    1a4e:	c9 f6       	brne	.-78     	; 0x1a02 <_ZN7MCP251511sendMessageEPK9can_frame+0x48>
        if ( (ctrlval & TXB_TXREQ) == 0 ) {
            return sendMessage(txBuffers[i], frame);
        }
    }

    return ERROR_ALLTXBUSY;
    1a50:	82 e0       	ldi	r24, 0x02	; 2
    1a52:	01 c0       	rjmp	.+2      	; 0x1a56 <_ZN7MCP251511sendMessageEPK9can_frame+0x9c>
}

MCP2515::ERROR MCP2515::sendMessage(const struct can_frame *frame)
{
    if (frame->can_dlc > CAN_MAX_DLEN) {
        return ERROR_FAILTX;
    1a54:	84 e0       	ldi	r24, 0x04	; 4
            return sendMessage(txBuffers[i], frame);
        }
    }

    return ERROR_ALLTXBUSY;
}
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	df 91       	pop	r29
    1a5e:	cf 91       	pop	r28
    1a60:	1f 91       	pop	r17
    1a62:	0f 91       	pop	r16
    1a64:	ff 90       	pop	r15
    1a66:	ef 90       	pop	r14
    1a68:	df 90       	pop	r13
    1a6a:	cf 90       	pop	r12
    1a6c:	bf 90       	pop	r11
    1a6e:	af 90       	pop	r10
    1a70:	9f 90       	pop	r9
    1a72:	08 95       	ret

00001a74 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(const RXBn rxbn, struct can_frame *frame)
{
    1a74:	7f 92       	push	r7
    1a76:	8f 92       	push	r8
    1a78:	9f 92       	push	r9
    1a7a:	af 92       	push	r10
    1a7c:	bf 92       	push	r11
    1a7e:	cf 92       	push	r12
    1a80:	df 92       	push	r13
    1a82:	ef 92       	push	r14
    1a84:	ff 92       	push	r15
    1a86:	0f 93       	push	r16
    1a88:	1f 93       	push	r17
    1a8a:	cf 93       	push	r28
    1a8c:	df 93       	push	r29
    1a8e:	00 d0       	rcall	.+0      	; 0x1a90 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x1c>
    1a90:	1f 92       	push	r1
    1a92:	1f 92       	push	r1
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
    1a98:	4c 01       	movw	r8, r24
    1a9a:	5a 01       	movw	r10, r20
    const struct RXBn_REGS *rxb = &RXB[rxbn];

    uint8_t tbufdata[5];

    readRegisters(rxb->SIDH, tbufdata, 5);
    1a9c:	24 e0       	ldi	r18, 0x04	; 4
    1a9e:	62 9f       	mul	r22, r18
    1aa0:	80 01       	movw	r16, r0
    1aa2:	11 24       	eor	r1, r1
    1aa4:	f8 01       	movw	r30, r16
    1aa6:	e3 59       	subi	r30, 0x93	; 147
    1aa8:	fd 4f       	sbci	r31, 0xFD	; 253
    1aaa:	25 e0       	ldi	r18, 0x05	; 5
    1aac:	ae 01       	movw	r20, r28
    1aae:	4f 5f       	subi	r20, 0xFF	; 255
    1ab0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ab2:	61 81       	ldd	r22, Z+1	; 0x01
    1ab4:	16 dc       	rcall	.-2004   	; 0x12e2 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    uint32_t id = (tbufdata[MCP_SIDH]<<3) + (tbufdata[MCP_SIDL]>>5);
    1ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab8:	99 81       	ldd	r25, Y+1	; 0x01
    1aba:	c8 2e       	mov	r12, r24
    1abc:	d1 2c       	mov	r13, r1
    1abe:	45 e0       	ldi	r20, 0x05	; 5
    1ac0:	d5 94       	asr	r13
    1ac2:	c7 94       	ror	r12
    1ac4:	4a 95       	dec	r20
    1ac6:	e1 f7       	brne	.-8      	; 0x1ac0 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x4c>
    1ac8:	e8 e0       	ldi	r30, 0x08	; 8
    1aca:	9e 9f       	mul	r25, r30
    1acc:	c0 0c       	add	r12, r0
    1ace:	d1 1c       	adc	r13, r1
    1ad0:	11 24       	eor	r1, r1
    1ad2:	0d 2c       	mov	r0, r13
    1ad4:	00 0c       	add	r0, r0
    1ad6:	ee 08       	sbc	r14, r14
    1ad8:	ff 08       	sbc	r15, r15

    if ( (tbufdata[MCP_SIDL] & TXB_EXIDE_MASK) ==  TXB_EXIDE_MASK ) {
    1ada:	83 ff       	sbrs	r24, 3
    1adc:	20 c0       	rjmp	.+64     	; 0x1b1e <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xaa>
        id = (id<<2) + (tbufdata[MCP_SIDL] & 0x03);
    1ade:	92 e0       	ldi	r25, 0x02	; 2
    1ae0:	cc 0c       	add	r12, r12
    1ae2:	dd 1c       	adc	r13, r13
    1ae4:	ee 1c       	adc	r14, r14
    1ae6:	ff 1c       	adc	r15, r15
    1ae8:	9a 95       	dec	r25
    1aea:	d1 f7       	brne	.-12     	; 0x1ae0 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x6c>
        id = (id<<8) + tbufdata[MCP_EID8];
    1aec:	83 70       	andi	r24, 0x03	; 3
    1aee:	c8 0e       	add	r12, r24
    1af0:	d1 1c       	adc	r13, r1
    1af2:	e1 1c       	adc	r14, r1
    1af4:	f1 1c       	adc	r15, r1
    1af6:	fe 2c       	mov	r15, r14
    1af8:	ed 2c       	mov	r14, r13
    1afa:	dc 2c       	mov	r13, r12
    1afc:	cc 24       	eor	r12, r12
        id = (id<<8) + tbufdata[MCP_EID0];
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	c8 0e       	add	r12, r24
    1b02:	d1 1c       	adc	r13, r1
    1b04:	e1 1c       	adc	r14, r1
    1b06:	f1 1c       	adc	r15, r1
    1b08:	fe 2c       	mov	r15, r14
    1b0a:	ed 2c       	mov	r14, r13
    1b0c:	dc 2c       	mov	r13, r12
    1b0e:	cc 24       	eor	r12, r12
    1b10:	8c 81       	ldd	r24, Y+4	; 0x04
    1b12:	c8 0e       	add	r12, r24
    1b14:	d1 1c       	adc	r13, r1
    1b16:	e1 1c       	adc	r14, r1
    1b18:	f1 1c       	adc	r15, r1
        id |= CAN_EFF_FLAG;
    1b1a:	68 94       	set
    1b1c:	f7 f8       	bld	r15, 7
    }

    uint8_t dlc = (tbufdata[MCP_DLC] & DLC_MASK);
    1b1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b20:	8f 70       	andi	r24, 0x0F	; 15
    1b22:	78 2e       	mov	r7, r24
    if (dlc > CAN_MAX_DLEN) {
    1b24:	f8 e0       	ldi	r31, 0x08	; 8
    1b26:	f8 17       	cp	r31, r24
    1b28:	10 f1       	brcs	.+68     	; 0x1b6e <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xfa>
        return ERROR_FAIL;
    }

    uint8_t ctrl = readRegister(rxb->CTRL);
    1b2a:	f8 01       	movw	r30, r16
    1b2c:	e3 59       	subi	r30, 0x93	; 147
    1b2e:	fd 4f       	sbci	r31, 0xFD	; 253
    1b30:	60 81       	ld	r22, Z
    1b32:	c4 01       	movw	r24, r8
    1b34:	c2 db       	rcall	.-2172   	; 0x12ba <_ZN7MCP251512readRegisterENS_8REGISTERE>
    if (ctrl & RXBnCTRL_RTR) {
    1b36:	83 ff       	sbrs	r24, 3
    1b38:	02 c0       	rjmp	.+4      	; 0x1b3e <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xca>
        id |= CAN_RTR_FLAG;
    1b3a:	68 94       	set
    1b3c:	f6 f8       	bld	r15, 6
    }

    frame->can_id = id;
    1b3e:	f5 01       	movw	r30, r10
    1b40:	c0 82       	st	Z, r12
    1b42:	d1 82       	std	Z+1, r13	; 0x01
    1b44:	e2 82       	std	Z+2, r14	; 0x02
    1b46:	f3 82       	std	Z+3, r15	; 0x03
    frame->can_dlc = dlc;
    1b48:	74 82       	std	Z+4, r7	; 0x04

    readRegisters(rxb->DATA, frame->data, dlc);
    1b4a:	a5 01       	movw	r20, r10
    1b4c:	48 5f       	subi	r20, 0xF8	; 248
    1b4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b50:	03 59       	subi	r16, 0x93	; 147
    1b52:	1d 4f       	sbci	r17, 0xFD	; 253
    1b54:	27 2d       	mov	r18, r7
    1b56:	f8 01       	movw	r30, r16
    1b58:	62 81       	ldd	r22, Z+2	; 0x02
    1b5a:	c4 01       	movw	r24, r8
    1b5c:	c2 db       	rcall	.-2172   	; 0x12e2 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    modifyRegister(MCP_CANINTF, rxb->CANINTF_RXnIF, 0);
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	f8 01       	movw	r30, r16
    1b62:	43 81       	ldd	r20, Z+3	; 0x03
    1b64:	6c e2       	ldi	r22, 0x2C	; 44
    1b66:	c4 01       	movw	r24, r8
    1b68:	1d dc       	rcall	.-1990   	; 0x13a4 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    return ERROR_OK;
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	01 c0       	rjmp	.+2      	; 0x1b70 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xfc>
        id |= CAN_EFF_FLAG;
    }

    uint8_t dlc = (tbufdata[MCP_DLC] & DLC_MASK);
    if (dlc > CAN_MAX_DLEN) {
        return ERROR_FAIL;
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    readRegisters(rxb->DATA, frame->data, dlc);

    modifyRegister(MCP_CANINTF, rxb->CANINTF_RXnIF, 0);

    return ERROR_OK;
}
    1b70:	0f 90       	pop	r0
    1b72:	0f 90       	pop	r0
    1b74:	0f 90       	pop	r0
    1b76:	0f 90       	pop	r0
    1b78:	0f 90       	pop	r0
    1b7a:	df 91       	pop	r29
    1b7c:	cf 91       	pop	r28
    1b7e:	1f 91       	pop	r17
    1b80:	0f 91       	pop	r16
    1b82:	ff 90       	pop	r15
    1b84:	ef 90       	pop	r14
    1b86:	df 90       	pop	r13
    1b88:	cf 90       	pop	r12
    1b8a:	bf 90       	pop	r11
    1b8c:	af 90       	pop	r10
    1b8e:	9f 90       	pop	r9
    1b90:	8f 90       	pop	r8
    1b92:	7f 90       	pop	r7
    1b94:	08 95       	ret

00001b96 <_ZN7MCP251511readMessageEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(struct can_frame *frame)
{
    1b96:	0f 93       	push	r16
    1b98:	1f 93       	push	r17
    1b9a:	cf 93       	push	r28
    1b9c:	df 93       	push	r29
    1b9e:	ec 01       	movw	r28, r24
    1ba0:	8b 01       	movw	r16, r22
    ERROR rc;
    uint8_t stat = getStatus();
    1ba2:	19 dc       	rcall	.-1998   	; 0x13d6 <_ZN7MCP25159getStatusEv>

    if ( stat & STAT_RX0IF ) {
    1ba4:	80 ff       	sbrs	r24, 0
    1ba6:	03 c0       	rjmp	.+6      	; 0x1bae <_ZN7MCP251511readMessageEP9can_frame+0x18>
        rc = readMessage(RXB0, frame);
    1ba8:	a8 01       	movw	r20, r16
    1baa:	60 e0       	ldi	r22, 0x00	; 0
    1bac:	04 c0       	rjmp	.+8      	; 0x1bb6 <_ZN7MCP251511readMessageEP9can_frame+0x20>
    } else if ( stat & STAT_RX1IF ) {
    1bae:	81 ff       	sbrs	r24, 1
    1bb0:	08 c0       	rjmp	.+16     	; 0x1bc2 <_ZN7MCP251511readMessageEP9can_frame+0x2c>
        rc = readMessage(RXB1, frame);
    1bb2:	a8 01       	movw	r20, r16
    1bb4:	61 e0       	ldi	r22, 0x01	; 1
    1bb6:	ce 01       	movw	r24, r28
    } else {
        rc = ERROR_NOMSG;
    }

    return rc;
}
    1bb8:	df 91       	pop	r29
    1bba:	cf 91       	pop	r28
    1bbc:	1f 91       	pop	r17
    uint8_t stat = getStatus();

    if ( stat & STAT_RX0IF ) {
        rc = readMessage(RXB0, frame);
    } else if ( stat & STAT_RX1IF ) {
        rc = readMessage(RXB1, frame);
    1bbe:	0f 91       	pop	r16
    1bc0:	59 cf       	rjmp	.-334    	; 0x1a74 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
    } else {
        rc = ERROR_NOMSG;
    }

    return rc;
}
    1bc2:	85 e0       	ldi	r24, 0x05	; 5
    1bc4:	df 91       	pop	r29
    1bc6:	cf 91       	pop	r28
    1bc8:	1f 91       	pop	r17
    1bca:	0f 91       	pop	r16
    1bcc:	08 95       	ret

00001bce <_ZN13LiquidCrystal11pulseEnableEv>:
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
    1bce:	cf 93       	push	r28
    1bd0:	df 93       	push	r29
    1bd2:	ec 01       	movw	r28, r24
    1bd4:	60 e0       	ldi	r22, 0x00	; 0
    1bd6:	8e 81       	ldd	r24, Y+6	; 0x06
    1bd8:	c2 da       	rcall	.-2684   	; 0x115e <digitalWrite>
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	9c d9       	rcall	.-3272   	; 0xf18 <delayMicroseconds>
    1be0:	61 e0       	ldi	r22, 0x01	; 1
    1be2:	8e 81       	ldd	r24, Y+6	; 0x06
    1be4:	bc da       	rcall	.-2696   	; 0x115e <digitalWrite>
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	96 d9       	rcall	.-3284   	; 0xf18 <delayMicroseconds>
    1bec:	60 e0       	ldi	r22, 0x00	; 0
    1bee:	8e 81       	ldd	r24, Y+6	; 0x06
    1bf0:	b6 da       	rcall	.-2708   	; 0x115e <digitalWrite>
    1bf2:	84 e6       	ldi	r24, 0x64	; 100
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	df 91       	pop	r29
    1bf8:	cf 91       	pop	r28
    1bfa:	8e c9       	rjmp	.-3300   	; 0xf18 <delayMicroseconds>

00001bfc <_ZN13LiquidCrystal10write4bitsEh>:
    1bfc:	cf 92       	push	r12
    1bfe:	df 92       	push	r13
    1c00:	ef 92       	push	r14
    1c02:	ff 92       	push	r15
    1c04:	0f 93       	push	r16
    1c06:	1f 93       	push	r17
    1c08:	cf 93       	push	r28
    1c0a:	df 93       	push	r29
    1c0c:	6c 01       	movw	r12, r24
    1c0e:	7c 01       	movw	r14, r24
    1c10:	87 e0       	ldi	r24, 0x07	; 7
    1c12:	e8 0e       	add	r14, r24
    1c14:	f1 1c       	adc	r15, r1
    1c16:	c0 e0       	ldi	r28, 0x00	; 0
    1c18:	d0 e0       	ldi	r29, 0x00	; 0
    1c1a:	06 2f       	mov	r16, r22
    1c1c:	10 e0       	ldi	r17, 0x00	; 0
    1c1e:	b8 01       	movw	r22, r16
    1c20:	0c 2e       	mov	r0, r28
    1c22:	02 c0       	rjmp	.+4      	; 0x1c28 <_ZN13LiquidCrystal10write4bitsEh+0x2c>
    1c24:	75 95       	asr	r23
    1c26:	67 95       	ror	r22
    1c28:	0a 94       	dec	r0
    1c2a:	e2 f7       	brpl	.-8      	; 0x1c24 <_ZN13LiquidCrystal10write4bitsEh+0x28>
    1c2c:	61 70       	andi	r22, 0x01	; 1
    1c2e:	f7 01       	movw	r30, r14
    1c30:	81 91       	ld	r24, Z+
    1c32:	7f 01       	movw	r14, r30
    1c34:	94 da       	rcall	.-2776   	; 0x115e <digitalWrite>
    1c36:	21 96       	adiw	r28, 0x01	; 1
    1c38:	c4 30       	cpi	r28, 0x04	; 4
    1c3a:	d1 05       	cpc	r29, r1
    1c3c:	81 f7       	brne	.-32     	; 0x1c1e <_ZN13LiquidCrystal10write4bitsEh+0x22>
    1c3e:	c6 01       	movw	r24, r12
    1c40:	df 91       	pop	r29
    1c42:	cf 91       	pop	r28
    1c44:	1f 91       	pop	r17
    1c46:	0f 91       	pop	r16
    1c48:	ff 90       	pop	r15
    1c4a:	ef 90       	pop	r14
    1c4c:	df 90       	pop	r13
    1c4e:	cf 90       	pop	r12
    1c50:	be cf       	rjmp	.-132    	; 0x1bce <_ZN13LiquidCrystal11pulseEnableEv>

00001c52 <_ZN13LiquidCrystal10write8bitsEh>:
    1c52:	cf 92       	push	r12
    1c54:	df 92       	push	r13
    1c56:	ef 92       	push	r14
    1c58:	ff 92       	push	r15
    1c5a:	0f 93       	push	r16
    1c5c:	1f 93       	push	r17
    1c5e:	cf 93       	push	r28
    1c60:	df 93       	push	r29
    1c62:	6c 01       	movw	r12, r24
    1c64:	7c 01       	movw	r14, r24
    1c66:	87 e0       	ldi	r24, 0x07	; 7
    1c68:	e8 0e       	add	r14, r24
    1c6a:	f1 1c       	adc	r15, r1
    1c6c:	c0 e0       	ldi	r28, 0x00	; 0
    1c6e:	d0 e0       	ldi	r29, 0x00	; 0
    1c70:	06 2f       	mov	r16, r22
    1c72:	10 e0       	ldi	r17, 0x00	; 0
    1c74:	b8 01       	movw	r22, r16
    1c76:	0c 2e       	mov	r0, r28
    1c78:	02 c0       	rjmp	.+4      	; 0x1c7e <_ZN13LiquidCrystal10write8bitsEh+0x2c>
    1c7a:	75 95       	asr	r23
    1c7c:	67 95       	ror	r22
    1c7e:	0a 94       	dec	r0
    1c80:	e2 f7       	brpl	.-8      	; 0x1c7a <_ZN13LiquidCrystal10write8bitsEh+0x28>
    1c82:	61 70       	andi	r22, 0x01	; 1
    1c84:	f7 01       	movw	r30, r14
    1c86:	81 91       	ld	r24, Z+
    1c88:	7f 01       	movw	r14, r30
    1c8a:	69 da       	rcall	.-2862   	; 0x115e <digitalWrite>
    1c8c:	21 96       	adiw	r28, 0x01	; 1
    1c8e:	c8 30       	cpi	r28, 0x08	; 8
    1c90:	d1 05       	cpc	r29, r1
    1c92:	81 f7       	brne	.-32     	; 0x1c74 <_ZN13LiquidCrystal10write8bitsEh+0x22>
    1c94:	c6 01       	movw	r24, r12
    1c96:	df 91       	pop	r29
    1c98:	cf 91       	pop	r28
    1c9a:	1f 91       	pop	r17
    1c9c:	0f 91       	pop	r16
    1c9e:	ff 90       	pop	r15
    1ca0:	ef 90       	pop	r14
    1ca2:	df 90       	pop	r13
    1ca4:	cf 90       	pop	r12
    1ca6:	93 cf       	rjmp	.-218    	; 0x1bce <_ZN13LiquidCrystal11pulseEnableEv>

00001ca8 <_ZN13LiquidCrystal4sendEhh>:
    1ca8:	1f 93       	push	r17
    1caa:	cf 93       	push	r28
    1cac:	df 93       	push	r29
    1cae:	ec 01       	movw	r28, r24
    1cb0:	16 2f       	mov	r17, r22
    1cb2:	64 2f       	mov	r22, r20
    1cb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb6:	53 da       	rcall	.-2906   	; 0x115e <digitalWrite>
    1cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cba:	8f 3f       	cpi	r24, 0xFF	; 255
    1cbc:	11 f0       	breq	.+4      	; 0x1cc2 <_ZN13LiquidCrystal4sendEhh+0x1a>
    1cbe:	60 e0       	ldi	r22, 0x00	; 0
    1cc0:	4e da       	rcall	.-2916   	; 0x115e <digitalWrite>
    1cc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cc4:	61 2f       	mov	r22, r17
    1cc6:	84 ff       	sbrs	r24, 4
    1cc8:	05 c0       	rjmp	.+10     	; 0x1cd4 <_ZN13LiquidCrystal4sendEhh+0x2c>
    1cca:	ce 01       	movw	r24, r28
    1ccc:	df 91       	pop	r29
    1cce:	cf 91       	pop	r28
    1cd0:	1f 91       	pop	r17
    1cd2:	bf cf       	rjmp	.-130    	; 0x1c52 <_ZN13LiquidCrystal10write8bitsEh>
    1cd4:	70 e0       	ldi	r23, 0x00	; 0
    1cd6:	84 e0       	ldi	r24, 0x04	; 4
    1cd8:	75 95       	asr	r23
    1cda:	67 95       	ror	r22
    1cdc:	8a 95       	dec	r24
    1cde:	e1 f7       	brne	.-8      	; 0x1cd8 <_ZN13LiquidCrystal4sendEhh+0x30>
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	8c df       	rcall	.-232    	; 0x1bfc <_ZN13LiquidCrystal10write4bitsEh>
    1ce4:	61 2f       	mov	r22, r17
    1ce6:	ce 01       	movw	r24, r28
    1ce8:	df 91       	pop	r29
    1cea:	cf 91       	pop	r28
    1cec:	1f 91       	pop	r17
    1cee:	86 cf       	rjmp	.-244    	; 0x1bfc <_ZN13LiquidCrystal10write4bitsEh>

00001cf0 <_ZN13LiquidCrystal7commandEh>:
    1cf0:	40 e0       	ldi	r20, 0x00	; 0
    1cf2:	da cf       	rjmp	.-76     	; 0x1ca8 <_ZN13LiquidCrystal4sendEhh>

00001cf4 <_ZN13LiquidCrystal5clearEv>:
    1cf4:	61 e0       	ldi	r22, 0x01	; 1
    1cf6:	fc df       	rcall	.-8      	; 0x1cf0 <_ZN13LiquidCrystal7commandEh>
    1cf8:	80 ed       	ldi	r24, 0xD0	; 208
    1cfa:	97 e0       	ldi	r25, 0x07	; 7
    1cfc:	0d c9       	rjmp	.-3558   	; 0xf18 <delayMicroseconds>

00001cfe <_ZN13LiquidCrystal9setCursorEhh>:
    1cfe:	fc 01       	movw	r30, r24
    1d00:	44 30       	cpi	r20, 0x04	; 4
    1d02:	08 f0       	brcs	.+2      	; 0x1d06 <_ZN13LiquidCrystal9setCursorEhh+0x8>
    1d04:	43 e0       	ldi	r20, 0x03	; 3
    1d06:	83 89       	ldd	r24, Z+19	; 0x13
    1d08:	48 17       	cp	r20, r24
    1d0a:	10 f0       	brcs	.+4      	; 0x1d10 <_ZN13LiquidCrystal9setCursorEhh+0x12>
    1d0c:	4f ef       	ldi	r20, 0xFF	; 255
    1d0e:	48 0f       	add	r20, r24
    1d10:	df 01       	movw	r26, r30
    1d12:	a4 0f       	add	r26, r20
    1d14:	b1 1d       	adc	r27, r1
    1d16:	54 96       	adiw	r26, 0x14	; 20
    1d18:	9c 91       	ld	r25, X
    1d1a:	69 0f       	add	r22, r25
    1d1c:	60 68       	ori	r22, 0x80	; 128
    1d1e:	cf 01       	movw	r24, r30
    1d20:	e7 cf       	rjmp	.-50     	; 0x1cf0 <_ZN13LiquidCrystal7commandEh>

00001d22 <_ZN13LiquidCrystal7displayEv>:
    1d22:	fc 01       	movw	r30, r24
    1d24:	60 89       	ldd	r22, Z+16	; 0x10
    1d26:	26 2f       	mov	r18, r22
    1d28:	24 60       	ori	r18, 0x04	; 4
    1d2a:	20 8b       	std	Z+16, r18	; 0x10
    1d2c:	6c 60       	ori	r22, 0x0C	; 12
    1d2e:	e0 cf       	rjmp	.-64     	; 0x1cf0 <_ZN13LiquidCrystal7commandEh>

00001d30 <_ZN13LiquidCrystal5beginEhhh>:
    1d30:	ef 92       	push	r14
    1d32:	ff 92       	push	r15
    1d34:	0f 93       	push	r16
    1d36:	1f 93       	push	r17
    1d38:	cf 93       	push	r28
    1d3a:	df 93       	push	r29
    1d3c:	ec 01       	movw	r28, r24
    1d3e:	42 30       	cpi	r20, 0x02	; 2
    1d40:	18 f0       	brcs	.+6      	; 0x1d48 <_ZN13LiquidCrystal5beginEhhh+0x18>
    1d42:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d44:	88 60       	ori	r24, 0x08	; 8
    1d46:	8f 87       	std	Y+15, r24	; 0x0f
    1d48:	4b 8b       	std	Y+19, r20	; 0x13
    1d4a:	1c 8a       	std	Y+20, r1	; 0x14
    1d4c:	80 e4       	ldi	r24, 0x40	; 64
    1d4e:	8d 8b       	std	Y+21, r24	; 0x15
    1d50:	6e 8b       	std	Y+22, r22	; 0x16
    1d52:	70 e0       	ldi	r23, 0x00	; 0
    1d54:	60 5c       	subi	r22, 0xC0	; 192
    1d56:	7f 4f       	sbci	r23, 0xFF	; 255
    1d58:	6f 8b       	std	Y+23, r22	; 0x17
    1d5a:	22 23       	and	r18, r18
    1d5c:	29 f0       	breq	.+10     	; 0x1d68 <_ZN13LiquidCrystal5beginEhhh+0x38>
    1d5e:	41 30       	cpi	r20, 0x01	; 1
    1d60:	19 f4       	brne	.+6      	; 0x1d68 <_ZN13LiquidCrystal5beginEhhh+0x38>
    1d62:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d64:	84 60       	ori	r24, 0x04	; 4
    1d66:	8f 87       	std	Y+15, r24	; 0x0f
    1d68:	61 e0       	ldi	r22, 0x01	; 1
    1d6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d6c:	bc d9       	rcall	.-3208   	; 0x10e6 <pinMode>
    1d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d70:	8f 3f       	cpi	r24, 0xFF	; 255
    1d72:	11 f0       	breq	.+4      	; 0x1d78 <_ZN13LiquidCrystal5beginEhhh+0x48>
    1d74:	61 e0       	ldi	r22, 0x01	; 1
    1d76:	b7 d9       	rcall	.-3218   	; 0x10e6 <pinMode>
    1d78:	61 e0       	ldi	r22, 0x01	; 1
    1d7a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d7c:	b4 d9       	rcall	.-3224   	; 0x10e6 <pinMode>
    1d7e:	7e 01       	movw	r14, r28
    1d80:	87 e0       	ldi	r24, 0x07	; 7
    1d82:	e8 0e       	add	r14, r24
    1d84:	f1 1c       	adc	r15, r1
    1d86:	00 e0       	ldi	r16, 0x00	; 0
    1d88:	10 e0       	ldi	r17, 0x00	; 0
    1d8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d8c:	84 fd       	sbrc	r24, 4
    1d8e:	03 c0       	rjmp	.+6      	; 0x1d96 <_ZN13LiquidCrystal5beginEhhh+0x66>
    1d90:	84 e0       	ldi	r24, 0x04	; 4
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	02 c0       	rjmp	.+4      	; 0x1d9a <_ZN13LiquidCrystal5beginEhhh+0x6a>
    1d96:	88 e0       	ldi	r24, 0x08	; 8
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	08 17       	cp	r16, r24
    1d9c:	19 07       	cpc	r17, r25
    1d9e:	44 f4       	brge	.+16     	; 0x1db0 <_ZN13LiquidCrystal5beginEhhh+0x80>
    1da0:	61 e0       	ldi	r22, 0x01	; 1
    1da2:	f7 01       	movw	r30, r14
    1da4:	81 91       	ld	r24, Z+
    1da6:	7f 01       	movw	r14, r30
    1da8:	9e d9       	rcall	.-3268   	; 0x10e6 <pinMode>
    1daa:	0f 5f       	subi	r16, 0xFF	; 255
    1dac:	1f 4f       	sbci	r17, 0xFF	; 255
    1dae:	ed cf       	rjmp	.-38     	; 0x1d8a <_ZN13LiquidCrystal5beginEhhh+0x5a>
    1db0:	80 e5       	ldi	r24, 0x50	; 80
    1db2:	93 ec       	ldi	r25, 0xC3	; 195
    1db4:	b1 d8       	rcall	.-3742   	; 0xf18 <delayMicroseconds>
    1db6:	60 e0       	ldi	r22, 0x00	; 0
    1db8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dba:	d1 d9       	rcall	.-3166   	; 0x115e <digitalWrite>
    1dbc:	60 e0       	ldi	r22, 0x00	; 0
    1dbe:	8e 81       	ldd	r24, Y+6	; 0x06
    1dc0:	ce d9       	rcall	.-3172   	; 0x115e <digitalWrite>
    1dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc4:	8f 3f       	cpi	r24, 0xFF	; 255
    1dc6:	11 f0       	breq	.+4      	; 0x1dcc <_ZN13LiquidCrystal5beginEhhh+0x9c>
    1dc8:	60 e0       	ldi	r22, 0x00	; 0
    1dca:	c9 d9       	rcall	.-3182   	; 0x115e <digitalWrite>
    1dcc:	6f 85       	ldd	r22, Y+15	; 0x0f
    1dce:	64 fd       	sbrc	r22, 4
    1dd0:	16 c0       	rjmp	.+44     	; 0x1dfe <_ZN13LiquidCrystal5beginEhhh+0xce>
    1dd2:	63 e0       	ldi	r22, 0x03	; 3
    1dd4:	ce 01       	movw	r24, r28
    1dd6:	12 df       	rcall	.-476    	; 0x1bfc <_ZN13LiquidCrystal10write4bitsEh>
    1dd8:	84 e9       	ldi	r24, 0x94	; 148
    1dda:	91 e1       	ldi	r25, 0x11	; 17
    1ddc:	9d d8       	rcall	.-3782   	; 0xf18 <delayMicroseconds>
    1dde:	63 e0       	ldi	r22, 0x03	; 3
    1de0:	ce 01       	movw	r24, r28
    1de2:	0c df       	rcall	.-488    	; 0x1bfc <_ZN13LiquidCrystal10write4bitsEh>
    1de4:	84 e9       	ldi	r24, 0x94	; 148
    1de6:	91 e1       	ldi	r25, 0x11	; 17
    1de8:	97 d8       	rcall	.-3794   	; 0xf18 <delayMicroseconds>
    1dea:	63 e0       	ldi	r22, 0x03	; 3
    1dec:	ce 01       	movw	r24, r28
    1dee:	06 df       	rcall	.-500    	; 0x1bfc <_ZN13LiquidCrystal10write4bitsEh>
    1df0:	86 e9       	ldi	r24, 0x96	; 150
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	91 d8       	rcall	.-3806   	; 0xf18 <delayMicroseconds>
    1df6:	62 e0       	ldi	r22, 0x02	; 2
    1df8:	ce 01       	movw	r24, r28
    1dfa:	00 df       	rcall	.-512    	; 0x1bfc <_ZN13LiquidCrystal10write4bitsEh>
    1dfc:	11 c0       	rjmp	.+34     	; 0x1e20 <_ZN13LiquidCrystal5beginEhhh+0xf0>
    1dfe:	60 62       	ori	r22, 0x20	; 32
    1e00:	ce 01       	movw	r24, r28
    1e02:	76 df       	rcall	.-276    	; 0x1cf0 <_ZN13LiquidCrystal7commandEh>
    1e04:	84 e9       	ldi	r24, 0x94	; 148
    1e06:	91 e1       	ldi	r25, 0x11	; 17
    1e08:	87 d8       	rcall	.-3826   	; 0xf18 <delayMicroseconds>
    1e0a:	6f 85       	ldd	r22, Y+15	; 0x0f
    1e0c:	60 62       	ori	r22, 0x20	; 32
    1e0e:	ce 01       	movw	r24, r28
    1e10:	6f df       	rcall	.-290    	; 0x1cf0 <_ZN13LiquidCrystal7commandEh>
    1e12:	86 e9       	ldi	r24, 0x96	; 150
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	80 d8       	rcall	.-3840   	; 0xf18 <delayMicroseconds>
    1e18:	6f 85       	ldd	r22, Y+15	; 0x0f
    1e1a:	60 62       	ori	r22, 0x20	; 32
    1e1c:	ce 01       	movw	r24, r28
    1e1e:	68 df       	rcall	.-304    	; 0x1cf0 <_ZN13LiquidCrystal7commandEh>
    1e20:	6f 85       	ldd	r22, Y+15	; 0x0f
    1e22:	60 62       	ori	r22, 0x20	; 32
    1e24:	ce 01       	movw	r24, r28
    1e26:	64 df       	rcall	.-312    	; 0x1cf0 <_ZN13LiquidCrystal7commandEh>
    1e28:	84 e0       	ldi	r24, 0x04	; 4
    1e2a:	88 8b       	std	Y+16, r24	; 0x10
    1e2c:	ce 01       	movw	r24, r28
    1e2e:	79 df       	rcall	.-270    	; 0x1d22 <_ZN13LiquidCrystal7displayEv>
    1e30:	ce 01       	movw	r24, r28
    1e32:	60 df       	rcall	.-320    	; 0x1cf4 <_ZN13LiquidCrystal5clearEv>
    1e34:	82 e0       	ldi	r24, 0x02	; 2
    1e36:	89 8b       	std	Y+17, r24	; 0x11
    1e38:	66 e0       	ldi	r22, 0x06	; 6
    1e3a:	ce 01       	movw	r24, r28
    1e3c:	df 91       	pop	r29
    1e3e:	cf 91       	pop	r28
    1e40:	1f 91       	pop	r17
    1e42:	0f 91       	pop	r16
    1e44:	ff 90       	pop	r15
    1e46:	ef 90       	pop	r14
    1e48:	53 cf       	rjmp	.-346    	; 0x1cf0 <_ZN13LiquidCrystal7commandEh>

00001e4a <_ZN13LiquidCrystalC1Ehhhhhh>:
    1e4a:	cf 92       	push	r12
    1e4c:	ef 92       	push	r14
    1e4e:	0f 93       	push	r16
    1e50:	fc 01       	movw	r30, r24
    1e52:	13 82       	std	Z+3, r1	; 0x03
    1e54:	12 82       	std	Z+2, r1	; 0x02
    1e56:	82 e8       	ldi	r24, 0x82	; 130
    1e58:	92 e0       	ldi	r25, 0x02	; 2
    1e5a:	91 83       	std	Z+1, r25	; 0x01
    1e5c:	80 83       	st	Z, r24
    1e5e:	64 83       	std	Z+4, r22	; 0x04
    1e60:	8f ef       	ldi	r24, 0xFF	; 255
    1e62:	85 83       	std	Z+5, r24	; 0x05
    1e64:	46 83       	std	Z+6, r20	; 0x06
    1e66:	27 83       	std	Z+7, r18	; 0x07
    1e68:	00 87       	std	Z+8, r16	; 0x08
    1e6a:	e1 86       	std	Z+9, r14	; 0x09
    1e6c:	c2 86       	std	Z+10, r12	; 0x0a
    1e6e:	13 86       	std	Z+11, r1	; 0x0b
    1e70:	14 86       	std	Z+12, r1	; 0x0c
    1e72:	15 86       	std	Z+13, r1	; 0x0d
    1e74:	16 86       	std	Z+14, r1	; 0x0e
    1e76:	17 86       	std	Z+15, r1	; 0x0f
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	41 e0       	ldi	r20, 0x01	; 1
    1e7c:	60 e1       	ldi	r22, 0x10	; 16
    1e7e:	cf 01       	movw	r24, r30
    1e80:	0f 91       	pop	r16
    1e82:	ef 90       	pop	r14
    1e84:	cf 90       	pop	r12
    1e86:	54 cf       	rjmp	.-344    	; 0x1d30 <_ZN13LiquidCrystal5beginEhhh>

00001e88 <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
    1e88:	41 e0       	ldi	r20, 0x01	; 1
    1e8a:	0e df       	rcall	.-484    	; 0x1ca8 <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	08 95       	ret

00001e92 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    1e92:	cf 93       	push	r28
  uint8_t sreg = SREG;
    1e94:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    1e96:	f8 94       	cli
  if (!initialized) {
    1e98:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <_ZN8SPIClass11initializedE>
    1e9c:	81 11       	cpse	r24, r1
    1e9e:	23 c0       	rjmp	.+70     	; 0x1ee6 <_ZN8SPIClass5beginEv+0x54>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    1ea0:	ef e2       	ldi	r30, 0x2F	; 47
    1ea2:	f2 e0       	ldi	r31, 0x02	; 2
    1ea4:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    1ea6:	e9 ee       	ldi	r30, 0xE9	; 233
    1ea8:	f1 e0       	ldi	r31, 0x01	; 1
    1eaa:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    1eac:	e8 2f       	mov	r30, r24
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	ee 0f       	add	r30, r30
    1eb2:	ff 1f       	adc	r31, r31
    1eb4:	e6 5a       	subi	r30, 0xA6	; 166
    1eb6:	fd 4f       	sbci	r31, 0xFD	; 253
    1eb8:	a5 91       	lpm	r26, Z+
    1eba:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    1ebc:	ec 91       	ld	r30, X
    1ebe:	e9 23       	and	r30, r25
    1ec0:	19 f4       	brne	.+6      	; 0x1ec8 <_ZN8SPIClass5beginEv+0x36>
      digitalWrite(SS, HIGH);
    1ec2:	61 e0       	ldi	r22, 0x01	; 1
    1ec4:	85 e3       	ldi	r24, 0x35	; 53
    1ec6:	4b d9       	rcall	.-3434   	; 0x115e <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    1ec8:	61 e0       	ldi	r22, 0x01	; 1
    1eca:	85 e3       	ldi	r24, 0x35	; 53
    1ecc:	0c d9       	rcall	.-3560   	; 0x10e6 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    1ece:	8c b5       	in	r24, 0x2c	; 44
    1ed0:	80 61       	ori	r24, 0x10	; 16
    1ed2:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    1ed4:	8c b5       	in	r24, 0x2c	; 44
    1ed6:	80 64       	ori	r24, 0x40	; 64
    1ed8:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    1eda:	61 e0       	ldi	r22, 0x01	; 1
    1edc:	84 e3       	ldi	r24, 0x34	; 52
    1ede:	03 d9       	rcall	.-3578   	; 0x10e6 <pinMode>
    pinMode(MOSI, OUTPUT);
    1ee0:	61 e0       	ldi	r22, 0x01	; 1
    1ee2:	83 e3       	ldi	r24, 0x33	; 51
    1ee4:	00 d9       	rcall	.-3584   	; 0x10e6 <pinMode>
    1ee6:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <_ZN8SPIClass11initializedE>
  }
  initialized++; // reference count
    1eea:	8f 5f       	subi	r24, 0xFF	; 255
    1eec:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <_ZN8SPIClass11initializedE>
    1ef0:	cf bf       	out	0x3f, r28	; 63
  SREG = sreg;
    1ef2:	cf 91       	pop	r28
}
    1ef4:	08 95       	ret

00001ef6 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1ef6:	08 95       	ret

00001ef8 <__divmodhi4>:
    1ef8:	97 fb       	bst	r25, 7
    1efa:	07 2e       	mov	r0, r23
    1efc:	16 f4       	brtc	.+4      	; 0x1f02 <__divmodhi4+0xa>
    1efe:	00 94       	com	r0
    1f00:	06 d0       	rcall	.+12     	; 0x1f0e <__divmodhi4_neg1>
    1f02:	77 fd       	sbrc	r23, 7
    1f04:	08 d0       	rcall	.+16     	; 0x1f16 <__divmodhi4_neg2>
    1f06:	35 d0       	rcall	.+106    	; 0x1f72 <__udivmodhi4>
    1f08:	07 fc       	sbrc	r0, 7
    1f0a:	05 d0       	rcall	.+10     	; 0x1f16 <__divmodhi4_neg2>
    1f0c:	3e f4       	brtc	.+14     	; 0x1f1c <__divmodhi4_exit>

00001f0e <__divmodhi4_neg1>:
    1f0e:	90 95       	com	r25
    1f10:	81 95       	neg	r24
    1f12:	9f 4f       	sbci	r25, 0xFF	; 255
    1f14:	08 95       	ret

00001f16 <__divmodhi4_neg2>:
    1f16:	70 95       	com	r23
    1f18:	61 95       	neg	r22
    1f1a:	7f 4f       	sbci	r23, 0xFF	; 255

00001f1c <__divmodhi4_exit>:
    1f1c:	08 95       	ret

00001f1e <__udivmodsi4>:
    1f1e:	a1 e2       	ldi	r26, 0x21	; 33
    1f20:	1a 2e       	mov	r1, r26
    1f22:	aa 1b       	sub	r26, r26
    1f24:	bb 1b       	sub	r27, r27
    1f26:	fd 01       	movw	r30, r26
    1f28:	0d c0       	rjmp	.+26     	; 0x1f44 <__udivmodsi4_ep>

00001f2a <__udivmodsi4_loop>:
    1f2a:	aa 1f       	adc	r26, r26
    1f2c:	bb 1f       	adc	r27, r27
    1f2e:	ee 1f       	adc	r30, r30
    1f30:	ff 1f       	adc	r31, r31
    1f32:	a2 17       	cp	r26, r18
    1f34:	b3 07       	cpc	r27, r19
    1f36:	e4 07       	cpc	r30, r20
    1f38:	f5 07       	cpc	r31, r21
    1f3a:	20 f0       	brcs	.+8      	; 0x1f44 <__udivmodsi4_ep>
    1f3c:	a2 1b       	sub	r26, r18
    1f3e:	b3 0b       	sbc	r27, r19
    1f40:	e4 0b       	sbc	r30, r20
    1f42:	f5 0b       	sbc	r31, r21

00001f44 <__udivmodsi4_ep>:
    1f44:	66 1f       	adc	r22, r22
    1f46:	77 1f       	adc	r23, r23
    1f48:	88 1f       	adc	r24, r24
    1f4a:	99 1f       	adc	r25, r25
    1f4c:	1a 94       	dec	r1
    1f4e:	69 f7       	brne	.-38     	; 0x1f2a <__udivmodsi4_loop>
    1f50:	60 95       	com	r22
    1f52:	70 95       	com	r23
    1f54:	80 95       	com	r24
    1f56:	90 95       	com	r25
    1f58:	9b 01       	movw	r18, r22
    1f5a:	ac 01       	movw	r20, r24
    1f5c:	bd 01       	movw	r22, r26
    1f5e:	cf 01       	movw	r24, r30
    1f60:	08 95       	ret

00001f62 <__tablejump2__>:
    1f62:	ee 0f       	add	r30, r30
    1f64:	ff 1f       	adc	r31, r31
    1f66:	88 1f       	adc	r24, r24
    1f68:	8b bf       	out	0x3b, r24	; 59
    1f6a:	07 90       	elpm	r0, Z+
    1f6c:	f6 91       	elpm	r31, Z
    1f6e:	e0 2d       	mov	r30, r0
    1f70:	19 94       	eijmp

00001f72 <__udivmodhi4>:
    1f72:	aa 1b       	sub	r26, r26
    1f74:	bb 1b       	sub	r27, r27
    1f76:	51 e1       	ldi	r21, 0x11	; 17
    1f78:	07 c0       	rjmp	.+14     	; 0x1f88 <__udivmodhi4_ep>

00001f7a <__udivmodhi4_loop>:
    1f7a:	aa 1f       	adc	r26, r26
    1f7c:	bb 1f       	adc	r27, r27
    1f7e:	a6 17       	cp	r26, r22
    1f80:	b7 07       	cpc	r27, r23
    1f82:	10 f0       	brcs	.+4      	; 0x1f88 <__udivmodhi4_ep>
    1f84:	a6 1b       	sub	r26, r22
    1f86:	b7 0b       	sbc	r27, r23

00001f88 <__udivmodhi4_ep>:
    1f88:	88 1f       	adc	r24, r24
    1f8a:	99 1f       	adc	r25, r25
    1f8c:	5a 95       	dec	r21
    1f8e:	a9 f7       	brne	.-22     	; 0x1f7a <__udivmodhi4_loop>
    1f90:	80 95       	com	r24
    1f92:	90 95       	com	r25
    1f94:	bc 01       	movw	r22, r24
    1f96:	cd 01       	movw	r24, r26
    1f98:	08 95       	ret

00001f9a <do_rand>:
    1f9a:	8f 92       	push	r8
    1f9c:	9f 92       	push	r9
    1f9e:	af 92       	push	r10
    1fa0:	bf 92       	push	r11
    1fa2:	cf 92       	push	r12
    1fa4:	df 92       	push	r13
    1fa6:	ef 92       	push	r14
    1fa8:	ff 92       	push	r15
    1faa:	cf 93       	push	r28
    1fac:	df 93       	push	r29
    1fae:	ec 01       	movw	r28, r24
    1fb0:	68 81       	ld	r22, Y
    1fb2:	79 81       	ldd	r23, Y+1	; 0x01
    1fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb8:	61 15       	cp	r22, r1
    1fba:	71 05       	cpc	r23, r1
    1fbc:	81 05       	cpc	r24, r1
    1fbe:	91 05       	cpc	r25, r1
    1fc0:	21 f4       	brne	.+8      	; 0x1fca <do_rand+0x30>
    1fc2:	64 e2       	ldi	r22, 0x24	; 36
    1fc4:	79 ed       	ldi	r23, 0xD9	; 217
    1fc6:	8b e5       	ldi	r24, 0x5B	; 91
    1fc8:	97 e0       	ldi	r25, 0x07	; 7
    1fca:	2d e1       	ldi	r18, 0x1D	; 29
    1fcc:	33 ef       	ldi	r19, 0xF3	; 243
    1fce:	41 e0       	ldi	r20, 0x01	; 1
    1fd0:	50 e0       	ldi	r21, 0x00	; 0
    1fd2:	41 d0       	rcall	.+130    	; 0x2056 <__divmodsi4>
    1fd4:	49 01       	movw	r8, r18
    1fd6:	5a 01       	movw	r10, r20
    1fd8:	9b 01       	movw	r18, r22
    1fda:	ac 01       	movw	r20, r24
    1fdc:	a7 ea       	ldi	r26, 0xA7	; 167
    1fde:	b1 e4       	ldi	r27, 0x41	; 65
    1fe0:	56 d0       	rcall	.+172    	; 0x208e <__muluhisi3>
    1fe2:	6b 01       	movw	r12, r22
    1fe4:	7c 01       	movw	r14, r24
    1fe6:	ac ee       	ldi	r26, 0xEC	; 236
    1fe8:	b4 ef       	ldi	r27, 0xF4	; 244
    1fea:	a5 01       	movw	r20, r10
    1fec:	94 01       	movw	r18, r8
    1fee:	5b d0       	rcall	.+182    	; 0x20a6 <__mulohisi3>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	8c 0d       	add	r24, r12
    1ff6:	9d 1d       	adc	r25, r13
    1ff8:	ae 1d       	adc	r26, r14
    1ffa:	bf 1d       	adc	r27, r15
    1ffc:	b7 ff       	sbrs	r27, 7
    1ffe:	03 c0       	rjmp	.+6      	; 0x2006 <__DATA_REGION_LENGTH__+0x6>
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	a1 09       	sbc	r26, r1
    2004:	b0 48       	sbci	r27, 0x80	; 128
    2006:	88 83       	st	Y, r24
    2008:	99 83       	std	Y+1, r25	; 0x01
    200a:	aa 83       	std	Y+2, r26	; 0x02
    200c:	bb 83       	std	Y+3, r27	; 0x03
    200e:	9f 77       	andi	r25, 0x7F	; 127
    2010:	df 91       	pop	r29
    2012:	cf 91       	pop	r28
    2014:	ff 90       	pop	r15
    2016:	ef 90       	pop	r14
    2018:	df 90       	pop	r13
    201a:	cf 90       	pop	r12
    201c:	bf 90       	pop	r11
    201e:	af 90       	pop	r10
    2020:	9f 90       	pop	r9
    2022:	8f 90       	pop	r8
    2024:	08 95       	ret

00002026 <rand_r>:
    2026:	b9 cf       	rjmp	.-142    	; 0x1f9a <do_rand>

00002028 <rand>:
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	92 e0       	ldi	r25, 0x02	; 2
    202c:	b6 cf       	rjmp	.-148    	; 0x1f9a <do_rand>

0000202e <srand>:
    202e:	a0 e0       	ldi	r26, 0x00	; 0
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    2036:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    203a:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    203e:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    2042:	08 95       	ret

00002044 <memcpy>:
    2044:	fb 01       	movw	r30, r22
    2046:	dc 01       	movw	r26, r24
    2048:	02 c0       	rjmp	.+4      	; 0x204e <memcpy+0xa>
    204a:	01 90       	ld	r0, Z+
    204c:	0d 92       	st	X+, r0
    204e:	41 50       	subi	r20, 0x01	; 1
    2050:	50 40       	sbci	r21, 0x00	; 0
    2052:	d8 f7       	brcc	.-10     	; 0x204a <memcpy+0x6>
    2054:	08 95       	ret

00002056 <__divmodsi4>:
    2056:	05 2e       	mov	r0, r21
    2058:	97 fb       	bst	r25, 7
    205a:	16 f4       	brtc	.+4      	; 0x2060 <__divmodsi4+0xa>
    205c:	00 94       	com	r0
    205e:	0f d0       	rcall	.+30     	; 0x207e <__negsi2>
    2060:	57 fd       	sbrc	r21, 7
    2062:	05 d0       	rcall	.+10     	; 0x206e <__divmodsi4_neg2>
    2064:	5c df       	rcall	.-328    	; 0x1f1e <__udivmodsi4>
    2066:	07 fc       	sbrc	r0, 7
    2068:	02 d0       	rcall	.+4      	; 0x206e <__divmodsi4_neg2>
    206a:	46 f4       	brtc	.+16     	; 0x207c <__divmodsi4_exit>
    206c:	08 c0       	rjmp	.+16     	; 0x207e <__negsi2>

0000206e <__divmodsi4_neg2>:
    206e:	50 95       	com	r21
    2070:	40 95       	com	r20
    2072:	30 95       	com	r19
    2074:	21 95       	neg	r18
    2076:	3f 4f       	sbci	r19, 0xFF	; 255
    2078:	4f 4f       	sbci	r20, 0xFF	; 255
    207a:	5f 4f       	sbci	r21, 0xFF	; 255

0000207c <__divmodsi4_exit>:
    207c:	08 95       	ret

0000207e <__negsi2>:
    207e:	90 95       	com	r25
    2080:	80 95       	com	r24
    2082:	70 95       	com	r23
    2084:	61 95       	neg	r22
    2086:	7f 4f       	sbci	r23, 0xFF	; 255
    2088:	8f 4f       	sbci	r24, 0xFF	; 255
    208a:	9f 4f       	sbci	r25, 0xFF	; 255
    208c:	08 95       	ret

0000208e <__muluhisi3>:
    208e:	0f d0       	rcall	.+30     	; 0x20ae <__umulhisi3>
    2090:	a5 9f       	mul	r26, r21
    2092:	90 0d       	add	r25, r0
    2094:	b4 9f       	mul	r27, r20
    2096:	90 0d       	add	r25, r0
    2098:	a4 9f       	mul	r26, r20
    209a:	80 0d       	add	r24, r0
    209c:	91 1d       	adc	r25, r1
    209e:	11 24       	eor	r1, r1
    20a0:	08 95       	ret

000020a2 <__mulshisi3>:
    20a2:	b7 ff       	sbrs	r27, 7
    20a4:	f4 cf       	rjmp	.-24     	; 0x208e <__muluhisi3>

000020a6 <__mulohisi3>:
    20a6:	f3 df       	rcall	.-26     	; 0x208e <__muluhisi3>
    20a8:	82 1b       	sub	r24, r18
    20aa:	93 0b       	sbc	r25, r19
    20ac:	08 95       	ret

000020ae <__umulhisi3>:
    20ae:	a2 9f       	mul	r26, r18
    20b0:	b0 01       	movw	r22, r0
    20b2:	b3 9f       	mul	r27, r19
    20b4:	c0 01       	movw	r24, r0
    20b6:	a3 9f       	mul	r26, r19
    20b8:	70 0d       	add	r23, r0
    20ba:	81 1d       	adc	r24, r1
    20bc:	11 24       	eor	r1, r1
    20be:	91 1d       	adc	r25, r1
    20c0:	b2 9f       	mul	r27, r18
    20c2:	70 0d       	add	r23, r0
    20c4:	81 1d       	adc	r24, r1
    20c6:	11 24       	eor	r1, r1
    20c8:	91 1d       	adc	r25, r1
    20ca:	08 95       	ret

000020cc <_exit>:
    20cc:	f8 94       	cli

000020ce <__stop_program>:
    20ce:	ff cf       	rjmp	.-2      	; 0x20ce <__stop_program>
