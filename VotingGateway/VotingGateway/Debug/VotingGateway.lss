
VotingGateway.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  000017a2  00001836  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e0  0080013e  0080013e  00001876  2**3
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001874  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000468  00000000  00000000  000018e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d159  00000000  00000000  00001d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000026e3  00000000  00000000  0000eea5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002bdb  00000000  00000000  00011588  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000db4  00000000  00000000  00014164  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000367b  00000000  00000000  00014f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005712  00000000  00000000  00018593  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000420  00000000  00000000  0001dca5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__ctors_end>
       4:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
       8:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
       c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      10:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      14:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      18:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      1c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      20:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      24:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      28:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      2c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      30:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      34:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      38:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      3c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      40:	0c 94 89 04 	jmp	0x912	; 0x912 <__vector_16>
      44:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      48:	0c 94 48 03 	jmp	0x690	; 0x690 <__vector_18>
      4c:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__vector_19>
      50:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      54:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      58:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      5c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      60:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      64:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      68:	9c 07       	cpc	r25, r28
      6a:	12 07       	cpc	r17, r18
      6c:	a0 07       	cpc	r26, r16
      6e:	15 07       	cpc	r17, r21
      70:	18 07       	cpc	r17, r24
      72:	1c 07       	cpc	r17, r28
      74:	1f 07       	cpc	r17, r31
      76:	22 07       	cpc	r18, r18
      78:	9a 07       	cpc	r25, r26
      7a:	9a 07       	cpc	r25, r26
      7c:	25 07       	cpc	r18, r21
      7e:	28 07       	cpc	r18, r24
      80:	2b 07       	cpc	r18, r27
      82:	2e 07       	cpc	r18, r30
      84:	31 07       	cpc	r19, r17
      86:	34 07       	cpc	r19, r20
      88:	a4 07       	cpc	r26, r20
      8a:	42 07       	cpc	r20, r18
      8c:	45 07       	cpc	r20, r21
      8e:	9a 07       	cpc	r25, r26
      90:	49 07       	cpc	r20, r25
      92:	4d 07       	cpc	r20, r29
      94:	50 07       	cpc	r21, r16
      96:	53 07       	cpc	r21, r19
      98:	56 07       	cpc	r21, r22
      9a:	59 07       	cpc	r21, r25
      9c:	87 07       	cpc	r24, r23
      9e:	5c 07       	cpc	r21, r28
      a0:	5f 07       	cpc	r21, r31
      a2:	62 07       	cpc	r22, r18
      a4:	65 07       	cpc	r22, r21
      a6:	68 07       	cpc	r22, r24
      a8:	a8 07       	cpc	r26, r24
      aa:	76 07       	cpc	r23, r22
      ac:	79 07       	cpc	r23, r25
      ae:	7d 07       	cpc	r23, r29
      b0:	80 07       	cpc	r24, r16
      b2:	9a 07       	cpc	r25, r26
      b4:	84 07       	cpc	r24, r20
      b6:	87 07       	cpc	r24, r23
      b8:	8b 07       	cpc	r24, r27
      ba:	8f 07       	cpc	r24, r31
      bc:	93 07       	cpc	r25, r19
      be:	97 07       	cpc	r25, r23

000000c0 <__trampolines_end>:
      c0:	00 00       	nop
      c2:	00 08       	sbc	r0, r0
      c4:	00 02       	muls	r16, r16
      c6:	01 00       	.word	0x0001	; ????
      c8:	00 03       	mulsu	r16, r16
      ca:	04 07       	cpc	r16, r20
	...

000000d4 <digital_pin_to_bit_mask_PGM>:
      d4:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      e4:	04 08 10 20                                         ... 

000000e8 <digital_pin_to_port_PGM>:
      e8:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      f8:	03 03 03 03                                         ....

000000fc <port_to_output_PGM>:
      fc:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000106 <port_to_mode_PGM>:
     106:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000110 <__ctors_start>:
     110:	d4 00       	.word	0x00d4	; ????
     112:	aa 03       	fmulsu	r18, r18

00000114 <__ctors_end>:
     114:	11 24       	eor	r1, r1
     116:	1f be       	out	0x3f, r1	; 63
     118:	cf ef       	ldi	r28, 0xFF	; 255
     11a:	d8 e0       	ldi	r29, 0x08	; 8
     11c:	de bf       	out	0x3e, r29	; 62
     11e:	cd bf       	out	0x3d, r28	; 61

00000120 <__do_copy_data>:
     120:	11 e0       	ldi	r17, 0x01	; 1
     122:	a0 e0       	ldi	r26, 0x00	; 0
     124:	b1 e0       	ldi	r27, 0x01	; 1
     126:	e2 ea       	ldi	r30, 0xA2	; 162
     128:	f7 e1       	ldi	r31, 0x17	; 23
     12a:	02 c0       	rjmp	.+4      	; 0x130 <__do_copy_data+0x10>
     12c:	05 90       	lpm	r0, Z+
     12e:	0d 92       	st	X+, r0
     130:	ae 33       	cpi	r26, 0x3E	; 62
     132:	b1 07       	cpc	r27, r17
     134:	d9 f7       	brne	.-10     	; 0x12c <__do_copy_data+0xc>

00000136 <__do_clear_bss>:
     136:	22 e0       	ldi	r18, 0x02	; 2
     138:	ae e3       	ldi	r26, 0x3E	; 62
     13a:	b1 e0       	ldi	r27, 0x01	; 1
     13c:	01 c0       	rjmp	.+2      	; 0x140 <.do_clear_bss_start>

0000013e <.do_clear_bss_loop>:
     13e:	1d 92       	st	X+, r1

00000140 <.do_clear_bss_start>:
     140:	ae 31       	cpi	r26, 0x1E	; 30
     142:	b2 07       	cpc	r27, r18
     144:	e1 f7       	brne	.-8      	; 0x13e <.do_clear_bss_loop>

00000146 <__do_global_ctors>:
     146:	10 e0       	ldi	r17, 0x00	; 0
     148:	ca e8       	ldi	r28, 0x8A	; 138
     14a:	d0 e0       	ldi	r29, 0x00	; 0
     14c:	04 c0       	rjmp	.+8      	; 0x156 <__do_global_ctors+0x10>
     14e:	21 97       	sbiw	r28, 0x01	; 1
     150:	fe 01       	movw	r30, r28
     152:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__tablejump2__>
     156:	c8 38       	cpi	r28, 0x88	; 136
     158:	d1 07       	cpc	r29, r17
     15a:	c9 f7       	brne	.-14     	; 0x14e <__do_global_ctors+0x8>
     15c:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <main>
     160:	0c 94 cf 0b 	jmp	0x179e	; 0x179e <_exit>

00000164 <__bad_interrupt>:
     164:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000168 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     168:	26 e0       	ldi	r18, 0x06	; 6
     16a:	40 e8       	ldi	r20, 0x80	; 128
     16c:	55 e2       	ldi	r21, 0x25	; 37
     16e:	60 e0       	ldi	r22, 0x00	; 0
     170:	70 e0       	ldi	r23, 0x00	; 0
     172:	83 e7       	ldi	r24, 0x73	; 115
     174:	91 e0       	ldi	r25, 0x01	; 1
     176:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <_ZN14HardwareSerial5beginEmh>
bool stateEntry, stateExit;

void setup() {
	Serial.begin(9600);
	
	mcp2515.reset();
     17a:	88 e6       	ldi	r24, 0x68	; 104
     17c:	91 e0       	ldi	r25, 0x01	; 1
     17e:	0e 94 92 08 	call	0x1124	; 0x1124 <_ZN7MCP25155resetEv>
	mcp2515.setBitrate(CAN_125KBPS);
     182:	6b e0       	ldi	r22, 0x0B	; 11
     184:	88 e6       	ldi	r24, 0x68	; 104
     186:	91 e0       	ldi	r25, 0x01	; 1
     188:	0e 94 bf 07 	call	0xf7e	; 0xf7e <_ZN7MCP251510setBitrateE9CAN_SPEED>
	mcp2515.setNormalMode();
     18c:	88 e6       	ldi	r24, 0x68	; 104
     18e:	91 e0       	ldi	r25, 0x01	; 1
     190:	0e 94 f2 06 	call	0xde4	; 0xde4 <_ZN7MCP251513setNormalModeEv>

	mainState = STATE_IDLE;
     194:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <mainState>
	mainEvent = EVENT_IDLE;
     198:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <mainEvent>
	
	stateEntry = true;
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <stateEntry>
	stateExit = false;
     1a2:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
     1a6:	08 95       	ret

000001a8 <_GLOBAL__sub_I_mcp2515>:
		}
		default:{
			
		}
	}
}
     1a8:	0f 93       	push	r16
     1aa:	1f 93       	push	r17
ï»¿#include "Sketch.h"

MCP2515 mcp2515(SS_PIN);
     1ac:	00 e0       	ldi	r16, 0x00	; 0
     1ae:	10 e0       	ldi	r17, 0x00	; 0
     1b0:	20 e8       	ldi	r18, 0x80	; 128
     1b2:	36 e9       	ldi	r19, 0x96	; 150
     1b4:	48 e9       	ldi	r20, 0x98	; 152
     1b6:	50 e0       	ldi	r21, 0x00	; 0
     1b8:	6a e0       	ldi	r22, 0x0A	; 10
     1ba:	88 e6       	ldi	r24, 0x68	; 104
     1bc:	91 e0       	ldi	r25, 0x01	; 1
     1be:	0e 94 d2 05 	call	0xba4	; 0xba4 <_ZN7MCP2515C1EhmP8SPIClass>
		}
		default:{
			
		}
	}
}
     1c2:	1f 91       	pop	r17
     1c4:	0f 91       	pop	r16
     1c6:	08 95       	ret

000001c8 <loop>:
}


void loop() {

	if (Serial.available() > 0) { 
     1c8:	83 e7       	ldi	r24, 0x73	; 115
     1ca:	91 e0       	ldi	r25, 0x01	; 1
     1cc:	0e 94 07 02 	call	0x40e	; 0x40e <_ZN14HardwareSerial9availableEv>
     1d0:	18 16       	cp	r1, r24
     1d2:	19 06       	cpc	r1, r25
     1d4:	cc f4       	brge	.+50     	; 0x208 <loop+0x40>
		char input = Serial.read(); 
     1d6:	83 e7       	ldi	r24, 0x73	; 115
     1d8:	91 e0       	ldi	r25, 0x01	; 1
     1da:	0e 94 21 02 	call	0x442	; 0x442 <_ZN14HardwareSerial4readEv>

		switch(input){
     1de:	99 27       	eor	r25, r25
     1e0:	88 35       	cpi	r24, 0x58	; 88
     1e2:	91 05       	cpc	r25, r1
     1e4:	71 f0       	breq	.+28     	; 0x202 <loop+0x3a>
     1e6:	24 f4       	brge	.+8      	; 0x1f0 <loop+0x28>
     1e8:	83 35       	cpi	r24, 0x53	; 83
     1ea:	91 05       	cpc	r25, r1
     1ec:	41 f0       	breq	.+16     	; 0x1fe <loop+0x36>
     1ee:	0c c0       	rjmp	.+24     	; 0x208 <loop+0x40>
     1f0:	83 37       	cpi	r24, 0x73	; 115
     1f2:	91 05       	cpc	r25, r1
     1f4:	21 f0       	breq	.+8      	; 0x1fe <loop+0x36>
     1f6:	88 37       	cpi	r24, 0x78	; 120
     1f8:	91 05       	cpc	r25, r1
     1fa:	19 f0       	breq	.+6      	; 0x202 <loop+0x3a>
     1fc:	05 c0       	rjmp	.+10     	; 0x208 <loop+0x40>
			case 's':
			case 'S':{
				mainEvent = EVENT_START_VOTE;
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	01 c0       	rjmp	.+2      	; 0x204 <loop+0x3c>
				break;
			}
			case 'x':
			case 'X':{
				mainEvent = EVENT_STOP_VOTE;
     202:	82 e0       	ldi	r24, 0x02	; 2
     204:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <mainEvent>
			}
		}
	}
	
	
	switch(mainState){
     208:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <mainState>
     20c:	88 23       	and	r24, r24
     20e:	19 f0       	breq	.+6      	; 0x216 <loop+0x4e>
     210:	81 30       	cpi	r24, 0x01	; 1
     212:	19 f0       	breq	.+6      	; 0x21a <loop+0x52>
     214:	08 95       	ret
		case STATE_IDLE:{
			stateIDLE_handler();
     216:	0c 94 0f 01 	jmp	0x21e	; 0x21e <_Z17stateIDLE_handlerv>
			break;
		}
			
		case STATE_ACTIVE:{
			stateACTIVE_handler();
     21a:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <_Z19stateACTIVE_handlerv>

0000021e <_Z17stateIDLE_handlerv>:
#define PERIODICITY				1000


static uint32_t currentTime;

void stateIDLE_handler(){
     21e:	0f 93       	push	r16
     220:	1f 93       	push	r17
	if(stateEntry == true){
     222:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <stateEntry>
     226:	88 23       	and	r24, r24
     228:	19 f1       	breq	.+70     	; 0x270 <_Z17stateIDLE_handlerv+0x52>
		stateEntry = false;
     22a:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <stateEntry>
		
		responseFrame.can_id = CAN_MSG_RESPONSE_ID;
     22e:	80 e1       	ldi	r24, 0x10	; 16
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	a0 e0       	ldi	r26, 0x00	; 0
     234:	b0 e0       	ldi	r27, 0x00	; 0
     236:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <responseFrame>
     23a:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <responseFrame+0x1>
     23e:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <responseFrame+0x2>
     242:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <responseFrame+0x3>
		responseFrame.can_dlc = CAN_MSG_DLC;
     246:	82 e0       	ldi	r24, 0x02	; 2
     248:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <responseFrame+0x4>
		responseFrame.data[1] = RESPONSE_STOP;
     24c:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <responseFrame+0x9>
		
		mcp2515.sendMessage(&responseFrame);
     250:	68 e5       	ldi	r22, 0x58	; 88
     252:	71 e0       	ldi	r23, 0x01	; 1
     254:	88 e6       	ldi	r24, 0x68	; 104
     256:	91 e0       	ldi	r25, 0x01	; 1
     258:	0e 94 c0 09 	call	0x1380	; 0x1380 <_ZN7MCP251511sendMessageEPK9can_frame>
		
		currentTime = millis();
     25c:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <millis>
     260:	60 93 6f 01 	sts	0x016F, r22	; 0x80016f <_ZL11currentTime>
     264:	70 93 70 01 	sts	0x0170, r23	; 0x800170 <_ZL11currentTime+0x1>
     268:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <_ZL11currentTime+0x2>
     26c:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <_ZL11currentTime+0x3>
	}
	
	
	// Keep Sending STOP Frame Every 1 Second
	if(millis() - currentTime >= PERIODICITY){
     270:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <millis>
     274:	00 91 6f 01 	lds	r16, 0x016F	; 0x80016f <_ZL11currentTime>
     278:	10 91 70 01 	lds	r17, 0x0170	; 0x800170 <_ZL11currentTime+0x1>
     27c:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <_ZL11currentTime+0x2>
     280:	30 91 72 01 	lds	r19, 0x0172	; 0x800172 <_ZL11currentTime+0x3>
     284:	dc 01       	movw	r26, r24
     286:	cb 01       	movw	r24, r22
     288:	80 1b       	sub	r24, r16
     28a:	91 0b       	sbc	r25, r17
     28c:	a2 0b       	sbc	r26, r18
     28e:	b3 0b       	sbc	r27, r19
     290:	88 3e       	cpi	r24, 0xE8	; 232
     292:	93 40       	sbci	r25, 0x03	; 3
     294:	a1 05       	cpc	r26, r1
     296:	b1 05       	cpc	r27, r1
     298:	80 f0       	brcs	.+32     	; 0x2ba <_Z17stateIDLE_handlerv+0x9c>
		mcp2515.sendMessage(&responseFrame);
     29a:	68 e5       	ldi	r22, 0x58	; 88
     29c:	71 e0       	ldi	r23, 0x01	; 1
     29e:	88 e6       	ldi	r24, 0x68	; 104
     2a0:	91 e0       	ldi	r25, 0x01	; 1
     2a2:	0e 94 c0 09 	call	0x1380	; 0x1380 <_ZN7MCP251511sendMessageEPK9can_frame>
		currentTime = millis();
     2a6:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <millis>
     2aa:	60 93 6f 01 	sts	0x016F, r22	; 0x80016f <_ZL11currentTime>
     2ae:	70 93 70 01 	sts	0x0170, r23	; 0x800170 <_ZL11currentTime+0x1>
     2b2:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <_ZL11currentTime+0x2>
     2b6:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <_ZL11currentTime+0x3>
	}
	
	
	if(mainEvent == EVENT_START_VOTE){
     2ba:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <mainEvent>
     2be:	81 30       	cpi	r24, 0x01	; 1
     2c0:	31 f4       	brne	.+12     	; 0x2ce <_Z17stateIDLE_handlerv+0xb0>
		mainEvent = EVENT_IDLE;
     2c2:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <mainEvent>
		
		mainState = STATE_ACTIVE;
     2c6:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <mainState>
		stateExit = true;
     2ca:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
	}
	
	if(stateExit == true){
     2ce:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     2d2:	88 23       	and	r24, r24
     2d4:	29 f0       	breq	.+10     	; 0x2e0 <_Z17stateIDLE_handlerv+0xc2>
		stateExit = false;
     2d6:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
		
		stateEntry = true;
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <stateEntry>
	}
}
     2e0:	1f 91       	pop	r17
     2e2:	0f 91       	pop	r16
     2e4:	08 95       	ret

000002e6 <_Z19stateACTIVE_handlerv>:

void stateACTIVE_handler(){
     2e6:	0f 93       	push	r16
     2e8:	1f 93       	push	r17
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
	if(stateEntry == true){
     2ee:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <stateEntry>
     2f2:	88 23       	and	r24, r24
     2f4:	e1 f0       	breq	.+56     	; 0x32e <_Z19stateACTIVE_handlerv+0x48>
		stateEntry = false;
     2f6:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <stateEntry>
		
		responseFrame.can_id = CAN_MSG_RESPONSE_ID;
     2fa:	80 e1       	ldi	r24, 0x10	; 16
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	a0 e0       	ldi	r26, 0x00	; 0
     300:	b0 e0       	ldi	r27, 0x00	; 0
     302:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <responseFrame>
     306:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <responseFrame+0x1>
     30a:	a0 93 5a 01 	sts	0x015A, r26	; 0x80015a <responseFrame+0x2>
     30e:	b0 93 5b 01 	sts	0x015B, r27	; 0x80015b <responseFrame+0x3>
		responseFrame.can_dlc = CAN_MSG_DLC;
     312:	82 e0       	ldi	r24, 0x02	; 2
     314:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <responseFrame+0x4>
		responseFrame.data[1] = RESPONSE_START;
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <responseFrame+0x9>
		
		mcp2515.sendMessage(&responseFrame);
     31e:	68 e5       	ldi	r22, 0x58	; 88
     320:	71 e0       	ldi	r23, 0x01	; 1
     322:	88 e6       	ldi	r24, 0x68	; 104
     324:	91 e0       	ldi	r25, 0x01	; 1
     326:	0e 94 c0 09 	call	0x1380	; 0x1380 <_ZN7MCP251511sendMessageEPK9can_frame>
		
		uint32_t currentTime = millis();
     32a:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <millis>
		
	}
	
	
	// Keep Sending START Frame Every 1 Second
	if(millis() - currentTime >= PERIODICITY){
     32e:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <millis>
     332:	00 91 6f 01 	lds	r16, 0x016F	; 0x80016f <_ZL11currentTime>
     336:	10 91 70 01 	lds	r17, 0x0170	; 0x800170 <_ZL11currentTime+0x1>
     33a:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <_ZL11currentTime+0x2>
     33e:	30 91 72 01 	lds	r19, 0x0172	; 0x800172 <_ZL11currentTime+0x3>
     342:	dc 01       	movw	r26, r24
     344:	cb 01       	movw	r24, r22
     346:	80 1b       	sub	r24, r16
     348:	91 0b       	sbc	r25, r17
     34a:	a2 0b       	sbc	r26, r18
     34c:	b3 0b       	sbc	r27, r19
     34e:	88 3e       	cpi	r24, 0xE8	; 232
     350:	93 40       	sbci	r25, 0x03	; 3
     352:	a1 05       	cpc	r26, r1
     354:	b1 05       	cpc	r27, r1
     356:	80 f0       	brcs	.+32     	; 0x378 <_Z19stateACTIVE_handlerv+0x92>
		mcp2515.sendMessage(&responseFrame);
     358:	68 e5       	ldi	r22, 0x58	; 88
     35a:	71 e0       	ldi	r23, 0x01	; 1
     35c:	88 e6       	ldi	r24, 0x68	; 104
     35e:	91 e0       	ldi	r25, 0x01	; 1
     360:	0e 94 c0 09 	call	0x1380	; 0x1380 <_ZN7MCP251511sendMessageEPK9can_frame>
		currentTime = millis();
     364:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <millis>
     368:	60 93 6f 01 	sts	0x016F, r22	; 0x80016f <_ZL11currentTime>
     36c:	70 93 70 01 	sts	0x0170, r23	; 0x800170 <_ZL11currentTime+0x1>
     370:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <_ZL11currentTime+0x2>
     374:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <_ZL11currentTime+0x3>
	}
	
	
	if (mcp2515.readMessage(&voteFrame) == MCP2515::ERROR_OK && voteFrame.can_id == CAN_MSG_VOTE_ID){
     378:	68 e4       	ldi	r22, 0x48	; 72
     37a:	71 e0       	ldi	r23, 0x01	; 1
     37c:	88 e6       	ldi	r24, 0x68	; 104
     37e:	91 e0       	ldi	r25, 0x01	; 1
     380:	0e 94 b5 0a 	call	0x156a	; 0x156a <_ZN7MCP251511readMessageEP9can_frame>
     384:	81 11       	cpse	r24, r1
     386:	2a c0       	rjmp	.+84     	; 0x3dc <_Z19stateACTIVE_handlerv+0xf6>
     388:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <voteFrame>
     38c:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <voteFrame+0x1>
     390:	a0 91 4a 01 	lds	r26, 0x014A	; 0x80014a <voteFrame+0x2>
     394:	b0 91 4b 01 	lds	r27, 0x014B	; 0x80014b <voteFrame+0x3>
     398:	41 97       	sbiw	r24, 0x11	; 17
     39a:	a1 05       	cpc	r26, r1
     39c:	b1 05       	cpc	r27, r1
     39e:	f1 f4       	brne	.+60     	; 0x3dc <_Z19stateACTIVE_handlerv+0xf6>
     3a0:	c8 e4       	ldi	r28, 0x48	; 72
     3a2:	d1 e0       	ldi	r29, 0x01	; 1
     3a4:	9e 01       	movw	r18, r28
     3a6:	28 54       	subi	r18, 0x48	; 72
     3a8:	31 40       	sbci	r19, 0x01	; 1
     3aa:	21 96       	adiw	r28, 0x01	; 1
		for (int i = 0; i<voteFrame.can_dlc; i++)  {  // print the data
     3ac:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <voteFrame+0x4>
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	28 17       	cp	r18, r24
     3b4:	39 07       	cpc	r19, r25
     3b6:	74 f4       	brge	.+28     	; 0x3d4 <_Z19stateACTIVE_handlerv+0xee>
			Serial.print(voteFrame.data[i],HEX);
     3b8:	40 e1       	ldi	r20, 0x10	; 16
     3ba:	50 e0       	ldi	r21, 0x00	; 0
     3bc:	6f 81       	ldd	r22, Y+7	; 0x07
     3be:	83 e7       	ldi	r24, 0x73	; 115
     3c0:	91 e0       	ldi	r25, 0x01	; 1
     3c2:	0e 94 82 04 	call	0x904	; 0x904 <_ZN5Print5printEhi>
			Serial.print(" ");
     3c6:	69 e0       	ldi	r22, 0x09	; 9
     3c8:	71 e0       	ldi	r23, 0x01	; 1
     3ca:	83 e7       	ldi	r24, 0x73	; 115
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	0e 94 26 04 	call	0x84c	; 0x84c <_ZN5Print5printEPKc>
		currentTime = millis();
	}
	
	
	if (mcp2515.readMessage(&voteFrame) == MCP2515::ERROR_OK && voteFrame.can_id == CAN_MSG_VOTE_ID){
		for (int i = 0; i<voteFrame.can_dlc; i++)  {  // print the data
     3d2:	e8 cf       	rjmp	.-48     	; 0x3a4 <_Z19stateACTIVE_handlerv+0xbe>
			Serial.print(voteFrame.data[i],HEX);
			Serial.print(" ");
		}

		Serial.println();
     3d4:	83 e7       	ldi	r24, 0x73	; 115
     3d6:	91 e0       	ldi	r25, 0x01	; 1
     3d8:	0e 94 28 04 	call	0x850	; 0x850 <_ZN5Print7printlnEv>
	}
	
	if(mainEvent == EVENT_STOP_VOTE){
     3dc:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <mainEvent>
     3e0:	82 30       	cpi	r24, 0x02	; 2
     3e2:	39 f4       	brne	.+14     	; 0x3f2 <_Z19stateACTIVE_handlerv+0x10c>
		mainEvent = EVENT_IDLE;
     3e4:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <mainEvent>
		
		mainState = STATE_IDLE;
     3e8:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <mainState>
		stateExit = true;
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
	}
	
	if(stateExit == true){
     3f2:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     3f6:	88 23       	and	r24, r24
     3f8:	29 f0       	breq	.+10     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		stateExit = false;
     3fa:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
		
		stateEntry = true;
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <stateEntry>
	}
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	1f 91       	pop	r17
     40a:	0f 91       	pop	r16
     40c:	08 95       	ret

0000040e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     40e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     410:	91 8d       	ldd	r25, Z+25	; 0x19
     412:	22 8d       	ldd	r18, Z+26	; 0x1a
     414:	89 2f       	mov	r24, r25
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	80 5c       	subi	r24, 0xC0	; 192
     41a:	9f 4f       	sbci	r25, 0xFF	; 255
     41c:	82 1b       	sub	r24, r18
     41e:	91 09       	sbc	r25, r1
}
     420:	8f 73       	andi	r24, 0x3F	; 63
     422:	99 27       	eor	r25, r25
     424:	08 95       	ret

00000426 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     426:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     428:	91 8d       	ldd	r25, Z+25	; 0x19
     42a:	82 8d       	ldd	r24, Z+26	; 0x1a
     42c:	98 17       	cp	r25, r24
     42e:	31 f0       	breq	.+12     	; 0x43c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     430:	82 8d       	ldd	r24, Z+26	; 0x1a
     432:	e8 0f       	add	r30, r24
     434:	f1 1d       	adc	r31, r1
     436:	85 8d       	ldd	r24, Z+29	; 0x1d
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     43c:	8f ef       	ldi	r24, 0xFF	; 255
     43e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     440:	08 95       	ret

00000442 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     442:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     444:	91 8d       	ldd	r25, Z+25	; 0x19
     446:	82 8d       	ldd	r24, Z+26	; 0x1a
     448:	98 17       	cp	r25, r24
     44a:	61 f0       	breq	.+24     	; 0x464 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     44c:	82 8d       	ldd	r24, Z+26	; 0x1a
     44e:	df 01       	movw	r26, r30
     450:	a8 0f       	add	r26, r24
     452:	b1 1d       	adc	r27, r1
     454:	5d 96       	adiw	r26, 0x1d	; 29
     456:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     458:	92 8d       	ldd	r25, Z+26	; 0x1a
     45a:	9f 5f       	subi	r25, 0xFF	; 255
     45c:	9f 73       	andi	r25, 0x3F	; 63
     45e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     464:	8f ef       	ldi	r24, 0xFF	; 255
     466:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     468:	08 95       	ret

0000046a <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     46a:	fc 01       	movw	r30, r24
     46c:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     46e:	44 8d       	ldd	r20, Z+28	; 0x1c
     470:	25 2f       	mov	r18, r21
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	84 2f       	mov	r24, r20
     476:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     478:	82 1b       	sub	r24, r18
     47a:	93 0b       	sbc	r25, r19
     47c:	54 17       	cp	r21, r20
     47e:	10 f0       	brcs	.+4      	; 0x484 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     480:	cf 96       	adiw	r24, 0x3f	; 63
     482:	08 95       	ret
  return tail - head - 1;
     484:	01 97       	sbiw	r24, 0x01	; 1
}
     486:	08 95       	ret

00000488 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     488:	80 ea       	ldi	r24, 0xA0	; 160
     48a:	93 e0       	ldi	r25, 0x03	; 3
     48c:	89 2b       	or	r24, r25
     48e:	49 f0       	breq	.+18     	; 0x4a2 <_Z14serialEventRunv+0x1a>
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	89 2b       	or	r24, r25
     496:	29 f0       	breq	.+10     	; 0x4a2 <_Z14serialEventRunv+0x1a>
     498:	0e 94 a0 03 	call	0x740	; 0x740 <_Z17Serial0_availablev>
     49c:	81 11       	cpse	r24, r1
     49e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     4a2:	08 95       	ret

000004a4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     4a4:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     4a6:	84 8d       	ldd	r24, Z+28	; 0x1c
     4a8:	df 01       	movw	r26, r30
     4aa:	a8 0f       	add	r26, r24
     4ac:	b1 1d       	adc	r27, r1
     4ae:	a3 5a       	subi	r26, 0xA3	; 163
     4b0:	bf 4f       	sbci	r27, 0xFF	; 255
     4b2:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     4b4:	84 8d       	ldd	r24, Z+28	; 0x1c
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	01 96       	adiw	r24, 0x01	; 1
     4ba:	8f 73       	andi	r24, 0x3F	; 63
     4bc:	99 27       	eor	r25, r25
     4be:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     4c0:	a6 89       	ldd	r26, Z+22	; 0x16
     4c2:	b7 89       	ldd	r27, Z+23	; 0x17
     4c4:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     4c6:	a0 89       	ldd	r26, Z+16	; 0x10
     4c8:	b1 89       	ldd	r27, Z+17	; 0x11
     4ca:	8c 91       	ld	r24, X
     4cc:	83 70       	andi	r24, 0x03	; 3
     4ce:	80 64       	ori	r24, 0x40	; 64
     4d0:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     4d2:	93 8d       	ldd	r25, Z+27	; 0x1b
     4d4:	84 8d       	ldd	r24, Z+28	; 0x1c
     4d6:	98 13       	cpse	r25, r24
     4d8:	06 c0       	rjmp	.+12     	; 0x4e6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     4da:	02 88       	ldd	r0, Z+18	; 0x12
     4dc:	f3 89       	ldd	r31, Z+19	; 0x13
     4de:	e0 2d       	mov	r30, r0
     4e0:	80 81       	ld	r24, Z
     4e2:	8f 7d       	andi	r24, 0xDF	; 223
     4e4:	80 83       	st	Z, r24
     4e6:	08 95       	ret

000004e8 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     4e8:	ef 92       	push	r14
     4ea:	ff 92       	push	r15
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	ec 01       	movw	r28, r24
  _written = true;
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     4fa:	9b 8d       	ldd	r25, Y+27	; 0x1b
     4fc:	8c 8d       	ldd	r24, Y+28	; 0x1c
     4fe:	98 13       	cpse	r25, r24
     500:	05 c0       	rjmp	.+10     	; 0x50c <_ZN14HardwareSerial5writeEh+0x24>
     502:	e8 89       	ldd	r30, Y+16	; 0x10
     504:	f9 89       	ldd	r31, Y+17	; 0x11
     506:	80 81       	ld	r24, Z
     508:	85 fd       	sbrc	r24, 5
     50a:	26 c0       	rjmp	.+76     	; 0x558 <_ZN14HardwareSerial5writeEh+0x70>
     50c:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     50e:	0b 8d       	ldd	r16, Y+27	; 0x1b
     510:	10 e0       	ldi	r17, 0x00	; 0
     512:	0f 5f       	subi	r16, 0xFF	; 255
     514:	1f 4f       	sbci	r17, 0xFF	; 255
     516:	0f 73       	andi	r16, 0x3F	; 63
     518:	11 27       	eor	r17, r17
     51a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     51c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     51e:	e8 12       	cpse	r14, r24
     520:	0c c0       	rjmp	.+24     	; 0x53a <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	07 fc       	sbrc	r0, 7
     526:	fa cf       	rjmp	.-12     	; 0x51c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     528:	e8 89       	ldd	r30, Y+16	; 0x10
     52a:	f9 89       	ldd	r31, Y+17	; 0x11
     52c:	80 81       	ld	r24, Z
     52e:	85 ff       	sbrs	r24, 5
     530:	f5 cf       	rjmp	.-22     	; 0x51c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     532:	ce 01       	movw	r24, r28
     534:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     538:	f1 cf       	rjmp	.-30     	; 0x51c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     53a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     53c:	fe 01       	movw	r30, r28
     53e:	e8 0f       	add	r30, r24
     540:	f1 1d       	adc	r31, r1
     542:	e3 5a       	subi	r30, 0xA3	; 163
     544:	ff 4f       	sbci	r31, 0xFF	; 255
     546:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     548:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     54a:	f8 94       	cli
    _tx_buffer_head = i;
     54c:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     54e:	ea 89       	ldd	r30, Y+18	; 0x12
     550:	fb 89       	ldd	r31, Y+19	; 0x13
     552:	80 81       	ld	r24, Z
     554:	80 62       	ori	r24, 0x20	; 32
     556:	0a c0       	rjmp	.+20     	; 0x56c <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     558:	9f b7       	in	r25, 0x3f	; 63
     55a:	f8 94       	cli
      *_udr = c;
     55c:	ee 89       	ldd	r30, Y+22	; 0x16
     55e:	ff 89       	ldd	r31, Y+23	; 0x17
     560:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     562:	e8 89       	ldd	r30, Y+16	; 0x10
     564:	f9 89       	ldd	r31, Y+17	; 0x11
     566:	80 81       	ld	r24, Z
     568:	83 70       	andi	r24, 0x03	; 3
     56a:	80 64       	ori	r24, 0x40	; 64
     56c:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     56e:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
     578:	1f 91       	pop	r17
     57a:	0f 91       	pop	r16
     57c:	ff 90       	pop	r15
     57e:	ef 90       	pop	r14
     580:	08 95       	ret

00000582 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     588:	88 8d       	ldd	r24, Y+24	; 0x18
     58a:	88 23       	and	r24, r24
     58c:	c9 f0       	breq	.+50     	; 0x5c0 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     58e:	ea 89       	ldd	r30, Y+18	; 0x12
     590:	fb 89       	ldd	r31, Y+19	; 0x13
     592:	80 81       	ld	r24, Z
     594:	85 fd       	sbrc	r24, 5
     596:	05 c0       	rjmp	.+10     	; 0x5a2 <_ZN14HardwareSerial5flushEv+0x20>
     598:	a8 89       	ldd	r26, Y+16	; 0x10
     59a:	b9 89       	ldd	r27, Y+17	; 0x11
     59c:	8c 91       	ld	r24, X
     59e:	86 fd       	sbrc	r24, 6
     5a0:	0f c0       	rjmp	.+30     	; 0x5c0 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	07 fc       	sbrc	r0, 7
     5a6:	f5 cf       	rjmp	.-22     	; 0x592 <_ZN14HardwareSerial5flushEv+0x10>
     5a8:	80 81       	ld	r24, Z
     5aa:	85 ff       	sbrs	r24, 5
     5ac:	f2 cf       	rjmp	.-28     	; 0x592 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     5ae:	a8 89       	ldd	r26, Y+16	; 0x10
     5b0:	b9 89       	ldd	r27, Y+17	; 0x11
     5b2:	8c 91       	ld	r24, X
     5b4:	85 ff       	sbrs	r24, 5
     5b6:	ed cf       	rjmp	.-38     	; 0x592 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     5b8:	ce 01       	movw	r24, r28
     5ba:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     5be:	e7 cf       	rjmp	.-50     	; 0x58e <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     5c0:	df 91       	pop	r29
     5c2:	cf 91       	pop	r28
     5c4:	08 95       	ret

000005c6 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     5c6:	cf 92       	push	r12
     5c8:	df 92       	push	r13
     5ca:	ef 92       	push	r14
     5cc:	ff 92       	push	r15
     5ce:	1f 93       	push	r17
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	ec 01       	movw	r28, r24
     5d6:	6a 01       	movw	r12, r20
     5d8:	7b 01       	movw	r14, r22
     5da:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     5dc:	e8 89       	ldd	r30, Y+16	; 0x10
     5de:	f9 89       	ldd	r31, Y+17	; 0x11
     5e0:	82 e0       	ldi	r24, 0x02	; 2
     5e2:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     5e4:	41 15       	cp	r20, r1
     5e6:	51 4e       	sbci	r21, 0xE1	; 225
     5e8:	61 05       	cpc	r22, r1
     5ea:	71 05       	cpc	r23, r1
     5ec:	b1 f0       	breq	.+44     	; 0x61a <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     5ee:	60 e0       	ldi	r22, 0x00	; 0
     5f0:	79 e0       	ldi	r23, 0x09	; 9
     5f2:	8d e3       	ldi	r24, 0x3D	; 61
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	a7 01       	movw	r20, r14
     5f8:	96 01       	movw	r18, r12
     5fa:	0e 94 9e 0b 	call	0x173c	; 0x173c <__udivmodsi4>
     5fe:	da 01       	movw	r26, r20
     600:	c9 01       	movw	r24, r18
     602:	01 97       	sbiw	r24, 0x01	; 1
     604:	a1 09       	sbc	r26, r1
     606:	b1 09       	sbc	r27, r1
     608:	b6 95       	lsr	r27
     60a:	a7 95       	ror	r26
     60c:	97 95       	ror	r25
     60e:	87 95       	ror	r24
     610:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     612:	21 15       	cp	r18, r1
     614:	80 e1       	ldi	r24, 0x10	; 16
     616:	38 07       	cpc	r19, r24
     618:	a8 f0       	brcs	.+42     	; 0x644 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     61a:	e8 89       	ldd	r30, Y+16	; 0x10
     61c:	f9 89       	ldd	r31, Y+17	; 0x11
     61e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     620:	60 e8       	ldi	r22, 0x80	; 128
     622:	74 e8       	ldi	r23, 0x84	; 132
     624:	8e e1       	ldi	r24, 0x1E	; 30
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	a7 01       	movw	r20, r14
     62a:	96 01       	movw	r18, r12
     62c:	0e 94 9e 0b 	call	0x173c	; 0x173c <__udivmodsi4>
     630:	da 01       	movw	r26, r20
     632:	c9 01       	movw	r24, r18
     634:	01 97       	sbiw	r24, 0x01	; 1
     636:	a1 09       	sbc	r26, r1
     638:	b1 09       	sbc	r27, r1
     63a:	b6 95       	lsr	r27
     63c:	a7 95       	ror	r26
     63e:	97 95       	ror	r25
     640:	87 95       	ror	r24
     642:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     644:	ec 85       	ldd	r30, Y+12	; 0x0c
     646:	fd 85       	ldd	r31, Y+13	; 0x0d
     648:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     64a:	ee 85       	ldd	r30, Y+14	; 0x0e
     64c:	ff 85       	ldd	r31, Y+15	; 0x0f
     64e:	20 83       	st	Z, r18

  _written = false;
     650:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     652:	ec 89       	ldd	r30, Y+20	; 0x14
     654:	fd 89       	ldd	r31, Y+21	; 0x15
     656:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     658:	ea 89       	ldd	r30, Y+18	; 0x12
     65a:	fb 89       	ldd	r31, Y+19	; 0x13
     65c:	80 81       	ld	r24, Z
     65e:	80 61       	ori	r24, 0x10	; 16
     660:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     662:	ea 89       	ldd	r30, Y+18	; 0x12
     664:	fb 89       	ldd	r31, Y+19	; 0x13
     666:	80 81       	ld	r24, Z
     668:	88 60       	ori	r24, 0x08	; 8
     66a:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     66c:	ea 89       	ldd	r30, Y+18	; 0x12
     66e:	fb 89       	ldd	r31, Y+19	; 0x13
     670:	80 81       	ld	r24, Z
     672:	80 68       	ori	r24, 0x80	; 128
     674:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     676:	ea 89       	ldd	r30, Y+18	; 0x12
     678:	fb 89       	ldd	r31, Y+19	; 0x13
     67a:	80 81       	ld	r24, Z
     67c:	8f 7d       	andi	r24, 0xDF	; 223
     67e:	80 83       	st	Z, r24
}
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	1f 91       	pop	r17
     686:	ff 90       	pop	r15
     688:	ef 90       	pop	r14
     68a:	df 90       	pop	r13
     68c:	cf 90       	pop	r12
     68e:	08 95       	ret

00000690 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     690:	1f 92       	push	r1
     692:	0f 92       	push	r0
     694:	0f b6       	in	r0, 0x3f	; 63
     696:	0f 92       	push	r0
     698:	11 24       	eor	r1, r1
     69a:	2f 93       	push	r18
     69c:	8f 93       	push	r24
     69e:	9f 93       	push	r25
     6a0:	ef 93       	push	r30
     6a2:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     6a4:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <Serial+0x10>
     6a8:	f0 91 84 01 	lds	r31, 0x0184	; 0x800184 <Serial+0x11>
     6ac:	80 81       	ld	r24, Z
     6ae:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <Serial+0x16>
     6b2:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <Serial+0x17>
     6b6:	82 fd       	sbrc	r24, 2
     6b8:	12 c0       	rjmp	.+36     	; 0x6de <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     6ba:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     6bc:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <Serial+0x19>
     6c0:	8f 5f       	subi	r24, 0xFF	; 255
     6c2:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     6c4:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <Serial+0x1a>
     6c8:	82 17       	cp	r24, r18
     6ca:	51 f0       	breq	.+20     	; 0x6e0 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     6cc:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <Serial+0x19>
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	ed 58       	subi	r30, 0x8D	; 141
     6d4:	fe 4f       	sbci	r31, 0xFE	; 254
     6d6:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     6d8:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <Serial+0x19>
     6dc:	01 c0       	rjmp	.+2      	; 0x6e0 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     6de:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     6e0:	ff 91       	pop	r31
     6e2:	ef 91       	pop	r30
     6e4:	9f 91       	pop	r25
     6e6:	8f 91       	pop	r24
     6e8:	2f 91       	pop	r18
     6ea:	0f 90       	pop	r0
     6ec:	0f be       	out	0x3f, r0	; 63
     6ee:	0f 90       	pop	r0
     6f0:	1f 90       	pop	r1
     6f2:	18 95       	reti

000006f4 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     6f4:	1f 92       	push	r1
     6f6:	0f 92       	push	r0
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	0f 92       	push	r0
     6fc:	11 24       	eor	r1, r1
     6fe:	2f 93       	push	r18
     700:	3f 93       	push	r19
     702:	4f 93       	push	r20
     704:	5f 93       	push	r21
     706:	6f 93       	push	r22
     708:	7f 93       	push	r23
     70a:	8f 93       	push	r24
     70c:	9f 93       	push	r25
     70e:	af 93       	push	r26
     710:	bf 93       	push	r27
     712:	ef 93       	push	r30
     714:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     716:	83 e7       	ldi	r24, 0x73	; 115
     718:	91 e0       	ldi	r25, 0x01	; 1
     71a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     71e:	ff 91       	pop	r31
     720:	ef 91       	pop	r30
     722:	bf 91       	pop	r27
     724:	af 91       	pop	r26
     726:	9f 91       	pop	r25
     728:	8f 91       	pop	r24
     72a:	7f 91       	pop	r23
     72c:	6f 91       	pop	r22
     72e:	5f 91       	pop	r21
     730:	4f 91       	pop	r20
     732:	3f 91       	pop	r19
     734:	2f 91       	pop	r18
     736:	0f 90       	pop	r0
     738:	0f be       	out	0x3f, r0	; 63
     73a:	0f 90       	pop	r0
     73c:	1f 90       	pop	r1
     73e:	18 95       	reti

00000740 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     740:	83 e7       	ldi	r24, 0x73	; 115
     742:	91 e0       	ldi	r25, 0x01	; 1
     744:	0e 94 07 02 	call	0x40e	; 0x40e <_ZN14HardwareSerial9availableEv>
     748:	21 e0       	ldi	r18, 0x01	; 1
     74a:	89 2b       	or	r24, r25
     74c:	09 f4       	brne	.+2      	; 0x750 <_Z17Serial0_availablev+0x10>
     74e:	20 e0       	ldi	r18, 0x00	; 0
}
     750:	82 2f       	mov	r24, r18
     752:	08 95       	ret

00000754 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     754:	e3 e7       	ldi	r30, 0x73	; 115
     756:	f1 e0       	ldi	r31, 0x01	; 1
     758:	13 82       	std	Z+3, r1	; 0x03
     75a:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     75c:	88 ee       	ldi	r24, 0xE8	; 232
     75e:	93 e0       	ldi	r25, 0x03	; 3
     760:	a0 e0       	ldi	r26, 0x00	; 0
     762:	b0 e0       	ldi	r27, 0x00	; 0
     764:	84 83       	std	Z+4, r24	; 0x04
     766:	95 83       	std	Z+5, r25	; 0x05
     768:	a6 83       	std	Z+6, r26	; 0x06
     76a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     76c:	8f e0       	ldi	r24, 0x0F	; 15
     76e:	91 e0       	ldi	r25, 0x01	; 1
     770:	91 83       	std	Z+1, r25	; 0x01
     772:	80 83       	st	Z, r24
     774:	85 ec       	ldi	r24, 0xC5	; 197
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	95 87       	std	Z+13, r25	; 0x0d
     77a:	84 87       	std	Z+12, r24	; 0x0c
     77c:	84 ec       	ldi	r24, 0xC4	; 196
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	97 87       	std	Z+15, r25	; 0x0f
     782:	86 87       	std	Z+14, r24	; 0x0e
     784:	80 ec       	ldi	r24, 0xC0	; 192
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	91 8b       	std	Z+17, r25	; 0x11
     78a:	80 8b       	std	Z+16, r24	; 0x10
     78c:	81 ec       	ldi	r24, 0xC1	; 193
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	93 8b       	std	Z+19, r25	; 0x13
     792:	82 8b       	std	Z+18, r24	; 0x12
     794:	82 ec       	ldi	r24, 0xC2	; 194
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	95 8b       	std	Z+21, r25	; 0x15
     79a:	84 8b       	std	Z+20, r24	; 0x14
     79c:	86 ec       	ldi	r24, 0xC6	; 198
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	97 8b       	std	Z+23, r25	; 0x17
     7a2:	86 8b       	std	Z+22, r24	; 0x16
     7a4:	11 8e       	std	Z+25, r1	; 0x19
     7a6:	12 8e       	std	Z+26, r1	; 0x1a
     7a8:	13 8e       	std	Z+27, r1	; 0x1b
     7aa:	14 8e       	std	Z+28, r1	; 0x1c
     7ac:	08 95       	ret

000007ae <initVariant>:
     7ae:	08 95       	ret

000007b0 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     7b0:	0e 94 40 05 	call	0xa80	; 0xa80 <init>

	initVariant();
     7b4:	0e 94 d7 03 	call	0x7ae	; 0x7ae <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     7b8:	0e 94 b4 00 	call	0x168	; 0x168 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     7bc:	c4 e4       	ldi	r28, 0x44	; 68
     7be:	d2 e0       	ldi	r29, 0x02	; 2
#endif
	
	setup();
    
	for (;;) {
		loop();
     7c0:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <loop>
		if (serialEventRun) serialEventRun();
     7c4:	20 97       	sbiw	r28, 0x00	; 0
     7c6:	e1 f3       	breq	.-8      	; 0x7c0 <main+0x10>
     7c8:	0e 94 44 02 	call	0x488	; 0x488 <_Z14serialEventRunv>
     7cc:	f9 cf       	rjmp	.-14     	; 0x7c0 <main+0x10>

000007ce <_ZN5Print5writeEPKhj>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
     7ce:	cf 92       	push	r12
     7d0:	df 92       	push	r13
     7d2:	ef 92       	push	r14
     7d4:	ff 92       	push	r15
     7d6:	0f 93       	push	r16
     7d8:	1f 93       	push	r17
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	6c 01       	movw	r12, r24
     7e0:	7a 01       	movw	r14, r20
     7e2:	8b 01       	movw	r16, r22
     7e4:	c0 e0       	ldi	r28, 0x00	; 0
     7e6:	d0 e0       	ldi	r29, 0x00	; 0
     7e8:	ce 15       	cp	r28, r14
     7ea:	df 05       	cpc	r29, r15
     7ec:	81 f0       	breq	.+32     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     7ee:	d8 01       	movw	r26, r16
     7f0:	6d 91       	ld	r22, X+
     7f2:	8d 01       	movw	r16, r26
     7f4:	d6 01       	movw	r26, r12
     7f6:	ed 91       	ld	r30, X+
     7f8:	fc 91       	ld	r31, X
     7fa:	01 90       	ld	r0, Z+
     7fc:	f0 81       	ld	r31, Z
     7fe:	e0 2d       	mov	r30, r0
     800:	c6 01       	movw	r24, r12
     802:	09 95       	icall
     804:	89 2b       	or	r24, r25
     806:	11 f0       	breq	.+4      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     808:	21 96       	adiw	r28, 0x01	; 1
     80a:	ee cf       	rjmp	.-36     	; 0x7e8 <_ZN5Print5writeEPKhj+0x1a>
     80c:	7e 01       	movw	r14, r28
     80e:	c7 01       	movw	r24, r14
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	1f 91       	pop	r17
     816:	0f 91       	pop	r16
     818:	ff 90       	pop	r15
     81a:	ef 90       	pop	r14
     81c:	df 90       	pop	r13
     81e:	cf 90       	pop	r12
     820:	08 95       	ret

00000822 <_ZN5Print5writeEPKc>:
     822:	61 15       	cp	r22, r1
     824:	71 05       	cpc	r23, r1
     826:	79 f0       	breq	.+30     	; 0x846 <_ZN5Print5writeEPKc+0x24>
     828:	fb 01       	movw	r30, r22
     82a:	01 90       	ld	r0, Z+
     82c:	00 20       	and	r0, r0
     82e:	e9 f7       	brne	.-6      	; 0x82a <_ZN5Print5writeEPKc+0x8>
     830:	31 97       	sbiw	r30, 0x01	; 1
     832:	af 01       	movw	r20, r30
     834:	46 1b       	sub	r20, r22
     836:	57 0b       	sbc	r21, r23
     838:	dc 01       	movw	r26, r24
     83a:	ed 91       	ld	r30, X+
     83c:	fc 91       	ld	r31, X
     83e:	02 80       	ldd	r0, Z+2	; 0x02
     840:	f3 81       	ldd	r31, Z+3	; 0x03
     842:	e0 2d       	mov	r30, r0
     844:	09 94       	ijmp
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	08 95       	ret

0000084c <_ZN5Print5printEPKc>:
     84c:	0c 94 11 04 	jmp	0x822	; 0x822 <_ZN5Print5writeEPKc>

00000850 <_ZN5Print7printlnEv>:
     850:	6d e1       	ldi	r22, 0x1D	; 29
     852:	71 e0       	ldi	r23, 0x01	; 1
     854:	0c 94 11 04 	jmp	0x822	; 0x822 <_ZN5Print5writeEPKc>

00000858 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
     858:	8f 92       	push	r8
     85a:	9f 92       	push	r9
     85c:	af 92       	push	r10
     85e:	bf 92       	push	r11
     860:	ef 92       	push	r14
     862:	ff 92       	push	r15
     864:	0f 93       	push	r16
     866:	1f 93       	push	r17
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
     870:	a1 97       	sbiw	r28, 0x21	; 33
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	f8 94       	cli
     876:	de bf       	out	0x3e, r29	; 62
     878:	0f be       	out	0x3f, r0	; 63
     87a:	cd bf       	out	0x3d, r28	; 61
     87c:	7c 01       	movw	r14, r24
     87e:	fa 01       	movw	r30, r20
     880:	cb 01       	movw	r24, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     882:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     884:	22 30       	cpi	r18, 0x02	; 2
     886:	08 f4       	brcc	.+2      	; 0x88a <_ZN5Print11printNumberEmh+0x32>
     888:	2a e0       	ldi	r18, 0x0A	; 10
     88a:	8e 01       	movw	r16, r28
     88c:	0f 5d       	subi	r16, 0xDF	; 223
     88e:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
     890:	82 2e       	mov	r8, r18
     892:	91 2c       	mov	r9, r1
     894:	a1 2c       	mov	r10, r1
     896:	b1 2c       	mov	r11, r1
     898:	bf 01       	movw	r22, r30
     89a:	a5 01       	movw	r20, r10
     89c:	94 01       	movw	r18, r8
     89e:	0e 94 9e 0b 	call	0x173c	; 0x173c <__udivmodsi4>
    n /= base;
     8a2:	f9 01       	movw	r30, r18
     8a4:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     8a6:	01 50       	subi	r16, 0x01	; 1
     8a8:	11 09       	sbc	r17, r1
     8aa:	6a 30       	cpi	r22, 0x0A	; 10
     8ac:	10 f4       	brcc	.+4      	; 0x8b2 <_ZN5Print11printNumberEmh+0x5a>
     8ae:	60 5d       	subi	r22, 0xD0	; 208
     8b0:	01 c0       	rjmp	.+2      	; 0x8b4 <_ZN5Print11printNumberEmh+0x5c>
     8b2:	69 5c       	subi	r22, 0xC9	; 201
     8b4:	d8 01       	movw	r26, r16
     8b6:	6c 93       	st	X, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
     8b8:	23 2b       	or	r18, r19
     8ba:	24 2b       	or	r18, r20
     8bc:	25 2b       	or	r18, r21
     8be:	61 f7       	brne	.-40     	; 0x898 <_ZN5Print11printNumberEmh+0x40>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
     8c0:	b8 01       	movw	r22, r16
     8c2:	c7 01       	movw	r24, r14
     8c4:	0e 94 11 04 	call	0x822	; 0x822 <_ZN5Print5writeEPKc>
}
     8c8:	a1 96       	adiw	r28, 0x21	; 33
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	f8 94       	cli
     8ce:	de bf       	out	0x3e, r29	; 62
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	cd bf       	out	0x3d, r28	; 61
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	1f 91       	pop	r17
     8da:	0f 91       	pop	r16
     8dc:	ff 90       	pop	r15
     8de:	ef 90       	pop	r14
     8e0:	bf 90       	pop	r11
     8e2:	af 90       	pop	r10
     8e4:	9f 90       	pop	r9
     8e6:	8f 90       	pop	r8
     8e8:	08 95       	ret

000008ea <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
     8ea:	21 15       	cp	r18, r1
     8ec:	31 05       	cpc	r19, r1
     8ee:	41 f4       	brne	.+16     	; 0x900 <__stack+0x1>
     8f0:	dc 01       	movw	r26, r24
     8f2:	ed 91       	ld	r30, X+
     8f4:	fc 91       	ld	r31, X
     8f6:	01 90       	ld	r0, Z+
     8f8:	f0 81       	ld	r31, Z
     8fa:	e0 2d       	mov	r30, r0
     8fc:	64 2f       	mov	r22, r20
     8fe:	09 94       	ijmp
  else return printNumber(n, base);
     900:	0c 94 2c 04 	jmp	0x858	; 0x858 <_ZN5Print11printNumberEmh>

00000904 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
     904:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
     906:	46 2f       	mov	r20, r22
     908:	50 e0       	ldi	r21, 0x00	; 0
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	0c 94 75 04 	jmp	0x8ea	; 0x8ea <_ZN5Print5printEmi>

00000912 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     912:	1f 92       	push	r1
     914:	0f 92       	push	r0
     916:	0f b6       	in	r0, 0x3f	; 63
     918:	0f 92       	push	r0
     91a:	11 24       	eor	r1, r1
     91c:	2f 93       	push	r18
     91e:	3f 93       	push	r19
     920:	8f 93       	push	r24
     922:	9f 93       	push	r25
     924:	af 93       	push	r26
     926:	bf 93       	push	r27
     928:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <timer0_millis>
     92c:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <timer0_millis+0x1>
     930:	a0 91 13 02 	lds	r26, 0x0213	; 0x800213 <timer0_millis+0x2>
     934:	b0 91 14 02 	lds	r27, 0x0214	; 0x800214 <timer0_millis+0x3>
     938:	30 91 10 02 	lds	r19, 0x0210	; 0x800210 <timer0_fract>
     93c:	23 e0       	ldi	r18, 0x03	; 3
     93e:	23 0f       	add	r18, r19
     940:	2d 37       	cpi	r18, 0x7D	; 125
     942:	20 f4       	brcc	.+8      	; 0x94c <__vector_16+0x3a>
     944:	01 96       	adiw	r24, 0x01	; 1
     946:	a1 1d       	adc	r26, r1
     948:	b1 1d       	adc	r27, r1
     94a:	05 c0       	rjmp	.+10     	; 0x956 <__vector_16+0x44>
     94c:	26 e8       	ldi	r18, 0x86	; 134
     94e:	23 0f       	add	r18, r19
     950:	02 96       	adiw	r24, 0x02	; 2
     952:	a1 1d       	adc	r26, r1
     954:	b1 1d       	adc	r27, r1
     956:	20 93 10 02 	sts	0x0210, r18	; 0x800210 <timer0_fract>
     95a:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <timer0_millis>
     95e:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <timer0_millis+0x1>
     962:	a0 93 13 02 	sts	0x0213, r26	; 0x800213 <timer0_millis+0x2>
     966:	b0 93 14 02 	sts	0x0214, r27	; 0x800214 <timer0_millis+0x3>
     96a:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <timer0_overflow_count>
     96e:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <timer0_overflow_count+0x1>
     972:	a0 91 17 02 	lds	r26, 0x0217	; 0x800217 <timer0_overflow_count+0x2>
     976:	b0 91 18 02 	lds	r27, 0x0218	; 0x800218 <timer0_overflow_count+0x3>
     97a:	01 96       	adiw	r24, 0x01	; 1
     97c:	a1 1d       	adc	r26, r1
     97e:	b1 1d       	adc	r27, r1
     980:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <timer0_overflow_count>
     984:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <timer0_overflow_count+0x1>
     988:	a0 93 17 02 	sts	0x0217, r26	; 0x800217 <timer0_overflow_count+0x2>
     98c:	b0 93 18 02 	sts	0x0218, r27	; 0x800218 <timer0_overflow_count+0x3>
     990:	bf 91       	pop	r27
     992:	af 91       	pop	r26
     994:	9f 91       	pop	r25
     996:	8f 91       	pop	r24
     998:	3f 91       	pop	r19
     99a:	2f 91       	pop	r18
     99c:	0f 90       	pop	r0
     99e:	0f be       	out	0x3f, r0	; 63
     9a0:	0f 90       	pop	r0
     9a2:	1f 90       	pop	r1
     9a4:	18 95       	reti

000009a6 <millis>:
     9a6:	2f b7       	in	r18, 0x3f	; 63
     9a8:	f8 94       	cli
     9aa:	60 91 11 02 	lds	r22, 0x0211	; 0x800211 <timer0_millis>
     9ae:	70 91 12 02 	lds	r23, 0x0212	; 0x800212 <timer0_millis+0x1>
     9b2:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <timer0_millis+0x2>
     9b6:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <timer0_millis+0x3>
     9ba:	2f bf       	out	0x3f, r18	; 63
     9bc:	08 95       	ret

000009be <micros>:
     9be:	3f b7       	in	r19, 0x3f	; 63
     9c0:	f8 94       	cli
     9c2:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <timer0_overflow_count>
     9c6:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <timer0_overflow_count+0x1>
     9ca:	a0 91 17 02 	lds	r26, 0x0217	; 0x800217 <timer0_overflow_count+0x2>
     9ce:	b0 91 18 02 	lds	r27, 0x0218	; 0x800218 <timer0_overflow_count+0x3>
     9d2:	26 b5       	in	r18, 0x26	; 38
     9d4:	a8 9b       	sbis	0x15, 0	; 21
     9d6:	05 c0       	rjmp	.+10     	; 0x9e2 <micros+0x24>
     9d8:	2f 3f       	cpi	r18, 0xFF	; 255
     9da:	19 f0       	breq	.+6      	; 0x9e2 <micros+0x24>
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	a1 1d       	adc	r26, r1
     9e0:	b1 1d       	adc	r27, r1
     9e2:	3f bf       	out	0x3f, r19	; 63
     9e4:	ba 2f       	mov	r27, r26
     9e6:	a9 2f       	mov	r26, r25
     9e8:	98 2f       	mov	r25, r24
     9ea:	88 27       	eor	r24, r24
     9ec:	82 0f       	add	r24, r18
     9ee:	91 1d       	adc	r25, r1
     9f0:	a1 1d       	adc	r26, r1
     9f2:	b1 1d       	adc	r27, r1
     9f4:	bc 01       	movw	r22, r24
     9f6:	cd 01       	movw	r24, r26
     9f8:	42 e0       	ldi	r20, 0x02	; 2
     9fa:	66 0f       	add	r22, r22
     9fc:	77 1f       	adc	r23, r23
     9fe:	88 1f       	adc	r24, r24
     a00:	99 1f       	adc	r25, r25
     a02:	4a 95       	dec	r20
     a04:	d1 f7       	brne	.-12     	; 0x9fa <micros+0x3c>
     a06:	08 95       	ret

00000a08 <delay>:
     a08:	8f 92       	push	r8
     a0a:	9f 92       	push	r9
     a0c:	af 92       	push	r10
     a0e:	bf 92       	push	r11
     a10:	cf 92       	push	r12
     a12:	df 92       	push	r13
     a14:	ef 92       	push	r14
     a16:	ff 92       	push	r15
     a18:	6b 01       	movw	r12, r22
     a1a:	7c 01       	movw	r14, r24
     a1c:	0e 94 df 04 	call	0x9be	; 0x9be <micros>
     a20:	4b 01       	movw	r8, r22
     a22:	5c 01       	movw	r10, r24
     a24:	c1 14       	cp	r12, r1
     a26:	d1 04       	cpc	r13, r1
     a28:	e1 04       	cpc	r14, r1
     a2a:	f1 04       	cpc	r15, r1
     a2c:	01 f1       	breq	.+64     	; 0xa6e <delay+0x66>
     a2e:	0e 94 09 0b 	call	0x1612	; 0x1612 <yield>
     a32:	0e 94 df 04 	call	0x9be	; 0x9be <micros>
     a36:	dc 01       	movw	r26, r24
     a38:	cb 01       	movw	r24, r22
     a3a:	88 19       	sub	r24, r8
     a3c:	99 09       	sbc	r25, r9
     a3e:	aa 09       	sbc	r26, r10
     a40:	bb 09       	sbc	r27, r11
     a42:	88 3e       	cpi	r24, 0xE8	; 232
     a44:	93 40       	sbci	r25, 0x03	; 3
     a46:	a1 05       	cpc	r26, r1
     a48:	b1 05       	cpc	r27, r1
     a4a:	60 f3       	brcs	.-40     	; 0xa24 <delay+0x1c>
     a4c:	21 e0       	ldi	r18, 0x01	; 1
     a4e:	c2 1a       	sub	r12, r18
     a50:	d1 08       	sbc	r13, r1
     a52:	e1 08       	sbc	r14, r1
     a54:	f1 08       	sbc	r15, r1
     a56:	88 ee       	ldi	r24, 0xE8	; 232
     a58:	88 0e       	add	r8, r24
     a5a:	83 e0       	ldi	r24, 0x03	; 3
     a5c:	98 1e       	adc	r9, r24
     a5e:	a1 1c       	adc	r10, r1
     a60:	b1 1c       	adc	r11, r1
     a62:	c1 14       	cp	r12, r1
     a64:	d1 04       	cpc	r13, r1
     a66:	e1 04       	cpc	r14, r1
     a68:	f1 04       	cpc	r15, r1
     a6a:	19 f7       	brne	.-58     	; 0xa32 <delay+0x2a>
     a6c:	db cf       	rjmp	.-74     	; 0xa24 <delay+0x1c>
     a6e:	ff 90       	pop	r15
     a70:	ef 90       	pop	r14
     a72:	df 90       	pop	r13
     a74:	cf 90       	pop	r12
     a76:	bf 90       	pop	r11
     a78:	af 90       	pop	r10
     a7a:	9f 90       	pop	r9
     a7c:	8f 90       	pop	r8
     a7e:	08 95       	ret

00000a80 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     a80:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     a82:	84 b5       	in	r24, 0x24	; 36
     a84:	82 60       	ori	r24, 0x02	; 2
     a86:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     a88:	84 b5       	in	r24, 0x24	; 36
     a8a:	81 60       	ori	r24, 0x01	; 1
     a8c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     a8e:	85 b5       	in	r24, 0x25	; 37
     a90:	82 60       	ori	r24, 0x02	; 2
     a92:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     a94:	85 b5       	in	r24, 0x25	; 37
     a96:	81 60       	ori	r24, 0x01	; 1
     a98:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     a9a:	ee e6       	ldi	r30, 0x6E	; 110
     a9c:	f0 e0       	ldi	r31, 0x00	; 0
     a9e:	80 81       	ld	r24, Z
     aa0:	81 60       	ori	r24, 0x01	; 1
     aa2:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     aa4:	e1 e8       	ldi	r30, 0x81	; 129
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     aaa:	80 81       	ld	r24, Z
     aac:	82 60       	ori	r24, 0x02	; 2
     aae:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     ab0:	80 81       	ld	r24, Z
     ab2:	81 60       	ori	r24, 0x01	; 1
     ab4:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     ab6:	e0 e8       	ldi	r30, 0x80	; 128
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	80 81       	ld	r24, Z
     abc:	81 60       	ori	r24, 0x01	; 1
     abe:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     ac0:	e1 eb       	ldi	r30, 0xB1	; 177
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	80 81       	ld	r24, Z
     ac6:	84 60       	ori	r24, 0x04	; 4
     ac8:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     aca:	e0 eb       	ldi	r30, 0xB0	; 176
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	80 81       	ld	r24, Z
     ad0:	81 60       	ori	r24, 0x01	; 1
     ad2:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     ad4:	ea e7       	ldi	r30, 0x7A	; 122
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	80 81       	ld	r24, Z
     ada:	84 60       	ori	r24, 0x04	; 4
     adc:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     ade:	80 81       	ld	r24, Z
     ae0:	82 60       	ori	r24, 0x02	; 2
     ae2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     ae4:	80 81       	ld	r24, Z
     ae6:	81 60       	ori	r24, 0x01	; 1
     ae8:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     aea:	80 81       	ld	r24, Z
     aec:	80 68       	ori	r24, 0x80	; 128
     aee:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     af0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     af4:	08 95       	ret

00000af6 <_ZN8SPIClass8transferEh>:
    modifyRegister(MCP_CANCTRL, CANCTRL_CLKEN, CANCTRL_CLKEN);

    /* Turn off CLKOUT for SOF */
    modifyRegister(MCP_CNF3, CNF3_SOF, 0x00);
    return ERROR_OK;
}
     af6:	8e bd       	out	0x2e, r24	; 46
     af8:	00 00       	nop
     afa:	0d b4       	in	r0, 0x2d	; 45
     afc:	07 fe       	sbrs	r0, 7
     afe:	fd cf       	rjmp	.-6      	; 0xafa <_ZN8SPIClass8transferEh+0x4>
     b00:	8e b5       	in	r24, 0x2e	; 46
     b02:	08 95       	ret

00000b04 <_ZN7MCP25158startSPIEv>:
     b04:	fc 01       	movw	r30, r24
     b06:	41 81       	ldd	r20, Z+1	; 0x01
     b08:	52 81       	ldd	r21, Z+2	; 0x02
     b0a:	63 81       	ldd	r22, Z+3	; 0x03
     b0c:	74 81       	ldd	r23, Z+4	; 0x04
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	92 e1       	ldi	r25, 0x12	; 18
     b12:	aa e7       	ldi	r26, 0x7A	; 122
     b14:	b0 e0       	ldi	r27, 0x00	; 0
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	48 17       	cp	r20, r24
     b1a:	59 07       	cpc	r21, r25
     b1c:	6a 07       	cpc	r22, r26
     b1e:	7b 07       	cpc	r23, r27
     b20:	40 f4       	brcc	.+16     	; 0xb32 <_ZN7MCP25158startSPIEv+0x2e>
     b22:	b6 95       	lsr	r27
     b24:	a7 95       	ror	r26
     b26:	97 95       	ror	r25
     b28:	87 95       	ror	r24
     b2a:	2f 5f       	subi	r18, 0xFF	; 255
     b2c:	26 30       	cpi	r18, 0x06	; 6
     b2e:	a1 f7       	brne	.-24     	; 0xb18 <_ZN7MCP25158startSPIEv+0x14>
     b30:	27 e0       	ldi	r18, 0x07	; 7
     b32:	91 e0       	ldi	r25, 0x01	; 1
     b34:	92 27       	eor	r25, r18
     b36:	29 2f       	mov	r18, r25
     b38:	20 6a       	ori	r18, 0xA0	; 160
     b3a:	26 95       	lsr	r18
     b3c:	91 70       	andi	r25, 0x01	; 1
     b3e:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <_ZN8SPIClass13interruptModeE>
     b42:	88 23       	and	r24, r24
     b44:	99 f0       	breq	.+38     	; 0xb6c <_ZN7MCP25158startSPIEv+0x68>
     b46:	8f b7       	in	r24, 0x3f	; 63
     b48:	f8 94       	cli
     b4a:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <_ZN8SPIClass13interruptModeE>
     b4e:	31 30       	cpi	r19, 0x01	; 1
     b50:	59 f4       	brne	.+22     	; 0xb68 <_ZN7MCP25158startSPIEv+0x64>
     b52:	3d b3       	in	r19, 0x1d	; 29
     b54:	30 93 19 02 	sts	0x0219, r19	; 0x800219 <_ZN8SPIClass13interruptSaveE>
     b58:	4d b3       	in	r20, 0x1d	; 29
     b5a:	30 91 1a 02 	lds	r19, 0x021A	; 0x80021a <_ZN8SPIClass13interruptMaskE>
     b5e:	30 95       	com	r19
     b60:	34 23       	and	r19, r20
     b62:	3d bb       	out	0x1d, r19	; 29
     b64:	8f bf       	out	0x3f, r24	; 63
     b66:	02 c0       	rjmp	.+4      	; 0xb6c <_ZN7MCP25158startSPIEv+0x68>
     b68:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <_ZN8SPIClass13interruptSaveE>
     b6c:	2c bd       	out	0x2c, r18	; 44
     b6e:	9d bd       	out	0x2d, r25	; 45
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	0c 94 6f 0b 	jmp	0x16de	; 0x16de <digitalWrite>

00000b78 <_ZN7MCP25156endSPIEv>:
     b78:	61 e0       	ldi	r22, 0x01	; 1
     b7a:	fc 01       	movw	r30, r24
     b7c:	80 81       	ld	r24, Z
     b7e:	0e 94 6f 0b 	call	0x16de	; 0x16de <digitalWrite>
     b82:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <_ZN8SPIClass13interruptModeE>
     b86:	88 23       	and	r24, r24
     b88:	61 f0       	breq	.+24     	; 0xba2 <_ZN7MCP25156endSPIEv+0x2a>
     b8a:	9f b7       	in	r25, 0x3f	; 63
     b8c:	f8 94       	cli
     b8e:	20 91 1b 02 	lds	r18, 0x021B	; 0x80021b <_ZN8SPIClass13interruptModeE>
     b92:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <_ZN8SPIClass13interruptSaveE>
     b96:	21 30       	cpi	r18, 0x01	; 1
     b98:	19 f4       	brne	.+6      	; 0xba0 <_ZN7MCP25156endSPIEv+0x28>
     b9a:	8d bb       	out	0x1d, r24	; 29
     b9c:	9f bf       	out	0x3f, r25	; 63
     b9e:	08 95       	ret
     ba0:	8f bf       	out	0x3f, r24	; 63
     ba2:	08 95       	ret

00000ba4 <_ZN7MCP2515C1EhmP8SPIClass>:
     ba4:	8f 92       	push	r8
     ba6:	9f 92       	push	r9
     ba8:	af 92       	push	r10
     baa:	bf 92       	push	r11
     bac:	ff 92       	push	r15
     bae:	0f 93       	push	r16
     bb0:	1f 93       	push	r17
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	ec 01       	movw	r28, r24
     bb8:	f6 2e       	mov	r15, r22
     bba:	49 01       	movw	r8, r18
     bbc:	5a 01       	movw	r10, r20
     bbe:	01 15       	cp	r16, r1
     bc0:	11 05       	cpc	r17, r1
     bc2:	19 f0       	breq	.+6      	; 0xbca <_ZN7MCP2515C1EhmP8SPIClass+0x26>
     bc4:	1e 83       	std	Y+6, r17	; 0x06
     bc6:	0d 83       	std	Y+5, r16	; 0x05
     bc8:	06 c0       	rjmp	.+12     	; 0xbd6 <_ZN7MCP2515C1EhmP8SPIClass+0x32>
     bca:	8d e1       	ldi	r24, 0x1D	; 29
     bcc:	92 e0       	ldi	r25, 0x02	; 2
     bce:	9e 83       	std	Y+6, r25	; 0x06
     bd0:	8d 83       	std	Y+5, r24	; 0x05
     bd2:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <_ZN8SPIClass5beginEv>
     bd6:	f8 82       	st	Y, r15
     bd8:	89 82       	std	Y+1, r8	; 0x01
     bda:	9a 82       	std	Y+2, r9	; 0x02
     bdc:	ab 82       	std	Y+3, r10	; 0x03
     bde:	bc 82       	std	Y+4, r11	; 0x04
     be0:	61 e0       	ldi	r22, 0x01	; 1
     be2:	8f 2d       	mov	r24, r15
     be4:	0e 94 33 0b 	call	0x1666	; 0x1666 <pinMode>
     be8:	ce 01       	movw	r24, r28
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	1f 91       	pop	r17
     bf0:	0f 91       	pop	r16
     bf2:	ff 90       	pop	r15
     bf4:	bf 90       	pop	r11
     bf6:	af 90       	pop	r10
     bf8:	9f 90       	pop	r9
     bfa:	8f 90       	pop	r8
     bfc:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <_ZN7MCP25156endSPIEv>

00000c00 <_ZN7MCP251512readRegisterENS_8REGISTERE>:
     c00:	1f 93       	push	r17
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
     c06:	ec 01       	movw	r28, r24
     c08:	16 2f       	mov	r17, r22
     c0a:	0e 94 82 05 	call	0xb04	; 0xb04 <_ZN7MCP25158startSPIEv>
     c0e:	83 e0       	ldi	r24, 0x03	; 3
     c10:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN8SPIClass8transferEh>
     c14:	81 2f       	mov	r24, r17
     c16:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN8SPIClass8transferEh>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN8SPIClass8transferEh>
     c20:	18 2f       	mov	r17, r24
     c22:	ce 01       	movw	r24, r28
     c24:	0e 94 bc 05 	call	0xb78	; 0xb78 <_ZN7MCP25156endSPIEv>
     c28:	81 2f       	mov	r24, r17
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	1f 91       	pop	r17
     c30:	08 95       	ret

00000c32 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>:
     c32:	df 92       	push	r13
     c34:	ef 92       	push	r14
     c36:	ff 92       	push	r15
     c38:	0f 93       	push	r16
     c3a:	1f 93       	push	r17
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	8c 01       	movw	r16, r24
     c42:	c6 2f       	mov	r28, r22
     c44:	d4 2e       	mov	r13, r20
     c46:	e5 2e       	mov	r14, r21
     c48:	f2 2e       	mov	r15, r18
     c4a:	0e 94 82 05 	call	0xb04	; 0xb04 <_ZN7MCP25158startSPIEv>
     c4e:	83 e0       	ldi	r24, 0x03	; 3
     c50:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN8SPIClass8transferEh>
     c54:	8c 2f       	mov	r24, r28
     c56:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN8SPIClass8transferEh>
     c5a:	cd 2d       	mov	r28, r13
     c5c:	de 2d       	mov	r29, r14
     c5e:	ce 01       	movw	r24, r28
     c60:	8f 0d       	add	r24, r15
     c62:	91 1d       	adc	r25, r1
     c64:	7c 01       	movw	r14, r24
     c66:	ce 15       	cp	r28, r14
     c68:	df 05       	cpc	r29, r15
     c6a:	29 f0       	breq	.+10     	; 0xc76 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x44>
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN8SPIClass8transferEh>
     c72:	89 93       	st	Y+, r24
     c74:	f8 cf       	rjmp	.-16     	; 0xc66 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x34>
     c76:	c8 01       	movw	r24, r16
     c78:	df 91       	pop	r29
     c7a:	cf 91       	pop	r28
     c7c:	1f 91       	pop	r17
     c7e:	0f 91       	pop	r16
     c80:	ff 90       	pop	r15
     c82:	ef 90       	pop	r14
     c84:	df 90       	pop	r13
     c86:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <_ZN7MCP25156endSPIEv>

00000c8a <_ZN7MCP251511setRegisterENS_8REGISTEREh>:
     c8a:	0f 93       	push	r16
     c8c:	1f 93       	push	r17
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	ec 01       	movw	r28, r24
     c94:	06 2f       	mov	r16, r22
     c96:	14 2f       	mov	r17, r20
     c98:	0e 94 82 05 	call	0xb04	; 0xb04 <_ZN7MCP25158startSPIEv>
     c9c:	82 e0       	ldi	r24, 0x02	; 2
     c9e:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN8SPIClass8transferEh>
     ca2:	80 2f       	mov	r24, r16
     ca4:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN8SPIClass8transferEh>
     ca8:	81 2f       	mov	r24, r17
     caa:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN8SPIClass8transferEh>
     cae:	ce 01       	movw	r24, r28
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	1f 91       	pop	r17
     cb6:	0f 91       	pop	r16
     cb8:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <_ZN7MCP25156endSPIEv>

00000cbc <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>:
     cbc:	df 92       	push	r13
     cbe:	ef 92       	push	r14
     cc0:	ff 92       	push	r15
     cc2:	0f 93       	push	r16
     cc4:	1f 93       	push	r17
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	8c 01       	movw	r16, r24
     ccc:	c6 2f       	mov	r28, r22
     cce:	d4 2e       	mov	r13, r20
     cd0:	e5 2e       	mov	r14, r21
     cd2:	f2 2e       	mov	r15, r18
     cd4:	0e 94 82 05 	call	0xb04	; 0xb04 <_ZN7MCP25158startSPIEv>
     cd8:	82 e0       	ldi	r24, 0x02	; 2
     cda:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN8SPIClass8transferEh>
     cde:	8c 2f       	mov	r24, r28
     ce0:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN8SPIClass8transferEh>
     ce4:	cd 2d       	mov	r28, r13
     ce6:	de 2d       	mov	r29, r14
     ce8:	ce 01       	movw	r24, r28
     cea:	8f 0d       	add	r24, r15
     cec:	91 1d       	adc	r25, r1
     cee:	7c 01       	movw	r14, r24
     cf0:	ce 15       	cp	r28, r14
     cf2:	df 05       	cpc	r29, r15
     cf4:	21 f0       	breq	.+8      	; 0xcfe <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x42>
     cf6:	89 91       	ld	r24, Y+
     cf8:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN8SPIClass8transferEh>
     cfc:	f9 cf       	rjmp	.-14     	; 0xcf0 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x34>
     cfe:	c8 01       	movw	r24, r16
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	ff 90       	pop	r15
     d0a:	ef 90       	pop	r14
     d0c:	df 90       	pop	r13
     d0e:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <_ZN7MCP25156endSPIEv>

00000d12 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>:
     d12:	ff 92       	push	r15
     d14:	0f 93       	push	r16
     d16:	1f 93       	push	r17
     d18:	cf 93       	push	r28
     d1a:	df 93       	push	r29
     d1c:	ec 01       	movw	r28, r24
     d1e:	f6 2e       	mov	r15, r22
     d20:	04 2f       	mov	r16, r20
     d22:	12 2f       	mov	r17, r18
     d24:	0e 94 82 05 	call	0xb04	; 0xb04 <_ZN7MCP25158startSPIEv>
     d28:	85 e0       	ldi	r24, 0x05	; 5
     d2a:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN8SPIClass8transferEh>
     d2e:	8f 2d       	mov	r24, r15
     d30:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN8SPIClass8transferEh>
     d34:	80 2f       	mov	r24, r16
     d36:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN8SPIClass8transferEh>
     d3a:	81 2f       	mov	r24, r17
     d3c:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN8SPIClass8transferEh>
     d40:	ce 01       	movw	r24, r28
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	1f 91       	pop	r17
     d48:	0f 91       	pop	r16
     d4a:	ff 90       	pop	r15
     d4c:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <_ZN7MCP25156endSPIEv>

00000d50 <_ZN7MCP25159getStatusEv>:
     d50:	1f 93       	push	r17
     d52:	cf 93       	push	r28
     d54:	df 93       	push	r29
     d56:	ec 01       	movw	r28, r24
     d58:	0e 94 82 05 	call	0xb04	; 0xb04 <_ZN7MCP25158startSPIEv>
     d5c:	80 ea       	ldi	r24, 0xA0	; 160
     d5e:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN8SPIClass8transferEh>
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN8SPIClass8transferEh>
     d68:	18 2f       	mov	r17, r24
     d6a:	ce 01       	movw	r24, r28
     d6c:	0e 94 bc 05 	call	0xb78	; 0xb78 <_ZN7MCP25156endSPIEv>
     d70:	81 2f       	mov	r24, r17
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	1f 91       	pop	r17
     d78:	08 95       	ret

00000d7a <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>:
     d7a:	cf 92       	push	r12
     d7c:	df 92       	push	r13
     d7e:	ef 92       	push	r14
     d80:	ff 92       	push	r15
     d82:	1f 93       	push	r17
     d84:	cf 93       	push	r28
     d86:	df 93       	push	r29
     d88:	ec 01       	movw	r28, r24
     d8a:	16 2f       	mov	r17, r22
     d8c:	26 2f       	mov	r18, r22
     d8e:	40 ee       	ldi	r20, 0xE0	; 224
     d90:	6f e0       	ldi	r22, 0x0F	; 15
     d92:	0e 94 89 06 	call	0xd12	; 0xd12 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
     d96:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <millis>
     d9a:	6b 01       	movw	r12, r22
     d9c:	7c 01       	movw	r14, r24
     d9e:	2a e0       	ldi	r18, 0x0A	; 10
     da0:	c2 0e       	add	r12, r18
     da2:	d1 1c       	adc	r13, r1
     da4:	e1 1c       	adc	r14, r1
     da6:	f1 1c       	adc	r15, r1
     da8:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <millis>
     dac:	6c 15       	cp	r22, r12
     dae:	7d 05       	cpc	r23, r13
     db0:	8e 05       	cpc	r24, r14
     db2:	9f 05       	cpc	r25, r15
     db4:	48 f4       	brcc	.+18     	; 0xdc8 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x4e>
     db6:	6e e0       	ldi	r22, 0x0E	; 14
     db8:	ce 01       	movw	r24, r28
     dba:	0e 94 00 06 	call	0xc00	; 0xc00 <_ZN7MCP251512readRegisterENS_8REGISTERE>
     dbe:	80 7e       	andi	r24, 0xE0	; 224
     dc0:	18 13       	cpse	r17, r24
     dc2:	f2 cf       	rjmp	.-28     	; 0xda8 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x2e>
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	01 c0       	rjmp	.+2      	; 0xdca <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x50>
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	91 e0       	ldi	r25, 0x01	; 1
     dcc:	89 27       	eor	r24, r25
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	1f 91       	pop	r17
     dd4:	ff 90       	pop	r15
     dd6:	ef 90       	pop	r14
     dd8:	df 90       	pop	r13
     dda:	cf 90       	pop	r12
     ddc:	08 95       	ret

00000dde <_ZN7MCP251513setConfigModeEv>:
     dde:	60 e8       	ldi	r22, 0x80	; 128
     de0:	0c 94 bd 06 	jmp	0xd7a	; 0xd7a <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>

00000de4 <_ZN7MCP251513setNormalModeEv>:
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	0c 94 bd 06 	jmp	0xd7a	; 0xd7a <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>

00000dea <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>:
     dea:	0f 93       	push	r16
     dec:	1f 93       	push	r17
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	8c 01       	movw	r16, r24
     df4:	c6 2f       	mov	r28, r22
     df6:	d4 2f       	mov	r29, r20
     df8:	0e 94 ef 06 	call	0xdde	; 0xdde <_ZN7MCP251513setConfigModeEv>
     dfc:	81 11       	cpse	r24, r1
     dfe:	ba c0       	rjmp	.+372    	; 0xf74 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x18a>
     e00:	d1 30       	cpi	r29, 0x01	; 1
     e02:	a9 f1       	breq	.+106    	; 0xe6e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x84>
     e04:	08 f4       	brcc	.+2      	; 0xe08 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x1e>
     e06:	67 c0       	rjmp	.+206    	; 0xed6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0xec>
     e08:	d2 30       	cpi	r29, 0x02	; 2
     e0a:	09 f0       	breq	.+2      	; 0xe0e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x24>
     e0c:	93 c0       	rjmp	.+294    	; 0xf34 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14a>
     e0e:	8c 2f       	mov	r24, r28
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	80 31       	cpi	r24, 0x10	; 16
     e14:	91 05       	cpc	r25, r1
     e16:	08 f0       	brcs	.+2      	; 0xe1a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x30>
     e18:	8d c0       	rjmp	.+282    	; 0xf34 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14a>
     e1a:	fc 01       	movw	r30, r24
     e1c:	ec 5c       	subi	r30, 0xCC	; 204
     e1e:	ff 4f       	sbci	r31, 0xFF	; 255
     e20:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <__tablejump2__>
     e24:	c7 e8       	ldi	r28, 0x87	; 135
     e26:	df eb       	ldi	r29, 0xBF	; 191
     e28:	32 c0       	rjmp	.+100    	; 0xe8e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0xa4>
     e2a:	c4 e8       	ldi	r28, 0x84	; 132
     e2c:	d4 ea       	ldi	r29, 0xA4	; 164
     e2e:	8a c0       	rjmp	.+276    	; 0xf44 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>
     e30:	c5 e8       	ldi	r28, 0x85	; 133
     e32:	d2 ee       	ldi	r29, 0xE2	; 226
     e34:	47 e4       	ldi	r20, 0x47	; 71
     e36:	8f c0       	rjmp	.+286    	; 0xf56 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x16c>
     e38:	c7 e8       	ldi	r28, 0x87	; 135
     e3a:	df eb       	ldi	r29, 0xBF	; 191
     e3c:	6a c0       	rjmp	.+212    	; 0xf12 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x128>
     e3e:	c6 e8       	ldi	r28, 0x86	; 134
     e40:	d4 eb       	ldi	r29, 0xB4	; 180
     e42:	67 c0       	rjmp	.+206    	; 0xf12 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x128>
     e44:	c7 e8       	ldi	r28, 0x87	; 135
     e46:	df eb       	ldi	r29, 0xBF	; 191
     e48:	68 c0       	rjmp	.+208    	; 0xf1a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x130>
     e4a:	c6 e8       	ldi	r28, 0x86	; 134
     e4c:	d4 eb       	ldi	r29, 0xB4	; 180
     e4e:	65 c0       	rjmp	.+202    	; 0xf1a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x130>
     e50:	c5 e8       	ldi	r28, 0x85	; 133
     e52:	d1 eb       	ldi	r29, 0xB1	; 177
     e54:	62 c0       	rjmp	.+196    	; 0xf1a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x130>
     e56:	c6 e8       	ldi	r28, 0x86	; 134
     e58:	d4 eb       	ldi	r29, 0xB4	; 180
     e5a:	67 c0       	rjmp	.+206    	; 0xf2a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x140>
     e5c:	c5 e8       	ldi	r28, 0x85	; 133
     e5e:	d1 eb       	ldi	r29, 0xB1	; 177
     e60:	64 c0       	rjmp	.+200    	; 0xf2a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x140>
     e62:	c2 e8       	ldi	r28, 0x82	; 130
     e64:	d0 e9       	ldi	r29, 0x90	; 144
     e66:	61 c0       	rjmp	.+194    	; 0xf2a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x140>
     e68:	c0 e8       	ldi	r28, 0x80	; 128
     e6a:	d0 e8       	ldi	r29, 0x80	; 128
     e6c:	5e c0       	rjmp	.+188    	; 0xf2a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x140>
     e6e:	8c 2f       	mov	r24, r28
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	80 31       	cpi	r24, 0x10	; 16
     e74:	91 05       	cpc	r25, r1
     e76:	08 f0       	brcs	.+2      	; 0xe7a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x90>
     e78:	5d c0       	rjmp	.+186    	; 0xf34 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14a>
     e7a:	fc 01       	movw	r30, r24
     e7c:	ec 5b       	subi	r30, 0xBC	; 188
     e7e:	ff 4f       	sbci	r31, 0xFF	; 255
     e80:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <__tablejump2__>
     e84:	c7 e8       	ldi	r28, 0x87	; 135
     e86:	df ef       	ldi	r29, 0xFF	; 255
     e88:	59 c0       	rjmp	.+178    	; 0xf3c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x152>
     e8a:	c7 e8       	ldi	r28, 0x87	; 135
     e8c:	df ef       	ldi	r29, 0xFF	; 255
     e8e:	4f e0       	ldi	r20, 0x0F	; 15
     e90:	62 c0       	rjmp	.+196    	; 0xf56 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x16c>
     e92:	c5 e8       	ldi	r28, 0x85	; 133
     e94:	d1 ef       	ldi	r29, 0xF1	; 241
     e96:	4e e4       	ldi	r20, 0x4E	; 78
     e98:	5e c0       	rjmp	.+188    	; 0xf56 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x16c>
     e9a:	c7 e8       	ldi	r28, 0x87	; 135
     e9c:	df ef       	ldi	r29, 0xFF	; 255
     e9e:	52 c0       	rjmp	.+164    	; 0xf44 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>
     ea0:	c7 e8       	ldi	r28, 0x87	; 135
     ea2:	da ef       	ldi	r29, 0xFA	; 250
     ea4:	4f c0       	rjmp	.+158    	; 0xf44 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>
     ea6:	c7 e8       	ldi	r28, 0x87	; 135
     ea8:	df ef       	ldi	r29, 0xFF	; 255
     eaa:	33 c0       	rjmp	.+102    	; 0xf12 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x128>
     eac:	c7 e0       	ldi	r28, 0x07	; 7
     eae:	de eb       	ldi	r29, 0xBE	; 190
     eb0:	30 c0       	rjmp	.+96     	; 0xf12 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x128>
     eb2:	c7 e0       	ldi	r28, 0x07	; 7
     eb4:	dd ea       	ldi	r29, 0xAD	; 173
     eb6:	2d c0       	rjmp	.+90     	; 0xf12 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x128>
     eb8:	c6 e8       	ldi	r28, 0x86	; 134
     eba:	d0 ef       	ldi	r29, 0xF0	; 240
     ebc:	2a c0       	rjmp	.+84     	; 0xf12 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x128>
     ebe:	c7 e8       	ldi	r28, 0x87	; 135
     ec0:	da ef       	ldi	r29, 0xFA	; 250
     ec2:	2b c0       	rjmp	.+86     	; 0xf1a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x130>
     ec4:	c5 e8       	ldi	r28, 0x85	; 133
     ec6:	d1 ef       	ldi	r29, 0xF1	; 241
     ec8:	2c c0       	rjmp	.+88     	; 0xf22 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x138>
     eca:	c6 e8       	ldi	r28, 0x86	; 134
     ecc:	d0 ef       	ldi	r29, 0xF0	; 240
     ece:	2d c0       	rjmp	.+90     	; 0xf2a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x140>
     ed0:	c2 e8       	ldi	r28, 0x82	; 130
     ed2:	d0 ed       	ldi	r29, 0xD0	; 208
     ed4:	2a c0       	rjmp	.+84     	; 0xf2a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x140>
     ed6:	8c 2f       	mov	r24, r28
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	fc 01       	movw	r30, r24
     edc:	34 97       	sbiw	r30, 0x04	; 4
     ede:	ec 30       	cpi	r30, 0x0C	; 12
     ee0:	f1 05       	cpc	r31, r1
     ee2:	40 f5       	brcc	.+80     	; 0xf34 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x14a>
     ee4:	ec 5a       	subi	r30, 0xAC	; 172
     ee6:	ff 4f       	sbci	r31, 0xFF	; 255
     ee8:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <__tablejump2__>
     eec:	c7 e8       	ldi	r28, 0x87	; 135
     eee:	df ef       	ldi	r29, 0xFF	; 255
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x10c>
     ef2:	c7 e8       	ldi	r28, 0x87	; 135
     ef4:	da ef       	ldi	r29, 0xFA	; 250
     ef6:	49 e0       	ldi	r20, 0x09	; 9
     ef8:	2e c0       	rjmp	.+92     	; 0xf56 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x16c>
     efa:	c7 e8       	ldi	r28, 0x87	; 135
     efc:	df ef       	ldi	r29, 0xFF	; 255
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x11a>
     f00:	c7 e8       	ldi	r28, 0x87	; 135
     f02:	de ef       	ldi	r29, 0xFE	; 254
     f04:	44 e0       	ldi	r20, 0x04	; 4
     f06:	27 c0       	rjmp	.+78     	; 0xf56 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x16c>
     f08:	c7 e8       	ldi	r28, 0x87	; 135
     f0a:	da ef       	ldi	r29, 0xFA	; 250
     f0c:	fb cf       	rjmp	.-10     	; 0xf04 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x11a>
     f0e:	c7 e8       	ldi	r28, 0x87	; 135
     f10:	da ef       	ldi	r29, 0xFA	; 250
     f12:	43 e0       	ldi	r20, 0x03	; 3
     f14:	20 c0       	rjmp	.+64     	; 0xf56 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x16c>
     f16:	c7 e8       	ldi	r28, 0x87	; 135
     f18:	df ef       	ldi	r29, 0xFF	; 255
     f1a:	41 e0       	ldi	r20, 0x01	; 1
     f1c:	1c c0       	rjmp	.+56     	; 0xf56 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x16c>
     f1e:	c6 e8       	ldi	r28, 0x86	; 134
     f20:	db ef       	ldi	r29, 0xFB	; 251
     f22:	41 e4       	ldi	r20, 0x41	; 65
     f24:	18 c0       	rjmp	.+48     	; 0xf56 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x16c>
     f26:	c7 e8       	ldi	r28, 0x87	; 135
     f28:	da ef       	ldi	r29, 0xFA	; 250
     f2a:	40 e0       	ldi	r20, 0x00	; 0
     f2c:	14 c0       	rjmp	.+40     	; 0xf56 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x16c>
     f2e:	c2 e8       	ldi	r28, 0x82	; 130
     f30:	d9 ed       	ldi	r29, 0xD9	; 217
     f32:	fb cf       	rjmp	.-10     	; 0xf2a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x140>
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	1e c0       	rjmp	.+60     	; 0xf74 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x18a>
     f38:	c7 e8       	ldi	r28, 0x87	; 135
     f3a:	df eb       	ldi	r29, 0xBF	; 191
     f3c:	4f e1       	ldi	r20, 0x1F	; 31
     f3e:	0b c0       	rjmp	.+22     	; 0xf56 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x16c>
     f40:	c7 e8       	ldi	r28, 0x87	; 135
     f42:	df eb       	ldi	r29, 0xBF	; 191
     f44:	47 e0       	ldi	r20, 0x07	; 7
     f46:	07 c0       	rjmp	.+14     	; 0xf56 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x16c>
     f48:	c7 e8       	ldi	r28, 0x87	; 135
     f4a:	df ef       	ldi	r29, 0xFF	; 255
     f4c:	4f e3       	ldi	r20, 0x3F	; 63
     f4e:	03 c0       	rjmp	.+6      	; 0xf56 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x16c>
     f50:	c7 e8       	ldi	r28, 0x87	; 135
     f52:	df ef       	ldi	r29, 0xFF	; 255
     f54:	4b e0       	ldi	r20, 0x0B	; 11
     f56:	6a e2       	ldi	r22, 0x2A	; 42
     f58:	c8 01       	movw	r24, r16
     f5a:	0e 94 45 06 	call	0xc8a	; 0xc8a <_ZN7MCP251511setRegisterENS_8REGISTEREh>
     f5e:	4d 2f       	mov	r20, r29
     f60:	69 e2       	ldi	r22, 0x29	; 41
     f62:	c8 01       	movw	r24, r16
     f64:	0e 94 45 06 	call	0xc8a	; 0xc8a <_ZN7MCP251511setRegisterENS_8REGISTEREh>
     f68:	4c 2f       	mov	r20, r28
     f6a:	68 e2       	ldi	r22, 0x28	; 40
     f6c:	c8 01       	movw	r24, r16
     f6e:	0e 94 45 06 	call	0xc8a	; 0xc8a <_ZN7MCP251511setRegisterENS_8REGISTEREh>
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	1f 91       	pop	r17
     f7a:	0f 91       	pop	r16
     f7c:	08 95       	ret

00000f7e <_ZN7MCP251510setBitrateE9CAN_SPEED>:
     f7e:	41 e0       	ldi	r20, 0x01	; 1
     f80:	0c 94 f5 06 	jmp	0xdea	; 0xdea <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>

00000f84 <_ZN7MCP25159prepareIdEPhbm>:

void MCP2515::prepareId(uint8_t *buffer, const bool ext, const uint32_t id)
{
     f84:	0f 93       	push	r16
     f86:	1f 93       	push	r17
     f88:	fb 01       	movw	r30, r22
    uint16_t canid = (uint16_t)(id & 0x0FFFF);

    if (ext) {
     f8a:	44 23       	and	r20, r20
     f8c:	b1 f0       	breq	.+44     	; 0xfba <_ZN7MCP25159prepareIdEPhbm+0x36>
        buffer[MCP_EID0] = (uint8_t) (canid & 0xFF);
     f8e:	03 83       	std	Z+3, r16	; 0x03
        buffer[MCP_EID8] = (uint8_t) (canid >> 8);
     f90:	12 83       	std	Z+2, r17	; 0x02
        canid = (uint16_t)(id >> 16);
     f92:	89 01       	movw	r16, r18
     f94:	22 27       	eor	r18, r18
     f96:	33 27       	eor	r19, r19
        buffer[MCP_SIDL] = (uint8_t) (canid & 0x03);
        buffer[MCP_SIDL] += (uint8_t) ((canid & 0x1C) << 3);
        buffer[MCP_SIDL] |= TXB_EXIDE_MASK;
     f98:	90 2f       	mov	r25, r16
     f9a:	9c 71       	andi	r25, 0x1C	; 28
     f9c:	80 2f       	mov	r24, r16
     f9e:	83 70       	andi	r24, 0x03	; 3
     fa0:	48 e0       	ldi	r20, 0x08	; 8
     fa2:	94 9f       	mul	r25, r20
     fa4:	80 0d       	add	r24, r0
     fa6:	11 24       	eor	r1, r1
     fa8:	88 60       	ori	r24, 0x08	; 8
     faa:	81 83       	std	Z+1, r24	; 0x01
        buffer[MCP_SIDH] = (uint8_t) (canid >> 5);
     fac:	55 e0       	ldi	r21, 0x05	; 5
     fae:	16 95       	lsr	r17
     fb0:	07 95       	ror	r16
     fb2:	5a 95       	dec	r21
     fb4:	e1 f7       	brne	.-8      	; 0xfae <_ZN7MCP25159prepareIdEPhbm+0x2a>
     fb6:	00 83       	st	Z, r16
     fb8:	0d c0       	rjmp	.+26     	; 0xfd4 <_ZN7MCP25159prepareIdEPhbm+0x50>
    } else {
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
     fba:	c8 01       	movw	r24, r16
     fbc:	23 e0       	ldi	r18, 0x03	; 3
     fbe:	96 95       	lsr	r25
     fc0:	87 95       	ror	r24
     fc2:	2a 95       	dec	r18
     fc4:	e1 f7       	brne	.-8      	; 0xfbe <_ZN7MCP25159prepareIdEPhbm+0x3a>
     fc6:	80 83       	st	Z, r24
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
     fc8:	02 95       	swap	r16
     fca:	00 0f       	add	r16, r16
     fcc:	00 7e       	andi	r16, 0xE0	; 224
     fce:	01 83       	std	Z+1, r16	; 0x01
        buffer[MCP_EID0] = 0;
     fd0:	13 82       	std	Z+3, r1	; 0x03
        buffer[MCP_EID8] = 0;
     fd2:	12 82       	std	Z+2, r1	; 0x02
    }
}
     fd4:	1f 91       	pop	r17
     fd6:	0f 91       	pop	r16
     fd8:	08 95       	ret

00000fda <_ZN7MCP251513setFilterMaskENS_4MASKEbm>:

MCP2515::ERROR MCP2515::setFilterMask(const MASK mask, const bool ext, const uint32_t ulData)
{
     fda:	8f 92       	push	r8
     fdc:	9f 92       	push	r9
     fde:	af 92       	push	r10
     fe0:	bf 92       	push	r11
     fe2:	cf 92       	push	r12
     fe4:	df 92       	push	r13
     fe6:	ef 92       	push	r14
     fe8:	ff 92       	push	r15
     fea:	0f 93       	push	r16
     fec:	1f 93       	push	r17
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x1a>
     ff4:	00 d0       	rcall	.+0      	; 0xff6 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x1c>
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
     ffa:	7c 01       	movw	r14, r24
     ffc:	d6 2e       	mov	r13, r22
     ffe:	c4 2e       	mov	r12, r20
    1000:	48 01       	movw	r8, r16
    1002:	59 01       	movw	r10, r18
    ERROR res = setConfigMode();
    1004:	0e 94 ef 06 	call	0xdde	; 0xdde <_ZN7MCP251513setConfigModeEv>
    if (res != ERROR_OK) {
    1008:	81 11       	cpse	r24, r1
    100a:	1b c0       	rjmp	.+54     	; 0x1042 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x68>
        return res;
    }
    
    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
    100c:	95 01       	movw	r18, r10
    100e:	84 01       	movw	r16, r8
    1010:	4c 2d       	mov	r20, r12
    1012:	be 01       	movw	r22, r28
    1014:	6f 5f       	subi	r22, 0xFF	; 255
    1016:	7f 4f       	sbci	r23, 0xFF	; 255
    1018:	c7 01       	movw	r24, r14
    101a:	0e 94 c2 07 	call	0xf84	; 0xf84 <_ZN7MCP25159prepareIdEPhbm>

    REGISTER reg;
    switch (mask) {
    101e:	dd 20       	and	r13, r13
    1020:	29 f0       	breq	.+10     	; 0x102c <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x52>
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	d8 12       	cpse	r13, r24
    1026:	0c c0       	rjmp	.+24     	; 0x1040 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x66>
        case MASK0: reg = MCP_RXM0SIDH; break;
        case MASK1: reg = MCP_RXM1SIDH; break;
    1028:	64 e2       	ldi	r22, 0x24	; 36
    102a:	01 c0       	rjmp	.+2      	; 0x102e <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x54>
    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);

    REGISTER reg;
    switch (mask) {
        case MASK0: reg = MCP_RXM0SIDH; break;
    102c:	60 e2       	ldi	r22, 0x20	; 32
        case MASK1: reg = MCP_RXM1SIDH; break;
        default:
            return ERROR_FAIL;
    }

    setRegisters(reg, tbufdata, 4);
    102e:	24 e0       	ldi	r18, 0x04	; 4
    1030:	ae 01       	movw	r20, r28
    1032:	4f 5f       	subi	r20, 0xFF	; 255
    1034:	5f 4f       	sbci	r21, 0xFF	; 255
    1036:	c7 01       	movw	r24, r14
    1038:	0e 94 5e 06 	call	0xcbc	; 0xcbc <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    
    return ERROR_OK;
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	01 c0       	rjmp	.+2      	; 0x1042 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x68>
    REGISTER reg;
    switch (mask) {
        case MASK0: reg = MCP_RXM0SIDH; break;
        case MASK1: reg = MCP_RXM1SIDH; break;
        default:
            return ERROR_FAIL;
    1040:	81 e0       	ldi	r24, 0x01	; 1
    }

    setRegisters(reg, tbufdata, 4);
    
    return ERROR_OK;
}
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	df 91       	pop	r29
    104c:	cf 91       	pop	r28
    104e:	1f 91       	pop	r17
    1050:	0f 91       	pop	r16
    1052:	ff 90       	pop	r15
    1054:	ef 90       	pop	r14
    1056:	df 90       	pop	r13
    1058:	cf 90       	pop	r12
    105a:	bf 90       	pop	r11
    105c:	af 90       	pop	r10
    105e:	9f 90       	pop	r9
    1060:	8f 90       	pop	r8
    1062:	08 95       	ret

00001064 <_ZN7MCP25159setFilterENS_3RXFEbm>:

MCP2515::ERROR MCP2515::setFilter(const RXF num, const bool ext, const uint32_t ulData)
{
    1064:	8f 92       	push	r8
    1066:	9f 92       	push	r9
    1068:	af 92       	push	r10
    106a:	bf 92       	push	r11
    106c:	cf 92       	push	r12
    106e:	df 92       	push	r13
    1070:	ef 92       	push	r14
    1072:	ff 92       	push	r15
    1074:	0f 93       	push	r16
    1076:	1f 93       	push	r17
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	00 d0       	rcall	.+0      	; 0x107e <_ZN7MCP25159setFilterENS_3RXFEbm+0x1a>
    107e:	00 d0       	rcall	.+0      	; 0x1080 <_ZN7MCP25159setFilterENS_3RXFEbm+0x1c>
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	6c 01       	movw	r12, r24
    1086:	f6 2e       	mov	r15, r22
    1088:	e4 2e       	mov	r14, r20
    108a:	48 01       	movw	r8, r16
    108c:	59 01       	movw	r10, r18
    ERROR res = setConfigMode();
    108e:	0e 94 ef 06 	call	0xdde	; 0xdde <_ZN7MCP251513setConfigModeEv>
    if (res != ERROR_OK) {
    1092:	81 11       	cpse	r24, r1
    1094:	36 c0       	rjmp	.+108    	; 0x1102 <_ZN7MCP25159setFilterENS_3RXFEbm+0x9e>
        return res;
    }

    REGISTER reg;

    switch (num) {
    1096:	82 e0       	ldi	r24, 0x02	; 2
    1098:	f8 16       	cp	r15, r24
    109a:	a9 f0       	breq	.+42     	; 0x10c6 <_ZN7MCP25159setFilterENS_3RXFEbm+0x62>
    109c:	8f 15       	cp	r24, r15
    109e:	40 f0       	brcs	.+16     	; 0x10b0 <_ZN7MCP25159setFilterENS_3RXFEbm+0x4c>
    10a0:	ff 20       	and	r15, r15
    10a2:	d1 f0       	breq	.+52     	; 0x10d8 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	f8 12       	cpse	r15, r24
    10a8:	2b c0       	rjmp	.+86     	; 0x1100 <_ZN7MCP25159setFilterENS_3RXFEbm+0x9c>
        case RXF0: reg = MCP_RXF0SIDH; break;
        case RXF1: reg = MCP_RXF1SIDH; break;
    10aa:	44 e0       	ldi	r20, 0x04	; 4
    10ac:	f4 2e       	mov	r15, r20
    10ae:	15 c0       	rjmp	.+42     	; 0x10da <_ZN7MCP25159setFilterENS_3RXFEbm+0x76>
        return res;
    }

    REGISTER reg;

    switch (num) {
    10b0:	84 e0       	ldi	r24, 0x04	; 4
    10b2:	f8 16       	cp	r15, r24
    10b4:	71 f0       	breq	.+28     	; 0x10d2 <_ZN7MCP25159setFilterENS_3RXFEbm+0x6e>
    10b6:	f8 16       	cp	r15, r24
    10b8:	48 f0       	brcs	.+18     	; 0x10cc <_ZN7MCP25159setFilterENS_3RXFEbm+0x68>
    10ba:	85 e0       	ldi	r24, 0x05	; 5
    10bc:	f8 12       	cpse	r15, r24
    10be:	20 c0       	rjmp	.+64     	; 0x1100 <_ZN7MCP25159setFilterENS_3RXFEbm+0x9c>
        case RXF0: reg = MCP_RXF0SIDH; break;
        case RXF1: reg = MCP_RXF1SIDH; break;
        case RXF2: reg = MCP_RXF2SIDH; break;
        case RXF3: reg = MCP_RXF3SIDH; break;
        case RXF4: reg = MCP_RXF4SIDH; break;
        case RXF5: reg = MCP_RXF5SIDH; break;
    10c0:	88 e1       	ldi	r24, 0x18	; 24
    10c2:	f8 2e       	mov	r15, r24
    10c4:	0a c0       	rjmp	.+20     	; 0x10da <_ZN7MCP25159setFilterENS_3RXFEbm+0x76>
    REGISTER reg;

    switch (num) {
        case RXF0: reg = MCP_RXF0SIDH; break;
        case RXF1: reg = MCP_RXF1SIDH; break;
        case RXF2: reg = MCP_RXF2SIDH; break;
    10c6:	38 e0       	ldi	r19, 0x08	; 8
    10c8:	f3 2e       	mov	r15, r19
    10ca:	07 c0       	rjmp	.+14     	; 0x10da <_ZN7MCP25159setFilterENS_3RXFEbm+0x76>
        case RXF3: reg = MCP_RXF3SIDH; break;
    10cc:	20 e1       	ldi	r18, 0x10	; 16
    10ce:	f2 2e       	mov	r15, r18
    10d0:	04 c0       	rjmp	.+8      	; 0x10da <_ZN7MCP25159setFilterENS_3RXFEbm+0x76>
        case RXF4: reg = MCP_RXF4SIDH; break;
    10d2:	94 e1       	ldi	r25, 0x14	; 20
    10d4:	f9 2e       	mov	r15, r25
    10d6:	01 c0       	rjmp	.+2      	; 0x10da <_ZN7MCP25159setFilterENS_3RXFEbm+0x76>
    }

    REGISTER reg;

    switch (num) {
        case RXF0: reg = MCP_RXF0SIDH; break;
    10d8:	f1 2c       	mov	r15, r1
        default:
            return ERROR_FAIL;
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
    10da:	95 01       	movw	r18, r10
    10dc:	84 01       	movw	r16, r8
    10de:	4e 2d       	mov	r20, r14
    10e0:	be 01       	movw	r22, r28
    10e2:	6f 5f       	subi	r22, 0xFF	; 255
    10e4:	7f 4f       	sbci	r23, 0xFF	; 255
    10e6:	c6 01       	movw	r24, r12
    10e8:	0e 94 c2 07 	call	0xf84	; 0xf84 <_ZN7MCP25159prepareIdEPhbm>
    setRegisters(reg, tbufdata, 4);
    10ec:	24 e0       	ldi	r18, 0x04	; 4
    10ee:	ae 01       	movw	r20, r28
    10f0:	4f 5f       	subi	r20, 0xFF	; 255
    10f2:	5f 4f       	sbci	r21, 0xFF	; 255
    10f4:	6f 2d       	mov	r22, r15
    10f6:	c6 01       	movw	r24, r12
    10f8:	0e 94 5e 06 	call	0xcbc	; 0xcbc <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	01 c0       	rjmp	.+2      	; 0x1102 <_ZN7MCP25159setFilterENS_3RXFEbm+0x9e>
        case RXF2: reg = MCP_RXF2SIDH; break;
        case RXF3: reg = MCP_RXF3SIDH; break;
        case RXF4: reg = MCP_RXF4SIDH; break;
        case RXF5: reg = MCP_RXF5SIDH; break;
        default:
            return ERROR_FAIL;
    1100:	81 e0       	ldi	r24, 0x01	; 1
    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
    setRegisters(reg, tbufdata, 4);

    return ERROR_OK;
}
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	ff 90       	pop	r15
    1114:	ef 90       	pop	r14
    1116:	df 90       	pop	r13
    1118:	cf 90       	pop	r12
    111a:	bf 90       	pop	r11
    111c:	af 90       	pop	r10
    111e:	9f 90       	pop	r9
    1120:	8f 90       	pop	r8
    1122:	08 95       	ret

00001124 <_ZN7MCP25155resetEv>:
    digitalWrite(SPICS, HIGH);
    SPIn->endTransaction();
}

MCP2515::ERROR MCP2515::reset(void)
{
    1124:	af 92       	push	r10
    1126:	bf 92       	push	r11
    1128:	cf 92       	push	r12
    112a:	df 92       	push	r13
    112c:	ef 92       	push	r14
    112e:	ff 92       	push	r15
    1130:	0f 93       	push	r16
    1132:	1f 93       	push	r17
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	64 97       	sbiw	r28, 0x14	; 20
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	7c 01       	movw	r14, r24
    startSPI();
    114a:	0e 94 82 05 	call	0xb04	; 0xb04 <_ZN7MCP25158startSPIEv>
    SPIn->transfer(INSTRUCTION_RESET);
    114e:	80 ec       	ldi	r24, 0xC0	; 192
    1150:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <_ZN8SPIClass8transferEh>
    endSPI();
    1154:	c7 01       	movw	r24, r14
    1156:	0e 94 bc 05 	call	0xb78	; 0xb78 <_ZN7MCP25156endSPIEv>

    delay(10);
    115a:	6a e0       	ldi	r22, 0x0A	; 10
    115c:	70 e0       	ldi	r23, 0x00	; 0
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	0e 94 04 05 	call	0xa08	; 0xa08 <delay>

    uint8_t zeros[14];
    memset(zeros, 0, sizeof(zeros));
    1166:	8e 01       	movw	r16, r28
    1168:	0f 5f       	subi	r16, 0xFF	; 255
    116a:	1f 4f       	sbci	r17, 0xFF	; 255
    116c:	8e e0       	ldi	r24, 0x0E	; 14
    116e:	f8 01       	movw	r30, r16
    1170:	11 92       	st	Z+, r1
    1172:	8a 95       	dec	r24
    1174:	e9 f7       	brne	.-6      	; 0x1170 <_ZN7MCP25155resetEv+0x4c>
    setRegisters(MCP_TXB0CTRL, zeros, 14);
    1176:	2e e0       	ldi	r18, 0x0E	; 14
    1178:	a8 01       	movw	r20, r16
    117a:	60 e3       	ldi	r22, 0x30	; 48
    117c:	c7 01       	movw	r24, r14
    117e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    setRegisters(MCP_TXB1CTRL, zeros, 14);
    1182:	2e e0       	ldi	r18, 0x0E	; 14
    1184:	a8 01       	movw	r20, r16
    1186:	60 e4       	ldi	r22, 0x40	; 64
    1188:	c7 01       	movw	r24, r14
    118a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    setRegisters(MCP_TXB2CTRL, zeros, 14);
    118e:	2e e0       	ldi	r18, 0x0E	; 14
    1190:	a8 01       	movw	r20, r16
    1192:	60 e5       	ldi	r22, 0x50	; 80
    1194:	c7 01       	movw	r24, r14
    1196:	0e 94 5e 06 	call	0xcbc	; 0xcbc <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    setRegister(MCP_RXB0CTRL, 0);
    119a:	40 e0       	ldi	r20, 0x00	; 0
    119c:	60 e6       	ldi	r22, 0x60	; 96
    119e:	c7 01       	movw	r24, r14
    11a0:	0e 94 45 06 	call	0xc8a	; 0xc8a <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    setRegister(MCP_RXB1CTRL, 0);
    11a4:	40 e0       	ldi	r20, 0x00	; 0
    11a6:	60 e7       	ldi	r22, 0x70	; 112
    11a8:	c7 01       	movw	r24, r14
    11aa:	0e 94 45 06 	call	0xc8a	; 0xc8a <_ZN7MCP251511setRegisterENS_8REGISTEREh>

    setRegister(MCP_CANINTE, CANINTF_RX0IF | CANINTF_RX1IF | CANINTF_ERRIF | CANINTF_MERRF);
    11ae:	43 ea       	ldi	r20, 0xA3	; 163
    11b0:	6b e2       	ldi	r22, 0x2B	; 43
    11b2:	c7 01       	movw	r24, r14
    11b4:	0e 94 45 06 	call	0xc8a	; 0xc8a <_ZN7MCP251511setRegisterENS_8REGISTEREh>

    // receives all valid messages using either Standard or Extended Identifiers that
    // meet filter criteria. RXF0 is applied for RXB0, RXF1 is applied for RXB1
    modifyRegister(MCP_RXB0CTRL,
                   RXBnCTRL_RXM_MASK | RXB0CTRL_BUKT | RXB0CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB0CTRL_BUKT | RXB0CTRL_FILHIT);
    11b8:	24 e0       	ldi	r18, 0x04	; 4
    11ba:	47 e6       	ldi	r20, 0x67	; 103
    11bc:	60 e6       	ldi	r22, 0x60	; 96
    11be:	c7 01       	movw	r24, r14
    11c0:	0e 94 89 06 	call	0xd12	; 0xd12 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
    modifyRegister(MCP_RXB1CTRL,
                   RXBnCTRL_RXM_MASK | RXB1CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB1CTRL_FILHIT);
    11c4:	21 e0       	ldi	r18, 0x01	; 1
    11c6:	47 e6       	ldi	r20, 0x67	; 103
    11c8:	60 e7       	ldi	r22, 0x70	; 112
    11ca:	c7 01       	movw	r24, r14
    11cc:	0e 94 89 06 	call	0xd12	; 0xd12 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    // clear filters and masks
    // do not filter any standard frames for RXF0 used by RXB0
    // do not filter any extended frames for RXF1 used by RXB1
    RXF filters[] = {RXF0, RXF1, RXF2, RXF3, RXF4, RXF5};
    11d0:	86 e0       	ldi	r24, 0x06	; 6
    11d2:	e0 e0       	ldi	r30, 0x00	; 0
    11d4:	f1 e0       	ldi	r31, 0x01	; 1
    11d6:	de 01       	movw	r26, r28
    11d8:	1f 96       	adiw	r26, 0x0f	; 15
    11da:	01 90       	ld	r0, Z+
    11dc:	0d 92       	st	X+, r0
    11de:	8a 95       	dec	r24
    11e0:	e1 f7       	brne	.-8      	; 0x11da <_ZN7MCP25155resetEv+0xb6>
    11e2:	5e 01       	movw	r10, r28
    11e4:	ff e0       	ldi	r31, 0x0F	; 15
    11e6:	af 0e       	add	r10, r31
    11e8:	b1 1c       	adc	r11, r1
    for (int i=0; i<6; i++) {
    11ea:	c1 2c       	mov	r12, r1
    11ec:	d1 2c       	mov	r13, r1
        bool ext = (i == 1);
        ERROR result = setFilter(filters[i], ext, 0);
    11ee:	f5 01       	movw	r30, r10
    11f0:	61 91       	ld	r22, Z+
    11f2:	5f 01       	movw	r10, r30
    11f4:	41 e0       	ldi	r20, 0x01	; 1
    11f6:	f1 e0       	ldi	r31, 0x01	; 1
    11f8:	cf 16       	cp	r12, r31
    11fa:	d1 04       	cpc	r13, r1
    11fc:	09 f0       	breq	.+2      	; 0x1200 <_ZN7MCP25155resetEv+0xdc>
    11fe:	40 e0       	ldi	r20, 0x00	; 0
    1200:	00 e0       	ldi	r16, 0x00	; 0
    1202:	10 e0       	ldi	r17, 0x00	; 0
    1204:	98 01       	movw	r18, r16
    1206:	c7 01       	movw	r24, r14
    1208:	0e 94 32 08 	call	0x1064	; 0x1064 <_ZN7MCP25159setFilterENS_3RXFEbm>
        if (result != ERROR_OK) {
    120c:	81 11       	cpse	r24, r1
    120e:	19 c0       	rjmp	.+50     	; 0x1242 <_ZN7MCP25155resetEv+0x11e>

    // clear filters and masks
    // do not filter any standard frames for RXF0 used by RXB0
    // do not filter any extended frames for RXF1 used by RXB1
    RXF filters[] = {RXF0, RXF1, RXF2, RXF3, RXF4, RXF5};
    for (int i=0; i<6; i++) {
    1210:	8f ef       	ldi	r24, 0xFF	; 255
    1212:	c8 1a       	sub	r12, r24
    1214:	d8 0a       	sbc	r13, r24
    1216:	e6 e0       	ldi	r30, 0x06	; 6
    1218:	ce 16       	cp	r12, r30
    121a:	d1 04       	cpc	r13, r1
    121c:	41 f7       	brne	.-48     	; 0x11ee <_ZN7MCP25155resetEv+0xca>
        }
    }

    MASK masks[] = {MASK0, MASK1};
    for (int i=0; i<2; i++) {
        ERROR result = setFilterMask(masks[i], true, 0);
    121e:	00 e0       	ldi	r16, 0x00	; 0
    1220:	10 e0       	ldi	r17, 0x00	; 0
    1222:	98 01       	movw	r18, r16
    1224:	41 e0       	ldi	r20, 0x01	; 1
    1226:	60 e0       	ldi	r22, 0x00	; 0
    1228:	c7 01       	movw	r24, r14
    122a:	0e 94 ed 07 	call	0xfda	; 0xfda <_ZN7MCP251513setFilterMaskENS_4MASKEbm>
        if (result != ERROR_OK) {
    122e:	81 11       	cpse	r24, r1
    1230:	08 c0       	rjmp	.+16     	; 0x1242 <_ZN7MCP25155resetEv+0x11e>
        }
    }

    MASK masks[] = {MASK0, MASK1};
    for (int i=0; i<2; i++) {
        ERROR result = setFilterMask(masks[i], true, 0);
    1232:	00 e0       	ldi	r16, 0x00	; 0
    1234:	10 e0       	ldi	r17, 0x00	; 0
    1236:	98 01       	movw	r18, r16
    1238:	41 e0       	ldi	r20, 0x01	; 1
    123a:	61 e0       	ldi	r22, 0x01	; 1
    123c:	c7 01       	movw	r24, r14
    123e:	0e 94 ed 07 	call	0xfda	; 0xfda <_ZN7MCP251513setFilterMaskENS_4MASKEbm>
            return result;
        }
    }

    return ERROR_OK;
}
    1242:	64 96       	adiw	r28, 0x14	; 20
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	f8 94       	cli
    1248:	de bf       	out	0x3e, r29	; 62
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	cd bf       	out	0x3d, r28	; 61
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	1f 91       	pop	r17
    1254:	0f 91       	pop	r16
    1256:	ff 90       	pop	r15
    1258:	ef 90       	pop	r14
    125a:	df 90       	pop	r13
    125c:	cf 90       	pop	r12
    125e:	bf 90       	pop	r11
    1260:	af 90       	pop	r10
    1262:	08 95       	ret

00001264 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame>:

    return ERROR_OK;
}

MCP2515::ERROR MCP2515::sendMessage(const TXBn txbn, const struct can_frame *frame)
{
    1264:	4f 92       	push	r4
    1266:	5f 92       	push	r5
    1268:	6f 92       	push	r6
    126a:	7f 92       	push	r7
    126c:	af 92       	push	r10
    126e:	bf 92       	push	r11
    1270:	cf 92       	push	r12
    1272:	df 92       	push	r13
    1274:	ef 92       	push	r14
    1276:	ff 92       	push	r15
    1278:	0f 93       	push	r16
    127a:	1f 93       	push	r17
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
    1284:	2d 97       	sbiw	r28, 0x0d	; 13
    1286:	0f b6       	in	r0, 0x3f	; 63
    1288:	f8 94       	cli
    128a:	de bf       	out	0x3e, r29	; 62
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	cd bf       	out	0x3d, r28	; 61
    1290:	5c 01       	movw	r10, r24
    1292:	fa 01       	movw	r30, r20
    if (frame->can_dlc > CAN_MAX_DLEN) {
    1294:	24 81       	ldd	r18, Z+4	; 0x04
    1296:	29 30       	cpi	r18, 0x09	; 9
    1298:	08 f0       	brcs	.+2      	; 0x129c <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x38>
    129a:	5c c0       	rjmp	.+184    	; 0x1354 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0xf0>
        return ERROR_FAILTX;
    }

    const struct TXBn_REGS *txbuf = &TXB[txbn];
    129c:	e6 2e       	mov	r14, r22
    129e:	f1 2c       	mov	r15, r1

    uint8_t data[13];

    bool ext = (frame->can_id & CAN_EFF_FLAG);
    12a0:	80 81       	ld	r24, Z
    12a2:	91 81       	ldd	r25, Z+1	; 0x01
    12a4:	a2 81       	ldd	r26, Z+2	; 0x02
    12a6:	b3 81       	ldd	r27, Z+3	; 0x03
    12a8:	ac 01       	movw	r20, r24
    12aa:	bd 01       	movw	r22, r26
    12ac:	44 27       	eor	r20, r20
    12ae:	77 fd       	sbrc	r23, 7
    12b0:	43 95       	inc	r20
    12b2:	55 27       	eor	r21, r21
    12b4:	66 27       	eor	r22, r22
    12b6:	77 27       	eor	r23, r23
    bool rtr = (frame->can_id & CAN_RTR_FLAG);
    12b8:	2c 01       	movw	r4, r24
    12ba:	3d 01       	movw	r6, r26
    12bc:	44 24       	eor	r4, r4
    12be:	55 24       	eor	r5, r5
    12c0:	66 24       	eor	r6, r6
    12c2:	20 e4       	ldi	r18, 0x40	; 64
    12c4:	72 22       	and	r7, r18
    uint32_t id = (frame->can_id & (ext ? CAN_EFF_MASK : CAN_SFF_MASK));
    12c6:	b7 fd       	sbrc	r27, 7
    12c8:	05 c0       	rjmp	.+10     	; 0x12d4 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x70>
    12ca:	0f ef       	ldi	r16, 0xFF	; 255
    12cc:	17 e0       	ldi	r17, 0x07	; 7
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	04 c0       	rjmp	.+8      	; 0x12dc <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x78>
    12d4:	0f ef       	ldi	r16, 0xFF	; 255
    12d6:	1f ef       	ldi	r17, 0xFF	; 255
    12d8:	2f ef       	ldi	r18, 0xFF	; 255
    12da:	3f e1       	ldi	r19, 0x1F	; 31
    12dc:	6f 01       	movw	r12, r30

    prepareId(data, ext, id);
    12de:	08 23       	and	r16, r24
    12e0:	19 23       	and	r17, r25
    12e2:	2a 23       	and	r18, r26
    12e4:	3b 23       	and	r19, r27
    12e6:	be 01       	movw	r22, r28
    12e8:	6f 5f       	subi	r22, 0xFF	; 255
    12ea:	7f 4f       	sbci	r23, 0xFF	; 255
    12ec:	c5 01       	movw	r24, r10
    12ee:	0e 94 c2 07 	call	0xf84	; 0xf84 <_ZN7MCP25159prepareIdEPhbm>
    12f2:	f6 01       	movw	r30, r12
    12f4:	14 81       	ldd	r17, Z+4	; 0x04

    data[MCP_DLC] = rtr ? (frame->can_dlc | RTR_MASK) : frame->can_dlc;
    12f6:	81 2f       	mov	r24, r17
    12f8:	45 28       	or	r4, r5
    12fa:	46 28       	or	r4, r6
    12fc:	47 28       	or	r4, r7
    12fe:	09 f0       	breq	.+2      	; 0x1302 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x9e>
    1300:	80 64       	ori	r24, 0x40	; 64
    1302:	8d 83       	std	Y+5, r24	; 0x05

    memcpy(&data[MCP_DATA], frame->data, frame->can_dlc);
    1304:	41 2f       	mov	r20, r17
    1306:	50 e0       	ldi	r21, 0x00	; 0
    1308:	b6 01       	movw	r22, r12
    130a:	68 5f       	subi	r22, 0xF8	; 248
    130c:	7f 4f       	sbci	r23, 0xFF	; 255
    130e:	ce 01       	movw	r24, r28
    1310:	06 96       	adiw	r24, 0x06	; 6
    1312:	0e 94 c6 0b 	call	0x178c	; 0x178c <memcpy>

    setRegisters(txbuf->SIDH, data, 5 + frame->can_dlc);
    1316:	25 e0       	ldi	r18, 0x05	; 5
    1318:	21 0f       	add	r18, r17
    131a:	87 01       	movw	r16, r14
    131c:	00 0f       	add	r16, r16
    131e:	11 1f       	adc	r17, r17
    1320:	0e 0d       	add	r16, r14
    1322:	1f 1d       	adc	r17, r15
    1324:	0c 5c       	subi	r16, 0xCC	; 204
    1326:	1e 4f       	sbci	r17, 0xFE	; 254
    1328:	ae 01       	movw	r20, r28
    132a:	4f 5f       	subi	r20, 0xFF	; 255
    132c:	5f 4f       	sbci	r21, 0xFF	; 255
    132e:	f8 01       	movw	r30, r16
    1330:	61 81       	ldd	r22, Z+1	; 0x01
    1332:	c5 01       	movw	r24, r10
    1334:	0e 94 5e 06 	call	0xcbc	; 0xcbc <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    modifyRegister(txbuf->CTRL, TXB_TXREQ, TXB_TXREQ);
    1338:	f8 01       	movw	r30, r16
    133a:	10 81       	ld	r17, Z
    133c:	28 e0       	ldi	r18, 0x08	; 8
    133e:	48 e0       	ldi	r20, 0x08	; 8
    1340:	61 2f       	mov	r22, r17
    1342:	c5 01       	movw	r24, r10
    1344:	0e 94 89 06 	call	0xd12	; 0xd12 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    uint8_t ctrl = readRegister(txbuf->CTRL);
    1348:	61 2f       	mov	r22, r17
    134a:	c5 01       	movw	r24, r10
    134c:	0e 94 00 06 	call	0xc00	; 0xc00 <_ZN7MCP251512readRegisterENS_8REGISTERE>
    if ((ctrl & (TXB_ABTF | TXB_MLOA | TXB_TXERR)) != 0) {
    1350:	80 77       	andi	r24, 0x70	; 112
    1352:	09 f0       	breq	.+2      	; 0x1356 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0xf2>
}

MCP2515::ERROR MCP2515::sendMessage(const TXBn txbn, const struct can_frame *frame)
{
    if (frame->can_dlc > CAN_MAX_DLEN) {
        return ERROR_FAILTX;
    1354:	84 e0       	ldi	r24, 0x04	; 4
    uint8_t ctrl = readRegister(txbuf->CTRL);
    if ((ctrl & (TXB_ABTF | TXB_MLOA | TXB_TXERR)) != 0) {
        return ERROR_FAILTX;
    }
    return ERROR_OK;
}
    1356:	2d 96       	adiw	r28, 0x0d	; 13
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	f8 94       	cli
    135c:	de bf       	out	0x3e, r29	; 62
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	cd bf       	out	0x3d, r28	; 61
    1362:	df 91       	pop	r29
    1364:	cf 91       	pop	r28
    1366:	1f 91       	pop	r17
    1368:	0f 91       	pop	r16
    136a:	ff 90       	pop	r15
    136c:	ef 90       	pop	r14
    136e:	df 90       	pop	r13
    1370:	cf 90       	pop	r12
    1372:	bf 90       	pop	r11
    1374:	af 90       	pop	r10
    1376:	7f 90       	pop	r7
    1378:	6f 90       	pop	r6
    137a:	5f 90       	pop	r5
    137c:	4f 90       	pop	r4
    137e:	08 95       	ret

00001380 <_ZN7MCP251511sendMessageEPK9can_frame>:

MCP2515::ERROR MCP2515::sendMessage(const struct can_frame *frame)
{
    1380:	9f 92       	push	r9
    1382:	af 92       	push	r10
    1384:	bf 92       	push	r11
    1386:	cf 92       	push	r12
    1388:	df 92       	push	r13
    138a:	ef 92       	push	r14
    138c:	ff 92       	push	r15
    138e:	0f 93       	push	r16
    1390:	1f 93       	push	r17
    1392:	cf 93       	push	r28
    1394:	df 93       	push	r29
    1396:	00 d0       	rcall	.+0      	; 0x1398 <_ZN7MCP251511sendMessageEPK9can_frame+0x18>
    1398:	1f 92       	push	r1
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    if (frame->can_dlc > CAN_MAX_DLEN) {
    139e:	fb 01       	movw	r30, r22
    13a0:	24 81       	ldd	r18, Z+4	; 0x04
    13a2:	29 30       	cpi	r18, 0x09	; 9
    13a4:	e8 f5       	brcc	.+122    	; 0x1420 <_ZN7MCP251511sendMessageEPK9can_frame+0xa0>
    13a6:	7b 01       	movw	r14, r22
    13a8:	8c 01       	movw	r16, r24
        return ERROR_FAILTX;
    }

    TXBn txBuffers[N_TXBUFFERS] = {TXB0, TXB1, TXB2};
    13aa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
    13ae:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
    13b2:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
    13b6:	89 83       	std	Y+1, r24	; 0x01
    13b8:	9a 83       	std	Y+2, r25	; 0x02
    13ba:	ab 83       	std	Y+3, r26	; 0x03
    13bc:	ce 01       	movw	r24, r28
    13be:	01 96       	adiw	r24, 0x01	; 1
    13c0:	6c 01       	movw	r12, r24
    13c2:	5e 01       	movw	r10, r28
    13c4:	94 e0       	ldi	r25, 0x04	; 4
    13c6:	a9 0e       	add	r10, r25
    13c8:	b1 1c       	adc	r11, r1

    for (int i=0; i<N_TXBUFFERS; i++) {
        const struct TXBn_REGS *txbuf = &TXB[txBuffers[i]];
    13ca:	f6 01       	movw	r30, r12
    13cc:	91 90       	ld	r9, Z+
    13ce:	6f 01       	movw	r12, r30
        uint8_t ctrlval = readRegister(txbuf->CTRL);
    13d0:	29 2d       	mov	r18, r9
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	f9 01       	movw	r30, r18
    13d6:	ee 0f       	add	r30, r30
    13d8:	ff 1f       	adc	r31, r31
    13da:	2e 0f       	add	r18, r30
    13dc:	3f 1f       	adc	r19, r31
    13de:	f9 01       	movw	r30, r18
    13e0:	ec 5c       	subi	r30, 0xCC	; 204
    13e2:	fe 4f       	sbci	r31, 0xFE	; 254
    13e4:	60 81       	ld	r22, Z
    13e6:	c8 01       	movw	r24, r16
    13e8:	0e 94 00 06 	call	0xc00	; 0xc00 <_ZN7MCP251512readRegisterENS_8REGISTERE>
        if ( (ctrlval & TXB_TXREQ) == 0 ) {
    13ec:	83 fd       	sbrc	r24, 3
    13ee:	13 c0       	rjmp	.+38     	; 0x1416 <_ZN7MCP251511sendMessageEPK9can_frame+0x96>
            return sendMessage(txBuffers[i], frame);
    13f0:	a7 01       	movw	r20, r14
    13f2:	69 2d       	mov	r22, r9
    13f4:	c8 01       	movw	r24, r16
        }
    }

    return ERROR_ALLTXBUSY;
}
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	1f 91       	pop	r17
    1402:	0f 91       	pop	r16
    1404:	ff 90       	pop	r15
    1406:	ef 90       	pop	r14
    1408:	df 90       	pop	r13
    140a:	cf 90       	pop	r12
    140c:	bf 90       	pop	r11
    140e:	af 90       	pop	r10
    1410:	9f 90       	pop	r9

    for (int i=0; i<N_TXBUFFERS; i++) {
        const struct TXBn_REGS *txbuf = &TXB[txBuffers[i]];
        uint8_t ctrlval = readRegister(txbuf->CTRL);
        if ( (ctrlval & TXB_TXREQ) == 0 ) {
            return sendMessage(txBuffers[i], frame);
    1412:	0c 94 32 09 	jmp	0x1264	; 0x1264 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame>
        return ERROR_FAILTX;
    }

    TXBn txBuffers[N_TXBUFFERS] = {TXB0, TXB1, TXB2};

    for (int i=0; i<N_TXBUFFERS; i++) {
    1416:	ca 14       	cp	r12, r10
    1418:	db 04       	cpc	r13, r11
    141a:	b9 f6       	brne	.-82     	; 0x13ca <_ZN7MCP251511sendMessageEPK9can_frame+0x4a>
        if ( (ctrlval & TXB_TXREQ) == 0 ) {
            return sendMessage(txBuffers[i], frame);
        }
    }

    return ERROR_ALLTXBUSY;
    141c:	82 e0       	ldi	r24, 0x02	; 2
    141e:	01 c0       	rjmp	.+2      	; 0x1422 <_ZN7MCP251511sendMessageEPK9can_frame+0xa2>
}

MCP2515::ERROR MCP2515::sendMessage(const struct can_frame *frame)
{
    if (frame->can_dlc > CAN_MAX_DLEN) {
        return ERROR_FAILTX;
    1420:	84 e0       	ldi	r24, 0x04	; 4
            return sendMessage(txBuffers[i], frame);
        }
    }

    return ERROR_ALLTXBUSY;
}
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	1f 91       	pop	r17
    142e:	0f 91       	pop	r16
    1430:	ff 90       	pop	r15
    1432:	ef 90       	pop	r14
    1434:	df 90       	pop	r13
    1436:	cf 90       	pop	r12
    1438:	bf 90       	pop	r11
    143a:	af 90       	pop	r10
    143c:	9f 90       	pop	r9
    143e:	08 95       	ret

00001440 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(const RXBn rxbn, struct can_frame *frame)
{
    1440:	7f 92       	push	r7
    1442:	8f 92       	push	r8
    1444:	9f 92       	push	r9
    1446:	af 92       	push	r10
    1448:	bf 92       	push	r11
    144a:	cf 92       	push	r12
    144c:	df 92       	push	r13
    144e:	ef 92       	push	r14
    1450:	ff 92       	push	r15
    1452:	0f 93       	push	r16
    1454:	1f 93       	push	r17
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
    145a:	00 d0       	rcall	.+0      	; 0x145c <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x1c>
    145c:	00 d0       	rcall	.+0      	; 0x145e <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x1e>
    145e:	1f 92       	push	r1
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
    1464:	4c 01       	movw	r8, r24
    1466:	5a 01       	movw	r10, r20
    const struct RXBn_REGS *rxb = &RXB[rxbn];

    uint8_t tbufdata[5];

    readRegisters(rxb->SIDH, tbufdata, 5);
    1468:	24 e0       	ldi	r18, 0x04	; 4
    146a:	62 9f       	mul	r22, r18
    146c:	80 01       	movw	r16, r0
    146e:	11 24       	eor	r1, r1
    1470:	f8 01       	movw	r30, r16
    1472:	e4 5d       	subi	r30, 0xD4	; 212
    1474:	fe 4f       	sbci	r31, 0xFE	; 254
    1476:	25 e0       	ldi	r18, 0x05	; 5
    1478:	ae 01       	movw	r20, r28
    147a:	4f 5f       	subi	r20, 0xFF	; 255
    147c:	5f 4f       	sbci	r21, 0xFF	; 255
    147e:	61 81       	ldd	r22, Z+1	; 0x01
    1480:	0e 94 19 06 	call	0xc32	; 0xc32 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    uint32_t id = (tbufdata[MCP_SIDH]<<3) + (tbufdata[MCP_SIDL]>>5);
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	99 81       	ldd	r25, Y+1	; 0x01
    1488:	c8 2e       	mov	r12, r24
    148a:	d1 2c       	mov	r13, r1
    148c:	45 e0       	ldi	r20, 0x05	; 5
    148e:	d5 94       	asr	r13
    1490:	c7 94       	ror	r12
    1492:	4a 95       	dec	r20
    1494:	e1 f7       	brne	.-8      	; 0x148e <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x4e>
    1496:	e8 e0       	ldi	r30, 0x08	; 8
    1498:	9e 9f       	mul	r25, r30
    149a:	c0 0c       	add	r12, r0
    149c:	d1 1c       	adc	r13, r1
    149e:	11 24       	eor	r1, r1
    14a0:	0d 2c       	mov	r0, r13
    14a2:	00 0c       	add	r0, r0
    14a4:	ee 08       	sbc	r14, r14
    14a6:	ff 08       	sbc	r15, r15

    if ( (tbufdata[MCP_SIDL] & TXB_EXIDE_MASK) ==  TXB_EXIDE_MASK ) {
    14a8:	83 ff       	sbrs	r24, 3
    14aa:	20 c0       	rjmp	.+64     	; 0x14ec <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xac>
        id = (id<<2) + (tbufdata[MCP_SIDL] & 0x03);
    14ac:	92 e0       	ldi	r25, 0x02	; 2
    14ae:	cc 0c       	add	r12, r12
    14b0:	dd 1c       	adc	r13, r13
    14b2:	ee 1c       	adc	r14, r14
    14b4:	ff 1c       	adc	r15, r15
    14b6:	9a 95       	dec	r25
    14b8:	d1 f7       	brne	.-12     	; 0x14ae <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x6e>
        id = (id<<8) + tbufdata[MCP_EID8];
    14ba:	83 70       	andi	r24, 0x03	; 3
    14bc:	c8 0e       	add	r12, r24
    14be:	d1 1c       	adc	r13, r1
    14c0:	e1 1c       	adc	r14, r1
    14c2:	f1 1c       	adc	r15, r1
    14c4:	fe 2c       	mov	r15, r14
    14c6:	ed 2c       	mov	r14, r13
    14c8:	dc 2c       	mov	r13, r12
    14ca:	cc 24       	eor	r12, r12
        id = (id<<8) + tbufdata[MCP_EID0];
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	c8 0e       	add	r12, r24
    14d0:	d1 1c       	adc	r13, r1
    14d2:	e1 1c       	adc	r14, r1
    14d4:	f1 1c       	adc	r15, r1
    14d6:	fe 2c       	mov	r15, r14
    14d8:	ed 2c       	mov	r14, r13
    14da:	dc 2c       	mov	r13, r12
    14dc:	cc 24       	eor	r12, r12
    14de:	8c 81       	ldd	r24, Y+4	; 0x04
    14e0:	c8 0e       	add	r12, r24
    14e2:	d1 1c       	adc	r13, r1
    14e4:	e1 1c       	adc	r14, r1
    14e6:	f1 1c       	adc	r15, r1
        id |= CAN_EFF_FLAG;
    14e8:	68 94       	set
    14ea:	f7 f8       	bld	r15, 7
    }

    uint8_t dlc = (tbufdata[MCP_DLC] & DLC_MASK);
    14ec:	8d 81       	ldd	r24, Y+5	; 0x05
    14ee:	8f 70       	andi	r24, 0x0F	; 15
    14f0:	78 2e       	mov	r7, r24
    if (dlc > CAN_MAX_DLEN) {
    14f2:	f8 e0       	ldi	r31, 0x08	; 8
    14f4:	f8 17       	cp	r31, r24
    14f6:	28 f1       	brcs	.+74     	; 0x1542 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x102>
        return ERROR_FAIL;
    }

    uint8_t ctrl = readRegister(rxb->CTRL);
    14f8:	f8 01       	movw	r30, r16
    14fa:	e4 5d       	subi	r30, 0xD4	; 212
    14fc:	fe 4f       	sbci	r31, 0xFE	; 254
    14fe:	60 81       	ld	r22, Z
    1500:	c4 01       	movw	r24, r8
    1502:	0e 94 00 06 	call	0xc00	; 0xc00 <_ZN7MCP251512readRegisterENS_8REGISTERE>
    if (ctrl & RXBnCTRL_RTR) {
    1506:	83 ff       	sbrs	r24, 3
    1508:	02 c0       	rjmp	.+4      	; 0x150e <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xce>
        id |= CAN_RTR_FLAG;
    150a:	68 94       	set
    150c:	f6 f8       	bld	r15, 6
    }

    frame->can_id = id;
    150e:	f5 01       	movw	r30, r10
    1510:	c0 82       	st	Z, r12
    1512:	d1 82       	std	Z+1, r13	; 0x01
    1514:	e2 82       	std	Z+2, r14	; 0x02
    1516:	f3 82       	std	Z+3, r15	; 0x03
    frame->can_dlc = dlc;
    1518:	74 82       	std	Z+4, r7	; 0x04

    readRegisters(rxb->DATA, frame->data, dlc);
    151a:	a5 01       	movw	r20, r10
    151c:	48 5f       	subi	r20, 0xF8	; 248
    151e:	5f 4f       	sbci	r21, 0xFF	; 255
    1520:	04 5d       	subi	r16, 0xD4	; 212
    1522:	1e 4f       	sbci	r17, 0xFE	; 254
    1524:	27 2d       	mov	r18, r7
    1526:	f8 01       	movw	r30, r16
    1528:	62 81       	ldd	r22, Z+2	; 0x02
    152a:	c4 01       	movw	r24, r8
    152c:	0e 94 19 06 	call	0xc32	; 0xc32 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    modifyRegister(MCP_CANINTF, rxb->CANINTF_RXnIF, 0);
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	f8 01       	movw	r30, r16
    1534:	43 81       	ldd	r20, Z+3	; 0x03
    1536:	6c e2       	ldi	r22, 0x2C	; 44
    1538:	c4 01       	movw	r24, r8
    153a:	0e 94 89 06 	call	0xd12	; 0xd12 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    return ERROR_OK;
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	01 c0       	rjmp	.+2      	; 0x1544 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x104>
        id |= CAN_EFF_FLAG;
    }

    uint8_t dlc = (tbufdata[MCP_DLC] & DLC_MASK);
    if (dlc > CAN_MAX_DLEN) {
        return ERROR_FAIL;
    1542:	81 e0       	ldi	r24, 0x01	; 1
    readRegisters(rxb->DATA, frame->data, dlc);

    modifyRegister(MCP_CANINTF, rxb->CANINTF_RXnIF, 0);

    return ERROR_OK;
}
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	df 91       	pop	r29
    1550:	cf 91       	pop	r28
    1552:	1f 91       	pop	r17
    1554:	0f 91       	pop	r16
    1556:	ff 90       	pop	r15
    1558:	ef 90       	pop	r14
    155a:	df 90       	pop	r13
    155c:	cf 90       	pop	r12
    155e:	bf 90       	pop	r11
    1560:	af 90       	pop	r10
    1562:	9f 90       	pop	r9
    1564:	8f 90       	pop	r8
    1566:	7f 90       	pop	r7
    1568:	08 95       	ret

0000156a <_ZN7MCP251511readMessageEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(struct can_frame *frame)
{
    156a:	0f 93       	push	r16
    156c:	1f 93       	push	r17
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	ec 01       	movw	r28, r24
    1574:	8b 01       	movw	r16, r22
    ERROR rc;
    uint8_t stat = getStatus();
    1576:	0e 94 a8 06 	call	0xd50	; 0xd50 <_ZN7MCP25159getStatusEv>

    if ( stat & STAT_RX0IF ) {
    157a:	80 ff       	sbrs	r24, 0
    157c:	03 c0       	rjmp	.+6      	; 0x1584 <_ZN7MCP251511readMessageEP9can_frame+0x1a>
        rc = readMessage(RXB0, frame);
    157e:	a8 01       	movw	r20, r16
    1580:	60 e0       	ldi	r22, 0x00	; 0
    1582:	04 c0       	rjmp	.+8      	; 0x158c <_ZN7MCP251511readMessageEP9can_frame+0x22>
    } else if ( stat & STAT_RX1IF ) {
    1584:	81 ff       	sbrs	r24, 1
    1586:	09 c0       	rjmp	.+18     	; 0x159a <_ZN7MCP251511readMessageEP9can_frame+0x30>
        rc = readMessage(RXB1, frame);
    1588:	a8 01       	movw	r20, r16
    158a:	61 e0       	ldi	r22, 0x01	; 1
    158c:	ce 01       	movw	r24, r28
    } else {
        rc = ERROR_NOMSG;
    }

    return rc;
}
    158e:	df 91       	pop	r29
    1590:	cf 91       	pop	r28
    1592:	1f 91       	pop	r17
    1594:	0f 91       	pop	r16
    uint8_t stat = getStatus();

    if ( stat & STAT_RX0IF ) {
        rc = readMessage(RXB0, frame);
    } else if ( stat & STAT_RX1IF ) {
        rc = readMessage(RXB1, frame);
    1596:	0c 94 20 0a 	jmp	0x1440	; 0x1440 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
    } else {
        rc = ERROR_NOMSG;
    }

    return rc;
}
    159a:	85 e0       	ldi	r24, 0x05	; 5
    159c:	df 91       	pop	r29
    159e:	cf 91       	pop	r28
    15a0:	1f 91       	pop	r17
    15a2:	0f 91       	pop	r16
    15a4:	08 95       	ret

000015a6 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    15a6:	cf 93       	push	r28
  uint8_t sreg = SREG;
    15a8:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    15aa:	f8 94       	cli
  if (!initialized) {
    15ac:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <_ZN8SPIClass11initializedE>
    15b0:	81 11       	cpse	r24, r1
    15b2:	27 c0       	rjmp	.+78     	; 0x1602 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    15b4:	e2 ef       	ldi	r30, 0xF2	; 242
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    15ba:	ee ed       	ldi	r30, 0xDE	; 222
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    15c0:	e8 2f       	mov	r30, r24
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	ee 0f       	add	r30, r30
    15c6:	ff 1f       	adc	r31, r31
    15c8:	ea 5f       	subi	r30, 0xFA	; 250
    15ca:	fe 4f       	sbci	r31, 0xFE	; 254
    15cc:	a5 91       	lpm	r26, Z+
    15ce:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    15d0:	ec 91       	ld	r30, X
    15d2:	e9 23       	and	r30, r25
    15d4:	21 f4       	brne	.+8      	; 0x15de <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    15d6:	61 e0       	ldi	r22, 0x01	; 1
    15d8:	8a e0       	ldi	r24, 0x0A	; 10
    15da:	0e 94 6f 0b 	call	0x16de	; 0x16de <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    15de:	61 e0       	ldi	r22, 0x01	; 1
    15e0:	8a e0       	ldi	r24, 0x0A	; 10
    15e2:	0e 94 33 0b 	call	0x1666	; 0x1666 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    15e6:	8c b5       	in	r24, 0x2c	; 44
    15e8:	80 61       	ori	r24, 0x10	; 16
    15ea:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    15ec:	8c b5       	in	r24, 0x2c	; 44
    15ee:	80 64       	ori	r24, 0x40	; 64
    15f0:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    15f2:	61 e0       	ldi	r22, 0x01	; 1
    15f4:	8d e0       	ldi	r24, 0x0D	; 13
    15f6:	0e 94 33 0b 	call	0x1666	; 0x1666 <pinMode>
    pinMode(MOSI, OUTPUT);
    15fa:	61 e0       	ldi	r22, 0x01	; 1
    15fc:	8b e0       	ldi	r24, 0x0B	; 11
    15fe:	0e 94 33 0b 	call	0x1666	; 0x1666 <pinMode>
  }
  initialized++; // reference count
    1602:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <_ZN8SPIClass11initializedE>
    1606:	8f 5f       	subi	r24, 0xFF	; 255
    1608:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_ZN8SPIClass11initializedE>
  SREG = sreg;
    160c:	cf bf       	out	0x3f, r28	; 63
}
    160e:	cf 91       	pop	r28
    1610:	08 95       	ret

00001612 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1612:	08 95       	ret

00001614 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1614:	83 30       	cpi	r24, 0x03	; 3
    1616:	81 f0       	breq	.+32     	; 0x1638 <turnOffPWM+0x24>
    1618:	28 f4       	brcc	.+10     	; 0x1624 <turnOffPWM+0x10>
    161a:	81 30       	cpi	r24, 0x01	; 1
    161c:	99 f0       	breq	.+38     	; 0x1644 <turnOffPWM+0x30>
    161e:	82 30       	cpi	r24, 0x02	; 2
    1620:	a1 f0       	breq	.+40     	; 0x164a <turnOffPWM+0x36>
    1622:	08 95       	ret
    1624:	87 30       	cpi	r24, 0x07	; 7
    1626:	a9 f0       	breq	.+42     	; 0x1652 <turnOffPWM+0x3e>
    1628:	88 30       	cpi	r24, 0x08	; 8
    162a:	b9 f0       	breq	.+46     	; 0x165a <turnOffPWM+0x46>
    162c:	84 30       	cpi	r24, 0x04	; 4
    162e:	d1 f4       	brne	.+52     	; 0x1664 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1630:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1634:	8f 7d       	andi	r24, 0xDF	; 223
    1636:	03 c0       	rjmp	.+6      	; 0x163e <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1638:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    163c:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    163e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1642:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1644:	84 b5       	in	r24, 0x24	; 36
    1646:	8f 77       	andi	r24, 0x7F	; 127
    1648:	02 c0       	rjmp	.+4      	; 0x164e <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    164a:	84 b5       	in	r24, 0x24	; 36
    164c:	8f 7d       	andi	r24, 0xDF	; 223
    164e:	84 bd       	out	0x24, r24	; 36
    1650:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1652:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1656:	8f 77       	andi	r24, 0x7F	; 127
    1658:	03 c0       	rjmp	.+6      	; 0x1660 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    165a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    165e:	8f 7d       	andi	r24, 0xDF	; 223
    1660:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    1664:	08 95       	ret

00001666 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1666:	cf 93       	push	r28
    1668:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	fc 01       	movw	r30, r24
    166e:	ec 52       	subi	r30, 0x2C	; 44
    1670:	ff 4f       	sbci	r31, 0xFF	; 255
    1672:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1674:	fc 01       	movw	r30, r24
    1676:	e8 51       	subi	r30, 0x18	; 24
    1678:	ff 4f       	sbci	r31, 0xFF	; 255
    167a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    167c:	88 23       	and	r24, r24
    167e:	61 f1       	breq	.+88     	; 0x16d8 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	fc 01       	movw	r30, r24
    1688:	ea 5f       	subi	r30, 0xFA	; 250
    168a:	fe 4f       	sbci	r31, 0xFE	; 254
    168c:	c5 91       	lpm	r28, Z+
    168e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1690:	fc 01       	movw	r30, r24
    1692:	e4 50       	subi	r30, 0x04	; 4
    1694:	ff 4f       	sbci	r31, 0xFF	; 255
    1696:	a5 91       	lpm	r26, Z+
    1698:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    169a:	61 11       	cpse	r22, r1
    169c:	09 c0       	rjmp	.+18     	; 0x16b0 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    169e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    16a0:	f8 94       	cli
		*reg &= ~bit;
    16a2:	88 81       	ld	r24, Y
    16a4:	20 95       	com	r18
    16a6:	82 23       	and	r24, r18
    16a8:	88 83       	st	Y, r24
		*out &= ~bit;
    16aa:	ec 91       	ld	r30, X
    16ac:	2e 23       	and	r18, r30
    16ae:	0b c0       	rjmp	.+22     	; 0x16c6 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    16b0:	62 30       	cpi	r22, 0x02	; 2
    16b2:	61 f4       	brne	.+24     	; 0x16cc <pinMode+0x66>
		uint8_t oldSREG = SREG;
    16b4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    16b6:	f8 94       	cli
		*reg &= ~bit;
    16b8:	88 81       	ld	r24, Y
    16ba:	32 2f       	mov	r19, r18
    16bc:	30 95       	com	r19
    16be:	83 23       	and	r24, r19
    16c0:	88 83       	st	Y, r24
		*out |= bit;
    16c2:	ec 91       	ld	r30, X
    16c4:	2e 2b       	or	r18, r30
    16c6:	2c 93       	st	X, r18
		SREG = oldSREG;
    16c8:	9f bf       	out	0x3f, r25	; 63
    16ca:	06 c0       	rjmp	.+12     	; 0x16d8 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    16cc:	8f b7       	in	r24, 0x3f	; 63
                cli();
    16ce:	f8 94       	cli
		*reg |= bit;
    16d0:	e8 81       	ld	r30, Y
    16d2:	2e 2b       	or	r18, r30
    16d4:	28 83       	st	Y, r18
		SREG = oldSREG;
    16d6:	8f bf       	out	0x3f, r24	; 63
	}
}
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	08 95       	ret

000016de <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    16de:	1f 93       	push	r17
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	f9 01       	movw	r30, r18
    16ea:	e0 54       	subi	r30, 0x40	; 64
    16ec:	ff 4f       	sbci	r31, 0xFF	; 255
    16ee:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    16f0:	f9 01       	movw	r30, r18
    16f2:	ec 52       	subi	r30, 0x2C	; 44
    16f4:	ff 4f       	sbci	r31, 0xFF	; 255
    16f6:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    16f8:	f9 01       	movw	r30, r18
    16fa:	e8 51       	subi	r30, 0x18	; 24
    16fc:	ff 4f       	sbci	r31, 0xFF	; 255
    16fe:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1700:	cc 23       	and	r28, r28
    1702:	c1 f0       	breq	.+48     	; 0x1734 <digitalWrite+0x56>
    1704:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1706:	81 11       	cpse	r24, r1
    1708:	0e 94 0a 0b 	call	0x1614	; 0x1614 <turnOffPWM>

	out = portOutputRegister(port);
    170c:	ec 2f       	mov	r30, r28
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	ee 0f       	add	r30, r30
    1712:	ff 1f       	adc	r31, r31
    1714:	e4 50       	subi	r30, 0x04	; 4
    1716:	ff 4f       	sbci	r31, 0xFF	; 255
    1718:	a5 91       	lpm	r26, Z+
    171a:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    171c:	9f b7       	in	r25, 0x3f	; 63
	cli();
    171e:	f8 94       	cli

	if (val == LOW) {
    1720:	11 11       	cpse	r17, r1
    1722:	04 c0       	rjmp	.+8      	; 0x172c <digitalWrite+0x4e>
		*out &= ~bit;
    1724:	8c 91       	ld	r24, X
    1726:	d0 95       	com	r29
    1728:	d8 23       	and	r29, r24
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <digitalWrite+0x52>
	} else {
		*out |= bit;
    172c:	ec 91       	ld	r30, X
    172e:	de 2b       	or	r29, r30
    1730:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1732:	9f bf       	out	0x3f, r25	; 63
}
    1734:	df 91       	pop	r29
    1736:	cf 91       	pop	r28
    1738:	1f 91       	pop	r17
    173a:	08 95       	ret

0000173c <__udivmodsi4>:
    173c:	a1 e2       	ldi	r26, 0x21	; 33
    173e:	1a 2e       	mov	r1, r26
    1740:	aa 1b       	sub	r26, r26
    1742:	bb 1b       	sub	r27, r27
    1744:	fd 01       	movw	r30, r26
    1746:	0d c0       	rjmp	.+26     	; 0x1762 <__udivmodsi4_ep>

00001748 <__udivmodsi4_loop>:
    1748:	aa 1f       	adc	r26, r26
    174a:	bb 1f       	adc	r27, r27
    174c:	ee 1f       	adc	r30, r30
    174e:	ff 1f       	adc	r31, r31
    1750:	a2 17       	cp	r26, r18
    1752:	b3 07       	cpc	r27, r19
    1754:	e4 07       	cpc	r30, r20
    1756:	f5 07       	cpc	r31, r21
    1758:	20 f0       	brcs	.+8      	; 0x1762 <__udivmodsi4_ep>
    175a:	a2 1b       	sub	r26, r18
    175c:	b3 0b       	sbc	r27, r19
    175e:	e4 0b       	sbc	r30, r20
    1760:	f5 0b       	sbc	r31, r21

00001762 <__udivmodsi4_ep>:
    1762:	66 1f       	adc	r22, r22
    1764:	77 1f       	adc	r23, r23
    1766:	88 1f       	adc	r24, r24
    1768:	99 1f       	adc	r25, r25
    176a:	1a 94       	dec	r1
    176c:	69 f7       	brne	.-38     	; 0x1748 <__udivmodsi4_loop>
    176e:	60 95       	com	r22
    1770:	70 95       	com	r23
    1772:	80 95       	com	r24
    1774:	90 95       	com	r25
    1776:	9b 01       	movw	r18, r22
    1778:	ac 01       	movw	r20, r24
    177a:	bd 01       	movw	r22, r26
    177c:	cf 01       	movw	r24, r30
    177e:	08 95       	ret

00001780 <__tablejump2__>:
    1780:	ee 0f       	add	r30, r30
    1782:	ff 1f       	adc	r31, r31
    1784:	05 90       	lpm	r0, Z+
    1786:	f4 91       	lpm	r31, Z
    1788:	e0 2d       	mov	r30, r0
    178a:	09 94       	ijmp

0000178c <memcpy>:
    178c:	fb 01       	movw	r30, r22
    178e:	dc 01       	movw	r26, r24
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <memcpy+0xa>
    1792:	01 90       	ld	r0, Z+
    1794:	0d 92       	st	X+, r0
    1796:	41 50       	subi	r20, 0x01	; 1
    1798:	50 40       	sbci	r21, 0x00	; 0
    179a:	d8 f7       	brcc	.-10     	; 0x1792 <memcpy+0x6>
    179c:	08 95       	ret

0000179e <_exit>:
    179e:	f8 94       	cli

000017a0 <__stop_program>:
    17a0:	ff cf       	rjmp	.-2      	; 0x17a0 <__stop_program>
